{
	"id": 0,
	"name": "Truffle Decoding and Encoding",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "@truffle/codec",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "# Truffle Codec",
				"text": "This module provides low-level decoding and encoding functionality for\nSolidity and the Solidity ABI.  Many parts of this module are intended\nprimarily for internal use by Truffle and so remain largely undocumented,\nbut some of its types are also output by @truffle/decoder, which provides\na higher-level interface to much of this module's functionality.\n\n## If you're here from Truffle Decoder or Truffle Encoder\n\nIf you're coming here from [[@truffle/decoder]] or [[@truffle/encoder]],\nyou probably just want to know about the parts that are relevant to you.\nThese are:\n\n* The \"data\" category (specifically [[Format]])\n* The \"output\" and \"enumerations\" categories ([[CalldataDecoding]], [[LogDecoding]], et al., see below)\n* The \"errors\" category (specifically [[UnknownUserDefinedTypeError]])\n\nNote that the data category is largely scarce in\ndocumentation, although that's because it's largely self-explanatory.\n\nIf you're not just here from Truffle Decoder or Encoder, but are actually\ninterested in the lower-level workings, read on.\n\n## How this module differs from Truffle Decoder and Encoder\n\nUnlike Truffle Decoder and Encoder, this library makes no network connections\nand avoids dependencies that do.  Instead, its decoding functionality\nis generator-based; calling one of the decoding functions returns a\ngenerator.  This generator's `next()` function may return a finished\nresult, or it may return a request for more information.  It is up to\nthe caller to fulfill these requests -- say, by making a network\nconnection of its own.  This is how @truffle/decoder and @truffle/encoder\nwork; @truffle/codec makes requests, while Decoder and Encoder fulfill them by\nlooking up the necessary information on the blockchain.\n\nThis library also provides additional functionality beyond what's used by\nTruffle Decoder and Encoder.  In particular, this library also exists to\nsupport Truffle Debugger, and so it provides decoding functionality not just\nfor transactions, logs, and state variables, but also for Solidity variables\nduring transaction execution, including circularity detection for memroy\nstructures.  It includes functionality for decoding Solidity's internal\nfunction pointers, which the debugger uses, but which Truffle Decoder\ncurrently does not (although this is planned for the future).\n\nThere is also functionality for decoding return values and revert messages\nthat goes beyond what's currently available in @truffle/decoder; this may get\na better interface in the future.\n\n## How to use\n\nYou should probably use [[@truffle/decoder]] or [[@truffle/encoder]]\ninstead, if your use case doesn't preclude it.  This module has little\ndocumentation, where it has any at all, and it's likely that parts of its\ninterface may change (particularly regarding allocation).  That said, if you\ntruly need the functionality here, Truffle Decoder and Truffle Encoder can\nperhaps serve as something of a reference implementation (and perhaps\nTruffle Debugger as well, though that code is much harder to read or copy).\n"
			},
			"originalName": "codec/lib",
			"children": [
				{
					"id": 1133,
					"name": "AbiData",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "For allocation, encoding, and decoding of locations related to the ABI\n(calldata in Solidity, events, etc.)"
					},
					"children": [
						{
							"id": 1134,
							"name": "Allocate",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1170,
									"name": "Utils",
									"kind": 4,
									"kindString": "Namespace",
									"flags": {},
									"children": [
										{
											"id": 1174,
											"name": "ContextAndAllocationInfo",
											"kind": 256,
											"kindString": "Interface",
											"flags": {},
											"children": [
												{
													"id": 1178,
													"name": "allocationInfo",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/abi-data/allocate/utils.ts",
															"line": 18,
															"character": 2
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1223,
															"name": "ContractAllocationInfo"
														}
													}
												},
												{
													"id": 1175,
													"name": "contexts",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/abi-data/allocate/utils.ts",
															"line": 15,
															"character": 2
														}
													],
													"type": {
														"type": "reference",
														"id": 1868,
														"name": "Contexts"
													}
												},
												{
													"id": 1177,
													"name": "contractsAndContexts",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/abi-data/allocate/utils.ts",
															"line": 17,
															"character": 2
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1231,
															"name": "ContractAndContexts"
														}
													}
												},
												{
													"id": 1176,
													"name": "deployedContexts",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/abi-data/allocate/utils.ts",
															"line": 16,
															"character": 2
														}
													],
													"type": {
														"type": "reference",
														"id": 1868,
														"name": "Contexts"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1178,
														1175,
														1177,
														1176
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/utils.ts",
													"line": 14,
													"character": 17
												}
											]
										},
										{
											"id": 1171,
											"name": "collectAllocationInfo",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/utils.ts",
													"line": 21,
													"character": 16
												}
											],
											"signatures": [
												{
													"id": 1172,
													"name": "collectAllocationInfo",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1173,
															"name": "compilations",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1796,
																	"name": "Compilation"
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 1174,
														"name": "ContextAndAllocationInfo"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Interfaces",
											"kind": 256,
											"children": [
												1174
											]
										},
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												1171
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/utils.ts",
											"line": 1,
											"character": 0
										}
									]
								},
								{
									"id": 1179,
									"name": "AbiAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 42,
											"character": 17
										}
									],
									"indexSignature": {
										"id": 1180,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1181,
												"name": "id",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"name": "AbiAllocation"
												},
												{
													"type": "literal",
													"value": null
												}
											]
										}
									}
								},
								{
									"id": 1182,
									"name": "AbiSizeInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1184,
											"name": "dynamic",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 33,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1183,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 32,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1184,
												1183
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 31,
											"character": 17
										}
									]
								},
								{
									"id": 1214,
									"name": "BlankReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1218,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 196,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 885,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1217,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 195,
													"character": 2
												}
											],
											"type": {
												"type": "tuple"
											}
										},
										{
											"id": 1215,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 193,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "selfdestruct"
													},
													{
														"type": "literal",
														"value": "failure"
													}
												]
											}
										},
										{
											"id": 1216,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 194,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1218,
												1217,
												1215,
												1216
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 192,
											"character": 17
										}
									]
								},
								{
									"id": 1185,
									"name": "CalldataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1186,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 97,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionEntry"
													},
													{
														"type": "reference",
														"name": "ConstructorEntry"
													}
												]
											}
										},
										{
											"id": 1189,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 100,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 885,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1188,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 99,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "CalldataArgumentAllocation"
												}
											}
										},
										{
											"id": 1187,
											"name": "offset",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 98,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1186,
												1189,
												1188,
												1187
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 96,
											"character": 17
										}
									]
								},
								{
									"id": 1204,
									"name": "ConstructorReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1209,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 189,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 885,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1208,
											"name": "delegatecallGuard",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 188,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1207,
											"name": "immutables",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 187,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturnImmutableAllocation"
												}
											}
										},
										{
											"id": 1205,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 185,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "bytecode"
											}
										},
										{
											"id": 1206,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 186,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1209,
												1208,
												1207,
												1205,
												1206
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 184,
											"character": 17
										}
									]
								},
								{
									"id": 1223,
									"name": "ContractAllocationInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1224,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 14,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"name": "Abi"
											}
										},
										{
											"id": 1230,
											"name": "compilationId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 20,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1229,
											"name": "compiler",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 19,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1743,
												"name": "CompilerVersion"
											}
										},
										{
											"id": 1227,
											"name": "constructorContext",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 17,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1871,
												"name": "Context"
											}
										},
										{
											"id": 1225,
											"name": "contractNode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 15,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1674,
												"name": "AstNode"
											}
										},
										{
											"id": 1226,
											"name": "deployedContext",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 16,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1871,
												"name": "Context"
											}
										},
										{
											"id": 1228,
											"name": "immutableReferences",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 18,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"name": "ImmutableReferences"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1224,
												1230,
												1229,
												1227,
												1225,
												1226,
												1228
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 13,
											"character": 17
										}
									]
								},
								{
									"id": 1231,
									"name": "ContractAndContexts",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1232,
											"name": "compilationId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 24,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1236,
											"name": "constructorContext",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 28,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1871,
												"name": "Context"
											}
										},
										{
											"id": 1233,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 25,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1811,
												"name": "Contract"
											}
										},
										{
											"id": 1235,
											"name": "deployedContext",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 27,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1871,
												"name": "Context"
											}
										},
										{
											"id": 1234,
											"name": "node",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 26,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1674,
												"name": "AstNode"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1232,
												1236,
												1233,
												1235,
												1234
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 23,
											"character": 17
										}
									]
								},
								{
									"id": 1237,
									"name": "EventAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1238,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 136,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"name": "EventEntry"
											}
										},
										{
											"id": 1244,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 142,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 885,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1242,
											"name": "anonymous",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 140,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1243,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 141,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "EventArgumentAllocation"
												}
											}
										},
										{
											"id": 1239,
											"name": "contextHash",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 137,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1240,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 138,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 236,
												"name": "ContractType"
											}
										},
										{
											"id": 1241,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 139,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1238,
												1244,
												1242,
												1243,
												1239,
												1240,
												1241
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 135,
											"character": 17
										}
									]
								},
								{
									"id": 1220,
									"name": "FunctionCalldataAndReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1221,
											"name": "input",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 88,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1185,
												"name": "CalldataAllocation"
											}
										},
										{
											"id": 1222,
											"name": "output",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 89,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1191,
												"name": "ReturnValueReturndataAllocation"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1221,
												1222
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 87,
											"character": 17
										}
									]
								},
								{
									"id": 1210,
									"name": "MessageReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1213,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 202,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 885,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1211,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 200,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "returnmessage"
											}
										},
										{
											"id": 1212,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 201,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1213,
												1211,
												1212
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 199,
											"character": 17
										}
									]
								},
								{
									"id": 1191,
									"name": "ReturnValueReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1195,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 169,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 885,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1194,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 168,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataArgumentAllocation"
												}
											}
										},
										{
											"id": 1192,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 166,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "return"
											}
										},
										{
											"id": 1193,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 167,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1195,
												1194,
												1192,
												1193
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 165,
											"character": 17
										}
									]
								},
								{
									"id": 1245,
									"name": "ReturndataAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 152,
											"character": 17
										}
									],
									"indexSignature": {
										"id": 1246,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1247,
												"name": "contextHash",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reflection",
											"declaration": {
												"id": 1248,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/abi-data/allocate/types.ts",
														"line": 153,
														"character": 25
													}
												],
												"indexSignature": {
													"id": 1249,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1250,
															"name": "selector",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1196,
															"name": "RevertReturndataAllocation"
														}
													}
												}
											}
										}
									}
								},
								{
									"id": 1196,
									"name": "RevertReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1199,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 175,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"name": "ErrorEntry"
											}
										},
										{
											"id": 1203,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 181,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 885,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1202,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 180,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataArgumentAllocation"
												}
											}
										},
										{
											"id": 1201,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 177,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 236,
												"name": "ContractType"
											}
										},
										{
											"id": 1200,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 176,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1197,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 173,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "revert"
											}
										},
										{
											"id": 1198,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 174,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1199,
												1203,
												1202,
												1201,
												1200,
												1197,
												1198
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 172,
											"character": 17
										}
									]
								},
								{
									"id": 1219,
									"name": "CalldataAndReturndataAllocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 92,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 1220,
												"name": "FunctionCalldataAndReturndataAllocation"
											},
											{
												"type": "reference",
												"name": "ConstructorCalldataAndReturndataAllocation"
											}
										]
									}
								},
								{
									"id": 1190,
									"name": "ReturndataAllocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 158,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 1191,
												"name": "ReturnValueReturndataAllocation"
											},
											{
												"type": "reference",
												"id": 1196,
												"name": "RevertReturndataAllocation"
											},
											{
												"type": "reference",
												"id": 1204,
												"name": "ConstructorReturndataAllocation"
											},
											{
												"type": "reference",
												"id": 1210,
												"name": "MessageReturndataAllocation"
											},
											{
												"type": "reference",
												"id": 1214,
												"name": "BlankReturndataAllocation"
											}
										]
									}
								},
								{
									"id": 1251,
									"name": "FallbackOutputAllocation",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 80,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"id": 1210,
										"name": "MessageReturndataAllocation"
									},
									"defaultValue": "..."
								},
								{
									"id": 1138,
									"name": "abiSizeInfo",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isProtected": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 342,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1139,
											"name": "abiSizeInfo",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isProtected": true
											},
											"comment": {},
											"parameters": [
												{
													"id": 1140,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												},
												{
													"id": 1141,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1179,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1182,
												"name": "AbiSizeInfo"
											}
										}
									]
								},
								{
									"id": 1135,
									"name": "getAbiAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 86,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1136,
											"name": "getAbiAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1137,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 284,
														"name": "TypesById"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1179,
												"name": "AbiAllocations"
											}
										}
									]
								},
								{
									"id": 1142,
									"name": "getCalldataAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1033,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1143,
											"name": "getCalldataAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1144,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1223,
															"name": "ContractAllocationInfo"
														}
													}
												},
												{
													"id": 1145,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1146,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": {
																"id": 1147,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 1148,
																		"name": "compilationId",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "reference",
																	"id": 1722,
																	"name": "Ast.AstNodes"
																}
															}
														}
													}
												},
												{
													"id": 1149,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 284,
														"name": "TypesById"
													}
												},
												{
													"id": 1150,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1179,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "CalldataAllocations"
											}
										}
									]
								},
								{
									"id": 1160,
									"name": "getEventAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1335,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1161,
											"name": "getEventAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1162,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1223,
															"name": "ContractAllocationInfo"
														}
													}
												},
												{
													"id": 1163,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1164,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": {
																"id": 1165,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 1166,
																		"name": "compilationId",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "reference",
																	"id": 1722,
																	"name": "Ast.AstNodes"
																}
															}
														}
													}
												},
												{
													"id": 1167,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 284,
														"name": "TypesById"
													}
												},
												{
													"id": 1168,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1179,
														"name": "AbiAllocations"
													}
												},
												{
													"id": 1169,
													"name": "allowConstructorEvents",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"defaultValue": "false"
												}
											],
											"type": {
												"type": "reference",
												"name": "EventAllocations"
											}
										}
									]
								},
								{
									"id": 1151,
									"name": "getReturndataAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1137,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1152,
											"name": "getReturndataAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1153,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1223,
															"name": "ContractAllocationInfo"
														}
													}
												},
												{
													"id": 1154,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1155,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": {
																"id": 1156,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 1157,
																		"name": "compilationId",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "reference",
																	"id": 1722,
																	"name": "Ast.AstNodes"
																}
															}
														}
													}
												},
												{
													"id": 1158,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 284,
														"name": "TypesById"
													}
												},
												{
													"id": 1159,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1179,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1245,
												"name": "ReturndataAllocations"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Namespaces",
									"kind": 4,
									"children": [
										1170
									]
								},
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1179,
										1182,
										1214,
										1185,
										1204,
										1223,
										1231,
										1237,
										1220,
										1210,
										1191,
										1245,
										1196
									]
								},
								{
									"title": "Type Aliases",
									"kind": 4194304,
									"children": [
										1219,
										1190
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1251
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1138,
										1135,
										1142,
										1160,
										1151
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/allocate/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1266,
							"name": "Decode",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1267,
									"name": "decodeAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 24,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1268,
											"name": "decodeAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1269,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												},
												{
													"id": 1270,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1956,
														"name": "AbiDataPointer"
													}
												},
												{
													"id": 1271,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												},
												{
													"id": 1272,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "{}"
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 294,
														"name": "Format.Values.Result"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1273,
									"name": "decodeAbiReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 58,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1274,
											"name": "decodeAbiReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1275,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 217,
																"name": "TupleType"
															},
															{
																"type": "reference",
																"id": 283,
																"name": "ReferenceType"
															}
														]
													}
												},
												{
													"id": 1276,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 1954,
																"name": "StackFormPointer"
															},
															{
																"type": "reference",
																"id": 1956,
																"name": "AbiDataPointer"
															}
														]
													}
												},
												{
													"id": 1277,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												},
												{
													"id": 1278,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "{}"
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 294,
														"name": "Format.Values.Result"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1279,
									"name": "decodeAbiReferenceStatic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 313,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1280,
											"name": "decodeAbiReferenceStatic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1281,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 217,
																"name": "TupleType"
															},
															{
																"type": "reference",
																"id": 283,
																"name": "ReferenceType"
															}
														]
													}
												},
												{
													"id": 1282,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1956,
														"name": "AbiDataPointer"
													}
												},
												{
													"id": 1283,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												},
												{
													"id": 1284,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "{}"
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 294,
														"name": "Format.Values.Result"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1267,
										1273,
										1279
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/decode/index.ts",
									"line": 7,
									"character": 0
								}
							]
						},
						{
							"id": 1252,
							"name": "Encode",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1253,
									"name": "encodeAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 23,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1254,
											"name": "encodeAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1255,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 294,
														"name": "Result"
													}
												},
												{
													"id": 1256,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1179,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1257,
									"name": "encodeTupleAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 131,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1258,
											"name": "encodeTupleAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1259,
													"name": "tuple",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 294,
															"name": "Result"
														}
													}
												},
												{
													"id": 1260,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1179,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1261,
									"name": "encodeTupleAbiWithSelector",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 189,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1262,
											"name": "encodeTupleAbiWithSelector",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1263,
													"name": "tuple",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 294,
															"name": "Result"
														}
													}
												},
												{
													"id": 1264,
													"name": "selector",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1265,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1179,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1253,
										1257,
										1261
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1253,
												1257,
												1261
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/encode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1285,
							"name": "Import",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1286,
									"name": "abiParameterToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/import/index.ts",
											"line": 14,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1287,
											"name": "abiParameterToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1288,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Parameter"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 104,
												"name": "Format.Types.Type"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1286
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/import/index.ts",
									"line": 7,
									"character": 0
								}
							]
						},
						{
							"id": 1289,
							"name": "Utils",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1326,
									"name": "DEFAULT_CONSTRUCTOR_ABI",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 16,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"name": "Abi.ConstructorEntry"
									},
									"defaultValue": "..."
								},
								{
									"id": 1311,
									"name": "abiEntryHasStorageParameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 151,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1312,
											"name": "abiEntryHasStorageParameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1313,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Entry"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1308,
									"name": "abiEntryIsObviouslyIllTyped",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 108,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1309,
											"name": "abiEntryIsObviouslyIllTyped",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1310,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Entry"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1293,
									"name": "abiHasPayableFallback",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 40,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1294,
											"name": "abiHasPayableFallback",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1295,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1323,
									"name": "abiSelector",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "abi-utils/dist/lib/signature.d.ts",
											"line": 6,
											"character": 24
										}
									],
									"signatures": [
										{
											"id": 1324,
											"name": "abiSelector",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1325,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "FunctionEntry"
															},
															{
																"type": "reference",
																"name": "EventEntry"
															},
															{
																"type": "reference",
																"name": "ErrorEntry"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1314,
									"name": "abiSignature",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "abi-utils/dist/lib/signature.d.ts",
											"line": 3,
											"character": 24
										}
									],
									"signatures": [
										{
											"id": 1315,
											"name": "abiSignature",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1316,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "FunctionEntry"
															},
															{
																"type": "reference",
																"name": "EventEntry"
															},
															{
																"type": "reference",
																"name": "ErrorEntry"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1320,
									"name": "abiTupleSignature",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "abi-utils/dist/lib/signature.d.ts",
											"line": 4,
											"character": 24
										}
									],
									"signatures": [
										{
											"id": 1321,
											"name": "abiTupleSignature",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1322,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Parameter"
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1317,
									"name": "abiTypeSignature",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "abi-utils/dist/lib/signature.d.ts",
											"line": 5,
											"character": 24
										}
									],
									"signatures": [
										{
											"id": 1318,
											"name": "abiTypeSignature",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1319,
													"name": "parameter",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Parameter"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1296,
									"name": "abisMatch",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 54,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1297,
											"name": "abisMatch",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1298,
													"name": "entry1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Entry"
													}
												},
												{
													"id": 1299,
													"name": "entry2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Entry"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1290,
									"name": "computeSelectors",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 23,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1291,
											"name": "computeSelectors",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1292,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 1327,
														"name": "FunctionAbiBySelectors"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1300,
									"name": "definitionMatchesAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 86,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1301,
											"name": "definitionMatchesAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1302,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Entry"
													}
												},
												{
													"id": 1303,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												},
												{
													"id": 1304,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1722,
														"name": "AstNodes"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1305,
									"name": "topicsCount",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 101,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1306,
											"name": "topicsCount",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1307,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EventEntry"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1326
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1311,
										1308,
										1293,
										1323,
										1314,
										1320,
										1317,
										1296,
										1290,
										1300,
										1305
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1327,
							"name": "FunctionAbiBySelectors",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 3,
									"character": 17
								}
							],
							"indexSignature": {
								"id": 1328,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1329,
										"name": "selector",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reference",
									"name": "FunctionEntry"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								1134,
								1266,
								1252,
								1285,
								1289
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1327
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/abi-data/index.ts",
							"line": 10,
							"character": 0
						}
					]
				},
				{
					"id": 1546,
					"name": "Ast",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1658,
							"name": "Import",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1665,
									"name": "definitionToStoredType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/import/index.ts",
											"line": 387,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1666,
											"name": "definitionToStoredType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1667,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												},
												{
													"id": 1668,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1669,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1743,
														"name": "CompilerVersion"
													}
												},
												{
													"id": 1670,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1722,
														"name": "AstNodes"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 193,
												"name": "Format.Types.UserDefinedType"
											}
										}
									]
								},
								{
									"id": 1659,
									"name": "definitionToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/import/index.ts",
											"line": 27,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1660,
											"name": "definitionToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1661,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												},
												{
													"id": 1662,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1663,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1743,
														"name": "CompilerVersion"
													}
												},
												{
													"id": 1664,
													"name": "forceLocation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 2312,
														"name": "Location"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 104,
												"name": "Format.Types.Type"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1665,
										1659
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/import/index.ts",
									"line": 7,
									"character": 0
								}
							]
						},
						{
							"id": 1547,
							"name": "Utils",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1621,
									"name": "baseDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 300,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1622,
											"name": "baseDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1623,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1674,
												"name": "AstNode"
											}
										}
									]
								},
								{
									"id": 1602,
									"name": "contractKind",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 213,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1603,
											"name": "contractKind",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "only for contract types, obviously! will yield nonsense otherwise!"
											},
											"parameters": [
												{
													"id": 1604,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 2315,
												"name": "Common.ContractKind"
											}
										}
									]
								},
								{
									"id": 1572,
									"name": "decimalPlaces",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 129,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1573,
											"name": "decimalPlaces",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for fixed-point types, obviously"
											},
											"parameters": [
												{
													"id": 1574,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								},
								{
									"id": 1647,
									"name": "definitionToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 544,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1648,
											"name": "definitionToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "the main function. just does some dispatch.\nreturns undefined on bad input"
											},
											"parameters": [
												{
													"id": 1649,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												},
												{
													"id": 1650,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1722,
														"name": "AstNodes"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Abi.Entry"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1638,
									"name": "functionClass",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 491,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1639,
											"name": "functionClass",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1640,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1635,
									"name": "functionKind",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 469,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1636,
											"name": "functionKind",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "compatibility function, since pre-0.5.0 functions don't have node.kind\nreturns undefined if you don't put in a function node"
											},
											"parameters": [
												{
													"id": 1637,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1651,
									"name": "getterParameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 831,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1652,
											"name": "getterParameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1653,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												},
												{
													"id": 1654,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1722,
														"name": "AstNodes"
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1655,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1656,
															"name": "inputs",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/ast/utils.ts",
																	"line": 834,
																	"character": 5
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1674,
																	"name": "AstNode"
																}
															}
														},
														{
															"id": 1657,
															"name": "outputs",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/ast/utils.ts",
																	"line": 834,
																	"character": 24
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1674,
																	"name": "AstNode"
																}
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1656,
																1657
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/ast/utils.ts",
															"line": 834,
															"character": 3
														}
													]
												}
											}
										}
									]
								},
								{
									"id": 1575,
									"name": "isArray",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 136,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1576,
											"name": "isArray",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1577,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1644,
									"name": "isContractPayable",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 531,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1645,
											"name": "isContractPayable",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "takes a contract definition and asks, does it have a payable fallback\nfunction?"
											},
											"parameters": [
												{
													"id": 1646,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1578,
									"name": "isDynamicArray",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 141,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1579,
											"name": "isDynamicArray",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1580,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1593,
									"name": "isEnum",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 186,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1594,
											"name": "isEnum",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1595,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1590,
									"name": "isMapping",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 181,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1591,
											"name": "isMapping",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1592,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1596,
									"name": "isReference",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 191,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1597,
											"name": "isReference",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1598,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1608,
									"name": "isSimpleConstant",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 245,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1609,
											"name": "isSimpleConstant",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1610,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1587,
									"name": "isStruct",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 176,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1588,
											"name": "isStruct",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1589,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1624,
									"name": "keyDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 331,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1625,
											"name": "keyDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for use for mappings and arrays only!\nfor arrays, fakes up a uint definition"
											},
											"parameters": [
												{
													"id": 1626,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												},
												{
													"id": 1627,
													"name": "scopes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1725,
														"name": "Scopes"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1674,
												"name": "AstNode"
											}
										}
									]
								},
								{
									"id": 1641,
									"name": "mutability",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 502,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1642,
											"name": "mutability",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "similar compatibility function for mutability for pre-0.4.16 versions\nreturns undefined if you don't give it a FunctionDefinition or\nVariableDeclaration"
											},
											"parameters": [
												{
													"id": 1643,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 2314,
														"name": "Common.Mutability"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1632,
									"name": "parameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 452,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1633,
											"name": "parameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "returns input parameters, then output parameters\nNOTE: ONLY FOR VARIABLE DECLARATIONS OF FUNCTION TYPE\nNOT FOR FUNCTION DEFINITIONS"
											},
											"parameters": [
												{
													"id": 1634,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1674,
															"name": "AstNode"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1674,
															"name": "AstNode"
														}
													}
												]
											}
										}
									]
								},
								{
									"id": 1618,
									"name": "rationalValue",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 292,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1619,
											"name": "rationalValue",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "extract the actual numerical value from a node of type rational.\ncurrently assumes result will be integer (currently returns BN)"
											},
											"parameters": [
												{
													"id": 1620,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "BN",
												"package": "@types/bn.js",
												"name": "BN"
											}
										}
									]
								},
								{
									"id": 1599,
									"name": "referenceType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 203,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1600,
											"name": "referenceType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "note: only use this on things already verified to be references"
											},
											"parameters": [
												{
													"id": 1601,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 2312,
												"name": "Common.Location"
											}
										}
									]
								},
								{
									"id": 1615,
									"name": "regularizeTypeIdentifier",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 279,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1616,
											"name": "regularizeTypeIdentifier",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "adds \"_ptr\" on to the end of type identifiers that might need it; note that\nthis operates on identifiers, not definitions"
											},
											"parameters": [
												{
													"id": 1617,
													"name": "identifier",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1569,
									"name": "specifiedSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 95,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1570,
											"name": "specifiedSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "e.g. uint48 -> 6",
												"returns": "size in bytes for explicit type size, or `null` if not stated"
											},
											"parameters": [
												{
													"id": 1571,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								},
								{
									"id": 1611,
									"name": "spliceLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 255,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1612,
											"name": "spliceLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "definition: a storage reference definition\nlocation: the location you want it to refer to instead"
											},
											"parameters": [
												{
													"id": 1613,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												},
												{
													"id": 1614,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2312,
														"name": "Location"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1674,
												"name": "AstNode"
											}
										}
									]
								},
								{
									"id": 1605,
									"name": "stackSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 223,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1606,
											"name": "stackSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "stack size, in words, of a given type\nnote: this function assumes that UDVTs only ever take up\na single word, which is currently true"
											},
											"parameters": [
												{
													"id": 1607,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								},
								{
									"id": 1581,
									"name": "staticLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 158,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1582,
											"name": "staticLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "length of a statically sized array -- please only use for arrays\nalready verified to be static!"
											},
											"parameters": [
												{
													"id": 1583,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								},
								{
									"id": 1584,
									"name": "staticLengthAsString",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 169,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1585,
											"name": "staticLengthAsString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "see staticLength for explanation"
											},
											"parameters": [
												{
													"id": 1586,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1557,
									"name": "typeClass",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 43,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1558,
											"name": "typeClass",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "returns basic type class for a variable definition node\ne.g.:\n `t_uint256` becomes `uint`\n `t_struct$_Thing_$20_memory_ptr` becomes `struct`"
											},
											"parameters": [
												{
													"id": 1559,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1560,
									"name": "typeClassLongForm",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 57,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1561,
											"name": "typeClassLongForm",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "similar to typeClass, but includes any numeric qualifiers\ne.g.:\n`t_uint256` becomes `uint256`"
											},
											"parameters": [
												{
													"id": 1562,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1563,
									"name": "typeId",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 67,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1564,
											"name": "typeId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for user-defined types -- structs, enums, contracts\noften you can get these from referencedDeclaration, but not\nalways"
											},
											"parameters": [
												{
													"id": 1565,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								},
								{
									"id": 1548,
									"name": "typeIdentifier",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 12,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1549,
											"name": "typeIdentifier",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1550,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1551,
									"name": "typeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 17,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1552,
											"name": "typeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1553,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1554,
									"name": "typeStringWithoutLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 25,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1555,
											"name": "typeStringWithoutLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns the type string, but with location (if any) stripped off the end"
											},
											"parameters": [
												{
													"id": 1556,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1628,
									"name": "valueDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 398,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1629,
											"name": "valueDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for use for mappings only!"
											},
											"parameters": [
												{
													"id": 1630,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												},
												{
													"id": 1631,
													"name": "scopes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1725,
														"name": "Scopes"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1674,
												"name": "AstNode"
											}
										}
									]
								},
								{
									"id": 1566,
									"name": "visibility",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 82,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1567,
											"name": "visibility",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "For function types; returns internal or external\n(not for use on other types! will cause an error!)\nshould only return \"internal\" or \"external\""
											},
											"parameters": [
												{
													"id": 1568,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 2313,
												"name": "Common.Visibility"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1621,
										1602,
										1572,
										1647,
										1638,
										1635,
										1651,
										1575,
										1644,
										1578,
										1593,
										1590,
										1596,
										1608,
										1587,
										1624,
										1641,
										1632,
										1618,
										1599,
										1615,
										1569,
										1611,
										1605,
										1581,
										1584,
										1557,
										1560,
										1563,
										1548,
										1551,
										1554,
										1628,
										1566
									],
									"categories": [
										{
											"title": "Definition Reading",
											"children": [
												1621,
												1602,
												1572,
												1635,
												1575,
												1644,
												1578,
												1593,
												1590,
												1596,
												1608,
												1587,
												1624,
												1641,
												1632,
												1618,
												1599,
												1615,
												1569,
												1611,
												1605,
												1581,
												1584,
												1557,
												1560,
												1563,
												1548,
												1551,
												1554,
												1628,
												1566
											]
										},
										{
											"title": "Other",
											"children": [
												1647,
												1638,
												1651
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1674,
							"name": "AstNode",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1718,
									"name": "anonymous",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 54,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1685,
									"name": "ast_type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 19,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1713,
									"name": "baseType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 49,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1674,
										"name": "AstNode"
									}
								},
								{
									"id": 1679,
									"name": "canonicalName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 13,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1675,
									"name": "constant",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 9,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1719,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 55,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 2315,
										"name": "ContractKind"
									}
								},
								{
									"id": 1692,
									"name": "expression",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 26,
											"character": 2
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1693,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1694,
													"name": "referencedDeclaration",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 27,
															"character": 4
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1694
													]
												}
											]
										}
									}
								},
								{
									"id": 1699,
									"name": "hexValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 35,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1677,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 11,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1717,
									"name": "indexed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 53,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1720,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 56,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1714,
									"name": "keyType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 50,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1674,
										"name": "AstNode"
									}
								},
								{
									"id": 1698,
									"name": "kind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 34,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1680,
									"name": "linearizedBaseContracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 14,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 1681,
									"name": "members",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 15,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1674,
											"name": "AstNode"
										}
									}
								},
								{
									"id": 1676,
									"name": "mutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 10,
											"character": 2
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "mutable"
											},
											{
												"type": "literal",
												"value": "immutable"
											},
											{
												"type": "literal",
												"value": "constant"
											}
										]
									}
								},
								{
									"id": 1678,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 12,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1684,
									"name": "nodeType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 18,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1683,
									"name": "nodes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 17,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1674,
											"name": "AstNode"
										}
									}
								},
								{
									"id": 1707,
									"name": "parameterTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 43,
											"character": 2
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1708,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1709,
													"name": "parameters",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 44,
															"character": 4
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1674,
															"name": "AstNode"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1709
													]
												}
											]
										}
									}
								},
								{
									"id": 1701,
									"name": "parameters",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 37,
											"character": 2
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1702,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1703,
													"name": "parameters",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 38,
															"character": 4
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1674,
															"name": "AstNode"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1703
													]
												}
											]
										}
									}
								},
								{
									"id": 1716,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 52,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1700,
									"name": "referencedDeclaration",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 36,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 1710,
									"name": "returnParameterTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 46,
											"character": 2
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1711,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1712,
													"name": "parameters",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 47,
															"character": 4
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1674,
															"name": "AstNode"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1712
													]
												}
											]
										}
									}
								},
								{
									"id": 1704,
									"name": "returnParameters",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 40,
											"character": 2
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1705,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1706,
													"name": "parameters",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 41,
															"character": 4
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1674,
															"name": "AstNode"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1706
													]
												}
											]
										}
									}
								},
								{
									"id": 1686,
									"name": "scope",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 20,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1687,
									"name": "src",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 21,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1697,
									"name": "stateMutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 33,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 2314,
										"name": "Mutability"
									}
								},
								{
									"id": 1688,
									"name": "stateVariable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 22,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1689,
									"name": "storageLocation",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 23,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1690,
									"name": "typeDescriptions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 24,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1671,
										"name": "TypeDescriptions"
									}
								},
								{
									"id": 1691,
									"name": "typeName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 25,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1674,
										"name": "AstNode"
									}
								},
								{
									"id": 1682,
									"name": "underlyingType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 16,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1674,
										"name": "AstNode"
									}
								},
								{
									"id": 1721,
									"name": "usedErrors",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 57,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 1695,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 29,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 1715,
									"name": "valueType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 51,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1674,
										"name": "AstNode"
									}
								},
								{
									"id": 1696,
									"name": "visibility",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 30,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1718,
										1685,
										1713,
										1679,
										1675,
										1719,
										1692,
										1699,
										1677,
										1717,
										1720,
										1714,
										1698,
										1680,
										1681,
										1676,
										1678,
										1684,
										1683,
										1707,
										1701,
										1716,
										1700,
										1710,
										1704,
										1686,
										1687,
										1697,
										1688,
										1689,
										1690,
										1691,
										1682,
										1721,
										1695,
										1715,
										1696
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 8,
									"character": 17
								}
							]
						},
						{
							"id": 1722,
							"name": "AstNodes",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 63,
									"character": 17
								}
							],
							"indexSignature": {
								"id": 1723,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1724,
										"name": "nodeId",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								],
								"type": {
									"type": "reference",
									"id": 1674,
									"name": "AstNode"
								}
							}
						},
						{
							"id": 1725,
							"name": "Scopes",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 68,
									"character": 17
								}
							],
							"indexSignature": {
								"id": 1726,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1727,
										"name": "nodeId",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reflection",
									"declaration": {
										"id": 1728,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 1737,
												"name": "definition",
												"kind": 1024,
												"kindString": "Property",
												"flags": {
													"isOptional": true
												},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 78,
														"character": 4
													}
												],
												"type": {
													"type": "reference",
													"id": 1674,
													"name": "AstNode"
												}
											},
											{
												"id": 1729,
												"name": "id",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 70,
														"character": 4
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "number"
												}
											},
											{
												"id": 1731,
												"name": "parentId",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 72,
														"character": 4
													}
												],
												"type": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "number"
														},
														{
															"type": "literal",
															"value": null
														}
													]
												}
											},
											{
												"id": 1732,
												"name": "pointer",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 73,
														"character": 4
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"id": 1730,
												"name": "sourceId",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 71,
														"character": 4
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"id": 1733,
												"name": "variables",
												"kind": 1024,
												"kindString": "Property",
												"flags": {
													"isOptional": true
												},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 74,
														"character": 4
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "reflection",
														"declaration": {
															"id": 1734,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 1736,
																	"name": "id",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "codec/lib/ast/types.ts",
																			"line": 76,
																			"character": 6
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 1735,
																	"name": "name",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "codec/lib/ast/types.ts",
																			"line": 75,
																			"character": 6
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		1736,
																		1735
																	]
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/ast/types.ts",
																	"line": 74,
																	"character": 16
																}
															]
														}
													}
												}
											}
										],
										"groups": [
											{
												"title": "Properties",
												"kind": 1024,
												"children": [
													1737,
													1729,
													1731,
													1732,
													1730,
													1733
												]
											}
										],
										"sources": [
											{
												"fileName": "codec/lib/ast/types.ts",
												"line": 69,
												"character": 20
											}
										]
									}
								}
							}
						},
						{
							"id": 1671,
							"name": "TypeDescriptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1672,
									"name": "typeIdentifier",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 4,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1673,
									"name": "typeString",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 5,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1672,
										1673
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 3,
									"character": 17
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								1658,
								1547
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1674,
								1722,
								1725,
								1671
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/ast/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1535,
					"name": "AstConstant",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "For reading/decoding constants expressed as AST nodes"
					},
					"children": [
						{
							"id": 1540,
							"name": "Decode",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1541,
									"name": "decodeConstant",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/decode/index.ts",
											"line": 19,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1542,
											"name": "decodeConstant",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1543,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												},
												{
													"id": 1544,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1996,
														"name": "ConstantDefinitionPointer"
													}
												},
												{
													"id": 1545,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 294,
														"name": "Format.Values.Result"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1541
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast-constant/decode/index.ts",
									"line": 6,
									"character": 0
								}
							]
						},
						{
							"id": 1536,
							"name": "Read",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1537,
									"name": "readDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/read/index.ts",
											"line": 17,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1538,
											"name": "readDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1539,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1996,
														"name": "ConstantDefinitionPointer"
													}
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1537
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast-constant/read/index.ts",
									"line": 7,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								1540,
								1536
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/ast-constant/index.ts",
							"line": 9,
							"character": 0
						}
					]
				},
				{
					"id": 1076,
					"name": "Basic",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "For decoding of primitives and constants"
					},
					"children": [
						{
							"id": 1104,
							"name": "Allocate",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1105,
									"name": "byteLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/allocate/index.ts",
											"line": 9,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1106,
											"name": "byteLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1107,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												},
												{
													"id": 1108,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 284,
														"name": "TypesById"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1105
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/allocate/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1077,
							"name": "Decode",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1093,
									"name": "checkPaddingLeft",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 884,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1094,
											"name": "checkPaddingLeft",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1095,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1096,
													"name": "length",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1078,
									"name": "decodeBasic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 20,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1079,
											"name": "decodeBasic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1080,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												},
												{
													"id": 1081,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1953,
														"name": "DataPointer"
													}
												},
												{
													"id": 1082,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												},
												{
													"id": 1083,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "{}"
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 294,
														"name": "Format.Values.Result"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1084,
									"name": "decodeContract",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 560,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1085,
											"name": "decodeContract",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1086,
													"name": "addressBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1087,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 540,
														"name": "Format.Values.ContractValueInfo"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1088,
									"name": "decodeExternalFunction",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 607,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1089,
											"name": "decodeExternalFunction",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1090,
													"name": "addressBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1091,
													"name": "selectorBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1092,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 383,
														"name": "Format.Values.FunctionExternalValueInfo"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1093,
										1078,
										1084,
										1088
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1100,
							"name": "Encode",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1101,
									"name": "encodeBasic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/encode/index.ts",
											"line": 15,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1102,
											"name": "encodeBasic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Handles encoding of basic types; yes the input type is broader than\nit should be but it's hard to fix this without causing other problems,\nsorry!"
											},
											"parameters": [
												{
													"id": 1103,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 295,
														"name": "Value"
													}
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1101
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1101
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/encode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								1104,
								1077,
								1100
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/basic/index.ts",
							"line": 12,
							"character": 0
						}
					]
				},
				{
					"id": 1109,
					"name": "Bytes",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "Contains functions for dealing with raw bytestrings"
					},
					"children": [
						{
							"id": 1119,
							"name": "Decode",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1120,
									"name": "decodeBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/bytes/decode/index.ts",
											"line": 13,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1121,
											"name": "decodeBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1122,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 122,
																"name": "BytesTypeDynamic"
															},
															{
																"type": "reference",
																"id": 136,
																"name": "StringType"
															}
														]
													}
												},
												{
													"id": 1123,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1953,
														"name": "DataPointer"
													}
												},
												{
													"id": 1124,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												},
												{
													"id": 1125,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "{}"
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 294,
														"name": "Format.Values.Result"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1126,
									"name": "decodeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/bytes/decode/index.ts",
											"line": 58,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1127,
											"name": "decodeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1128,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 493,
												"name": "Format.Values.StringValueInfo"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1120,
										1126
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1129,
							"name": "Encode",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1130,
									"name": "encodeBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/bytes/encode/index.ts",
											"line": 13,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1131,
											"name": "encodeBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Encodes without padding, length, etc!"
											},
											"parameters": [
												{
													"id": 1132,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 469,
																"name": "BytesDynamicValue"
															},
															{
																"type": "reference",
																"id": 487,
																"name": "StringValue"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1130
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1130
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/encode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1110,
							"name": "Read",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1115,
									"name": "readBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/bytes/read/index.ts",
											"line": 28,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1116,
											"name": "readBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1117,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1957,
														"name": "BytesPointer"
													}
												},
												{
													"id": 1118,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2029,
														"name": "EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										}
									]
								},
								{
									"id": 1111,
									"name": "readCode",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/bytes/read/index.ts",
											"line": 6,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1112,
											"name": "readCode",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1113,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1986,
														"name": "CodePointer"
													}
												},
												{
													"id": 1114,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2029,
														"name": "EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1115,
										1111
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/read/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								1119,
								1129,
								1110
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/bytes/index.ts",
							"line": 11,
							"character": 0
						}
					]
				},
				{
					"id": 1749,
					"name": "Compilations",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1750,
							"name": "Utils",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1775,
									"name": "collectUserDefinedTypesAndTaggedOutputs",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 510,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1776,
											"name": "collectUserDefinedTypesAndTaggedOutputs",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "collects user defined types & tagged outputs for a given set of compilations,\nreturning both the definition nodes and (for the types) the type objects",
												"text": "\"Tagged outputs\" means user-defined things that are output by a contract\n(not input to a contract), and which are distinguished by (potentially\nambiguous) selectors.  So, events and custom errors are tagged outputs.\nFunction arguments are not tagged outputs (they're not outputs).\nReturn values are not tagged outputs (they don't have a selector).\nBuilt-in errors (Error(string) and Panic(uint))... OK I guess those could\nbe considered tagged outputs, but we're only looking at user-defined ones\nhere.\n"
											},
											"parameters": [
												{
													"id": 1777,
													"name": "compilations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1796,
															"name": "Compilation"
														}
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1778,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1779,
															"name": "definitions",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/compilations/utils.ts",
																	"line": 513,
																	"character": 2
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 1780,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "codec/lib/compilations/utils.ts",
																			"line": 513,
																			"character": 15
																		}
																	],
																	"indexSignature": {
																		"id": 1781,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 1782,
																				"name": "compilationId",
																				"kind": 32768,
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "reference",
																			"id": 1722,
																			"name": "AstNodes"
																		}
																	}
																}
															}
														},
														{
															"id": 1784,
															"name": "types",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/compilations/utils.ts",
																	"line": 515,
																	"character": 2
																}
															],
															"type": {
																"type": "reference",
																"id": 284,
																"name": "Format.Types.TypesById"
															}
														},
														{
															"id": 1783,
															"name": "typesByCompilation",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/compilations/utils.ts",
																	"line": 514,
																	"character": 2
																}
															],
															"type": {
																"type": "reference",
																"id": 287,
																"name": "Format.Types.TypesByCompilationAndId"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1779,
																1784,
																1783
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/compilations/utils.ts",
															"line": 512,
															"character": 3
														}
													]
												}
											}
										}
									]
								},
								{
									"id": 1785,
									"name": "findCompilationAndContract",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 596,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1786,
											"name": "findCompilationAndContract",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Given a list of compilations, and an artifact appearing in one\nof those compilations, finds the compilation and the corresponding\ncontract object\n(these may be undefined if they can't be found)"
											},
											"parameters": [
												{
													"id": 1787,
													"name": "compilations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1796,
															"name": "Compilation"
														}
													}
												},
												{
													"id": 1788,
													"name": "artifact",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "ContractObject"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "CompilationAndContract"
											}
										}
									]
								},
								{
									"id": 1793,
									"name": "findRepeatCompilationIds",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 692,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1794,
											"name": "findRepeatCompilationIds",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1795,
													"name": "compilations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1796,
															"name": "Compilation"
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												],
												"qualifiedName": "Set",
												"package": "typescript",
												"name": "Set"
											}
										}
									]
								},
								{
									"id": 1768,
									"name": "getContractNode",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 294,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1769,
											"name": "getContractNode",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1770,
													"name": "contract",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1811,
														"name": "Contract"
													}
												},
												{
													"id": 1771,
													"name": "compilation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1796,
														"name": "Compilation"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1674,
												"name": "AstNode"
											}
										}
									]
								},
								{
									"id": 1789,
									"name": "infoToCompilations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 676,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1790,
											"name": "infoToCompilations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1791,
													"name": "projectInfo",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1834,
														"name": "ProjectInfo"
													}
												},
												{
													"id": 1792,
													"name": "nonceString",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1796,
													"name": "Compilation"
												}
											}
										}
									]
								},
								{
									"id": 1759,
									"name": "shimArtifacts",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 58,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1760,
											"name": "shimArtifacts",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "wrapper around shimContracts that just returns\nthe result in a one-element array (keeping the old name\nshimArtifacts for compatibility)"
											},
											"parameters": [
												{
													"id": 1761,
													"name": "artifacts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "ContractObject"
																},
																{
																	"type": "reference",
																	"name": "CompiledContract"
																}
															]
														}
													}
												},
												{
													"id": 1762,
													"name": "files",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												},
												{
													"id": 1763,
													"name": "shimmedCompilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "\"shimmedcompilation\""
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1796,
													"name": "Compilation"
												}
											}
										}
									]
								},
								{
									"id": 1755,
									"name": "shimCompilation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 38,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1756,
											"name": "shimCompilation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1757,
													"name": "inputCompilation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Compilation"
													}
												},
												{
													"id": 1758,
													"name": "shimmedCompilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "\"shimmedcompilation\""
												}
											],
											"type": {
												"type": "reference",
												"id": 1796,
												"name": "Compilation"
											}
										}
									]
								},
								{
									"id": 1751,
									"name": "shimCompilations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 26,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1752,
											"name": "shimCompilations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1753,
													"name": "inputCompilations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Compilation"
														}
													}
												},
												{
													"id": 1754,
													"name": "shimmedCompilationIdPrefix",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "\"shimmedcompilation\""
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1796,
													"name": "Compilation"
												}
											}
										}
									]
								},
								{
									"id": 1764,
									"name": "shimContracts",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 87,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1765,
											"name": "shimContracts",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "shims a bunch of contracts (\"artifacts\", though not necessarily)\nto a compilation.  usually used via one of the above functions.\nNote: if you pass in options.sources, options.files will be ignored.\nNote: if you pass in options.sources, sources will not have\ncompiler set unless you also pass in options.compiler; in this case\nyou should set that up separately, as in shimCompilation()."
											},
											"parameters": [
												{
													"id": 1766,
													"name": "artifacts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "ContractObject"
																},
																{
																	"type": "reference",
																	"name": "CompiledContract"
																}
															]
														}
													}
												},
												{
													"id": 1767,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilationOptions"
													},
													"defaultValue": "{}"
												}
											],
											"type": {
												"type": "reference",
												"id": 1796,
												"name": "Compilation"
											}
										}
									]
								},
								{
									"id": 1772,
									"name": "simpleShimSourceMap",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 481,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1773,
											"name": "simpleShimSourceMap",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "convert Vyper source maps to solidity ones\n(note we won't bother handling the case where the compressed\nversion doesn't exist; that will have to wait for a later version)"
											},
											"parameters": [
												{
													"id": 1774,
													"name": "sourceMap",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"id": 1824,
																"name": "VyperSourceMap"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1775,
										1785,
										1793,
										1768,
										1789,
										1759,
										1755,
										1751,
										1764,
										1772
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1796,
							"name": "Compilation",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An individual compilation."
							},
							"children": [
								{
									"id": 1801,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The compiler used in the compilation.  For internal compatibility\npurposes, this may technically be left out if the compiler is instead\nspecified on each source and contract, but please don't actually do that."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 45,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1743,
										"name": "CompilerVersion"
									}
								},
								{
									"id": 1800,
									"name": "contracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A list of contracts involved in the compilation."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 39,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1811,
											"name": "Contract"
										}
									}
								},
								{
									"id": 1797,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The compilation's ID."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 22,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1802,
									"name": "settings",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The settings used in the compilation.  Works similarly to the compiler field.\nMay be omitted."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 50,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1747,
										"name": "Settings"
									}
								},
								{
									"id": 1799,
									"name": "sources",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A list of sources involved in the compilation.  These must be ordered according\nto their compilation indices.  (If there is for some reason a gap in the\ncompilation indices, a corresponding gap must be left in the sources array.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 35,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1803,
											"name": "Source"
										}
									}
								},
								{
									"id": 1798,
									"name": "unreliableSourceOrder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only intended for internal use.  It indicates\nthat the order on the sources should be disregarded and disables functionality\nthat relies on such an order.  (E.g., the debugger will throw an exception if\nthis is set.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 29,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1801,
										1800,
										1797,
										1802,
										1799,
										1798
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 18,
									"character": 17
								}
							]
						},
						{
							"id": 1811,
							"name": "Contract",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Represents a contract in a compilation."
							},
							"children": [
								{
									"id": 1817,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The contract's ABI."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 125,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"name": "Abi"
									}
								},
								{
									"id": 1813,
									"name": "bytecode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's constructor bytecode; may be given either as a string\nin the old artifacts format, or as a bytecode object in the new\ncompilation format."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 107,
											"character": 2
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Bytecode"
											}
										]
									}
								},
								{
									"id": 1819,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only intended for internal use.\n(It allows the compiler to be set on a source if none is set on the\ncompilation as a whole; please don't do that.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 136,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1743,
										"name": "CompilerVersion"
									}
								},
								{
									"id": 1812,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The contract's name."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 101,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1814,
									"name": "deployedBytecode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's deployed bytecode; may be given either as a string\nin the old artifacts format, or as a bytecode object in the new\ncompilation format."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 113,
											"character": 2
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Bytecode"
											}
										]
									}
								},
								{
									"id": 1823,
									"name": "deployedGeneratedSources",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's deployed generated sources object as output by Solidity 0.7.2 or later.\nNote that this will be a sparse array."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 156,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1803,
											"name": "Source"
										}
									}
								},
								{
									"id": 1816,
									"name": "deployedSourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's deployed source map."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 121,
											"character": 2
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"id": 1824,
												"name": "VyperSourceMap"
											}
										]
									}
								},
								{
									"id": 1822,
									"name": "generatedSources",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's generated sources object as output by Solidity 0.7.2 or later.\nNote that this will be a sparse array."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 151,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1803,
											"name": "Source"
										}
									}
								},
								{
									"id": 1818,
									"name": "immutableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's immutable references object as output by Solidity 0.6.5\nor later."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 130,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"name": "ImmutableReferences"
									}
								},
								{
									"id": 1821,
									"name": "primarySourceId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the contract's primary source."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 146,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1820,
									"name": "settings",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only intended for internal use.\n(It allows the settings to be set on a source if none is set on the\ncompilation as a whole; please don't do that.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 142,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1747,
										"name": "Settings"
									}
								},
								{
									"id": 1815,
									"name": "sourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's constructor source map."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 117,
											"character": 2
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"id": 1824,
												"name": "VyperSourceMap"
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1817,
										1813,
										1819,
										1812,
										1814,
										1823,
										1816,
										1822,
										1818,
										1821,
										1820,
										1815
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 97,
									"character": 17
								}
							]
						},
						{
							"id": 1839,
							"name": "ProjectInfoArtifacts",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Project info given as artifacts."
							},
							"children": [
								{
									"id": 1840,
									"name": "artifacts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A list of contract artifacts for contracts in the project.\nContract constructor objects may be substituted for artifacts, so if\nyou're not sure which you're dealing with, it's OK."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 219,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "ContractObject"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1840
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 213,
									"character": 17
								}
							]
						},
						{
							"id": 1837,
							"name": "ProjectInfoCommon",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Project info given as compile-common-style compilations."
							},
							"children": [
								{
									"id": 1838,
									"name": "commonCompilations",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An list of @truffle/compile-common style compilations; this method of\nspecifying a project is mostly intended for internal Truffle use for now,\nbut you can see the documentation of the that type if you want to\nuse it."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 207,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Compilation"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1838
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 200,
									"character": 17
								}
							]
						},
						{
							"id": 1835,
							"name": "ProjectInfoCompilations",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Project info given as codec-style compilations."
							},
							"children": [
								{
									"id": 1836,
									"name": "compilations",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An list of codec-style compilations; this method of specifying a project\nis mostly intended for internal Truffle use for now, but you can see the\ndocumentation of the Compilation type if you want to use it."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 194,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1796,
											"name": "Compilation"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1836
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 188,
									"character": 17
								}
							]
						},
						{
							"id": 1803,
							"name": "Source",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Represents a source in a compilation."
							},
							"children": [
								{
									"id": 1808,
									"name": "ast",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's abstract syntax tree."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 79,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1674,
										"name": "AstNode"
									}
								},
								{
									"id": 1809,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only intended for internal use.\n(It allows the compiler to be set on a source if none is set on the\ncompilation as a whole; please don't do that.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 85,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1743,
										"name": "CompilerVersion"
									}
								},
								{
									"id": 1804,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's ID.  For internal compatibility purposes, this may technically\nbe left out, but please include it."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 61,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1807,
									"name": "language",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The language for the source file.  For compatibility purposes, this may technicaly\nbe left out, but please include it."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 75,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1810,
									"name": "settings",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only intended for internal use.\n(It allows the settings to be set on a source if none is set on the\ncompilation as a whole; please don't do that.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 91,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1747,
										"name": "Settings"
									}
								},
								{
									"id": 1806,
									"name": "source",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The source text."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 70,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1805,
									"name": "sourcePath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's file path.  If internal is true, will not be a real file path but\nrather just an arbitrary name."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 66,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1808,
										1809,
										1804,
										1807,
										1810,
										1806,
										1805
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 56,
									"character": 17
								}
							]
						},
						{
							"id": 1824,
							"name": "VyperSourceMap",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1825,
									"name": "pc_jump_map",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 162,
											"character": 2
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1826,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 1827,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 1828,
														"name": "pc",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												],
												"type": {
													"type": "union",
													"types": [
														{
															"type": "literal",
															"value": "-"
														},
														{
															"type": "literal",
															"value": "i"
														},
														{
															"type": "literal",
															"value": "o"
														}
													]
												}
											}
										}
									}
								},
								{
									"id": 1829,
									"name": "pc_pos_map",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 165,
											"character": 2
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1830,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 1831,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 1832,
														"name": "pc",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												],
												"type": {
													"type": "tuple",
													"elements": [
														{
															"type": "intrinsic",
															"name": "number"
														},
														{
															"type": "intrinsic",
															"name": "number"
														},
														{
															"type": "intrinsic",
															"name": "number"
														},
														{
															"type": "intrinsic",
															"name": "number"
														}
													]
												}
											}
										}
									}
								},
								{
									"id": 1833,
									"name": "pc_pos_map_compressed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 168,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1825,
										1829,
										1833
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 159,
									"character": 17
								}
							]
						},
						{
							"id": 1834,
							"name": "ProjectInfo",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "This type represents information about a Truffle project that can be used to\nconstruct and initialize a encoder or decoder for that project.  This\ninformation may be passed in various ways; this is done Javascript style,\nwhere you pass an object and the field you use indicates which way you're\nusing.",
								"text": "The old option to use `config` is no longer supported.\n"
							},
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 180,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1835,
										"name": "ProjectInfoCompilations"
									},
									{
										"type": "reference",
										"id": 1837,
										"name": "ProjectInfoCommon"
									},
									{
										"type": "reference",
										"id": 1839,
										"name": "ProjectInfoArtifacts"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								1750
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1796,
								1811,
								1839,
								1837,
								1835,
								1803,
								1824
							]
						},
						{
							"title": "Type Aliases",
							"kind": 4194304,
							"children": [
								1834
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/compilations/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1738,
					"name": "Compiler",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1739,
							"name": "Utils",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1740,
									"name": "solidityFamily",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compiler/utils.ts",
											"line": 7,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1741,
											"name": "solidityFamily",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1742,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1743,
														"name": "CompilerVersion"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1746,
												"name": "SolidityFamily"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1740
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compiler/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1743,
							"name": "CompilerVersion",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1744,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compiler/types.ts",
											"line": 2,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1745,
									"name": "version",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compiler/types.ts",
											"line": 3,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1744,
										1745
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compiler/types.ts",
									"line": 1,
									"character": 17
								}
							]
						},
						{
							"id": 1747,
							"name": "Settings",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1748,
									"name": "viaIR",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compiler/types.ts",
											"line": 24,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1748
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compiler/types.ts",
									"line": 20,
									"character": 17
								}
							]
						},
						{
							"id": 1746,
							"name": "SolidityFamily",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/compiler/types.ts",
									"line": 11,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "unknown"
									},
									{
										"type": "literal",
										"value": "pre-0.5.0"
									},
									{
										"type": "literal",
										"value": "0.5.x"
									},
									{
										"type": "literal",
										"value": "0.8.x"
									},
									{
										"type": "literal",
										"value": "0.8.7+"
									},
									{
										"type": "literal",
										"value": "0.8.9+"
									},
									{
										"type": "literal",
										"value": "0.8.18+"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								1739
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1743,
								1747
							]
						},
						{
							"title": "Type Aliases",
							"kind": 4194304,
							"children": [
								1746
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/compiler/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1841,
					"name": "Contexts",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1842,
							"name": "Import",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1843,
									"name": "contextToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/import/index.ts",
											"line": 4,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1844,
											"name": "contextToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1845,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1871,
														"name": "Context"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 236,
												"name": "Format.Types.ContractType"
											}
										}
									]
								},
								{
									"id": 1846,
									"name": "makeTypeId",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/import/index.ts",
											"line": 29,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1847,
											"name": "makeTypeId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1848,
													"name": "astId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1849,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1843,
										1846
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/import/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1850,
							"name": "Utils",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1851,
									"name": "findContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 17,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1852,
											"name": "findContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1853,
													"name": "contexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1868,
														"name": "Contexts"
													}
												},
												{
													"id": 1854,
													"name": "binary",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 1871,
														"name": "Context"
													},
													{
														"type": "literal",
														"value": null
													}
												]
											}
										}
									]
								},
								{
									"id": 1862,
									"name": "makeContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 340,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1863,
											"name": "makeContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1864,
													"name": "contract",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1811,
														"name": "Contract"
													}
												},
												{
													"id": 1865,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1674,
														"name": "AstNode"
													}
												},
												{
													"id": 1866,
													"name": "compilation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1796,
														"name": "Compilation"
													}
												},
												{
													"id": 1867,
													"name": "isConstructor",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"defaultValue": "false"
												}
											],
											"type": {
												"type": "reference",
												"id": 1871,
												"name": "Context"
											}
										}
									]
								},
								{
									"id": 1855,
									"name": "matchContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 44,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1856,
											"name": "matchContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1857,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1871,
														"name": "Context"
													}
												},
												{
													"id": 1858,
													"name": "givenBinary",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1859,
									"name": "normalizeContexts",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 77,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1860,
											"name": "normalizeContexts",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1861,
													"name": "contexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1868,
														"name": "Contexts"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1868,
												"name": "Contexts"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1851,
										1862,
										1855,
										1859
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1871,
							"name": "Context",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1880,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 24,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1327,
										"name": "FunctionAbiBySelectors"
									}
								},
								{
									"id": 1873,
									"name": "binary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 15,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1887,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 32,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1886,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 31,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1743,
										"name": "CompilerVersion"
									}
								},
								{
									"id": 1872,
									"name": "context",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 14,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1877,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 21,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1879,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 23,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 2315,
										"name": "ContractKind"
									}
								},
								{
									"id": 1876,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 20,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1882,
									"name": "fallbackAbi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 26,
											"character": 2
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1883,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1884,
													"name": "fallback",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/contexts/types.ts",
															"line": 28,
															"character": 4
														}
													],
													"type": {
														"type": "reference",
														"name": "FallbackEntry"
													}
												},
												{
													"id": 1885,
													"name": "receive",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/contexts/types.ts",
															"line": 29,
															"character": 4
														}
													],
													"type": {
														"type": "reference",
														"name": "ReceiveEntry"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1884,
														1885
													]
												}
											]
										}
									}
								},
								{
									"id": 1875,
									"name": "immutableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 19,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"name": "ImmutableReferences"
									}
								},
								{
									"id": 1874,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 18,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1878,
									"name": "linearizedBaseContracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 22,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 1881,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 25,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1880,
										1873,
										1887,
										1886,
										1872,
										1877,
										1879,
										1876,
										1882,
										1875,
										1874,
										1878,
										1881
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 13,
									"character": 17
								}
							]
						},
						{
							"id": 1868,
							"name": "Contexts",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 9,
									"character": 17
								}
							],
							"indexSignature": {
								"id": 1869,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1870,
										"name": "context",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reference",
									"id": 1871,
									"name": "Context"
								}
							}
						},
						{
							"id": 1888,
							"name": "ContractAndContexts",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1889,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 36,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1893,
									"name": "constructorContext",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 40,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1871,
										"name": "Context"
									}
								},
								{
									"id": 1890,
									"name": "contract",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 37,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1811,
										"name": "Contract"
									}
								},
								{
									"id": 1892,
									"name": "deployedContext",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 39,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1871,
										"name": "Context"
									}
								},
								{
									"id": 1891,
									"name": "node",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 38,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1674,
										"name": "AstNode"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1889,
										1893,
										1890,
										1892,
										1891
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 35,
									"character": 17
								}
							]
						},
						{
							"id": 1894,
							"name": "DebuggerContext",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1903,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 56,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"name": "Abi"
									}
								},
								{
									"id": 1896,
									"name": "binary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 47,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1908,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 61,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1907,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 60,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1743,
										"name": "CompilerVersion"
									}
								},
								{
									"id": 1895,
									"name": "context",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 46,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1900,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 53,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1902,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 55,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 2315,
										"name": "ContractKind"
									}
								},
								{
									"id": 1899,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 52,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1898,
									"name": "immutableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 51,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"name": "ImmutableReferences"
									}
								},
								{
									"id": 1897,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 50,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1901,
									"name": "linearizedBaseContracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 54,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 1909,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 62,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1906,
									"name": "primaryLanguage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 59,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1905,
									"name": "primarySource",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 58,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1904,
									"name": "sourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 57,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1903,
										1896,
										1908,
										1907,
										1895,
										1900,
										1902,
										1899,
										1898,
										1897,
										1901,
										1909,
										1906,
										1905,
										1904
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 45,
									"character": 17
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								1842,
								1850
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1871,
								1868,
								1888,
								1894
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/contexts/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1910,
					"name": "Conversion",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1949,
							"name": "cleanBool",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 233,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1950,
									"name": "cleanBool",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1951,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 298,
												"name": "ElementaryResult"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 298,
										"name": "Values.ElementaryResult"
									}
								}
							]
						},
						{
							"id": 1946,
							"name": "countDecimalPlaces",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 225,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1947,
									"name": "countDecimalPlaces",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1948,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "Big",
												"package": "@types/big.js",
												"name": "Big"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						},
						{
							"id": 1914,
							"name": "isBig",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 40,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1915,
									"name": "isBig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1916,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "predicate",
										"name": "input",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"qualifiedName": "Big",
											"package": "@types/big.js",
											"name": "Big"
										}
									}
								}
							]
						},
						{
							"id": 1942,
							"name": "shiftBigDown",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 219,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1943,
									"name": "shiftBigDown",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1944,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "Big",
												"package": "@types/big.js",
												"name": "Big"
											}
										},
										{
											"id": 1945,
											"name": "decimalPlaces",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "Big",
										"package": "@types/big.js",
										"name": "Big"
									}
								}
							]
						},
						{
							"id": 1938,
							"name": "shiftBigUp",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 212,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1939,
									"name": "shiftBigUp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1940,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "Big",
												"package": "@types/big.js",
												"name": "Big"
											}
										},
										{
											"id": 1941,
											"name": "decimalPlaces",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "Big",
										"package": "@types/big.js",
										"name": "Big"
									}
								}
							]
						},
						{
							"id": 1935,
							"name": "stringToBytes",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 200,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1936,
									"name": "stringToBytes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1937,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "Uint8Array",
										"package": "typescript",
										"name": "Uint8Array"
									}
								}
							]
						},
						{
							"id": 1911,
							"name": "toBN",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 14,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1912,
									"name": "toBN",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 1913,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "undefined | string | number | BN | Uint8Array | Big"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "bigint"
													},
													{
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"qualifiedName": "BN",
														"package": "@types/bn.js",
														"name": "BN"
													},
													{
														"type": "reference",
														"qualifiedName": "Big",
														"package": "@types/big.js",
														"name": "Big"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "BN",
										"package": "@types/bn.js",
										"name": "BN"
									}
								}
							]
						},
						{
							"id": 1923,
							"name": "toBig",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 82,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1924,
									"name": "toBig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1925,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "bigint"
													},
													{
														"type": "reference",
														"qualifiedName": "BN",
														"package": "@types/bn.js",
														"name": "BN"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "Big",
										"package": "@types/big.js",
										"name": "Big"
									}
								}
							]
						},
						{
							"id": 1920,
							"name": "toBigInt",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 74,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1921,
									"name": "toBigInt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1922,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "BN",
												"package": "@types/bn.js",
												"name": "BN"
											}
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "BigInt",
										"package": "typescript",
										"name": "BigInt"
									}
								}
							]
						},
						{
							"id": 1931,
							"name": "toBytes",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 139,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1932,
									"name": "toBytes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1933,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "bigint"
													},
													{
														"type": "reference",
														"qualifiedName": "BN",
														"package": "@types/bn.js",
														"name": "BN"
													},
													{
														"type": "reference",
														"qualifiedName": "Big",
														"package": "@types/big.js",
														"name": "Big"
													}
												]
											}
										},
										{
											"id": 1934,
											"name": "length",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "Uint8Array",
										"package": "typescript",
										"name": "Uint8Array"
									}
								}
							]
						},
						{
							"id": 1926,
							"name": "toHexString",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 94,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1927,
									"name": "toHexString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 1928,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Uint8Array | BN | bigint"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "bigint"
													},
													{
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"qualifiedName": "BN",
														"package": "@types/bn.js",
														"name": "BN"
													},
													{
														"type": "reference",
														"qualifiedName": "Big",
														"package": "@types/big.js",
														"name": "Big"
													}
												]
											}
										},
										{
											"id": 1929,
											"name": "padLength",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "number - minimum desired byte length (left-pad with zeroes)"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										},
										{
											"id": 1930,
											"name": "padRight",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "boolean - causes padding to occur on right instead of left"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						},
						{
							"id": 1917,
							"name": "toSignedBN",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 63,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1918,
									"name": "toSignedBN",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 1919,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Uint8Array"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "BN",
										"package": "@types/bn.js",
										"name": "BN"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1949,
								1946,
								1914,
								1942,
								1938,
								1935,
								1911,
								1923,
								1920,
								1931,
								1926,
								1917
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/conversion.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 2004,
					"name": "Evm",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 2022,
							"name": "Import",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 2023,
									"name": "functionTableEntryToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/import/index.ts",
											"line": 6,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 2024,
											"name": "functionTableEntryToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2025,
													"name": "functionEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2064,
														"name": "InternalFunction"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 237,
												"name": "Format.Types.ContractTypeNative"
											}
										}
									]
								},
								{
									"id": 2026,
									"name": "makeInternalFunctionId",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/import/index.ts",
											"line": 23,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 2027,
											"name": "makeInternalFunctionId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2028,
													"name": "functionEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2064,
														"name": "InternalFunction"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2023,
										2026
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/import/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 2005,
							"name": "Utils",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 2017,
									"name": "ADDRESS_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 10,
											"character": 13
										}
									],
									"type": {
										"type": "literal",
										"value": 20
									},
									"defaultValue": "20"
								},
								{
									"id": 2020,
									"name": "MAX_WORD",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 13,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "BN",
										"package": "@types/bn.js",
										"name": "BN"
									},
									"defaultValue": "..."
								},
								{
									"id": 2019,
									"name": "PC_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 12,
											"character": 13
										}
									],
									"type": {
										"type": "literal",
										"value": 4
									},
									"defaultValue": "4"
								},
								{
									"id": 2018,
									"name": "SELECTOR_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 11,
											"character": 13
										}
									],
									"type": {
										"type": "literal",
										"value": 4
									},
									"defaultValue": "ShortSelectorSize"
								},
								{
									"id": 2016,
									"name": "WORD_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 9,
											"character": 13
										}
									],
									"type": {
										"type": "literal",
										"value": 32
									},
									"defaultValue": "0x20"
								},
								{
									"id": 2021,
									"name": "ZERO_ADDRESS",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 14,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "..."
								},
								{
									"id": 2009,
									"name": "equalData",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 38,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 2010,
											"name": "equalData",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2011,
													"name": "bytes1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													}
												},
												{
													"id": 2012,
													"name": "bytes2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 2006,
									"name": "keccak256",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 22,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 2007,
											"name": "keccak256",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2008,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "BN",
												"package": "@types/bn.js",
												"name": "BN"
											}
										}
									]
								},
								{
									"id": 2013,
									"name": "toAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 56,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 2014,
											"name": "toAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2015,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										2017,
										2020,
										2019,
										2018,
										2016,
										2021
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2009,
										2006,
										2013
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 2053,
							"name": "AllocationInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2056,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 49,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1179,
										"name": "AbiAllocations"
									}
								},
								{
									"id": 2057,
									"name": "calldata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 50,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"name": "CalldataAllocations"
									}
								},
								{
									"id": 2059,
									"name": "event",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 52,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"name": "EventAllocations"
									}
								},
								{
									"id": 2055,
									"name": "memory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 48,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1363,
										"name": "MemoryAllocations"
									}
								},
								{
									"id": 2058,
									"name": "returndata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 51,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1245,
										"name": "ReturndataAllocations"
									}
								},
								{
									"id": 2060,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 53,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1471,
										"name": "StateAllocations"
									}
								},
								{
									"id": 2054,
									"name": "storage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 47,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1462,
										"name": "StorageAllocations"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2056,
										2057,
										2059,
										2055,
										2058,
										2060,
										2054
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 46,
									"character": 17
								}
							]
						},
						{
							"id": 2045,
							"name": "EvmInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2049,
									"name": "allocations",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 40,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 2053,
										"name": "AllocationInfo"
									}
								},
								{
									"id": 2050,
									"name": "contexts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 41,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1868,
										"name": "Contexts"
									}
								},
								{
									"id": 2051,
									"name": "currentContext",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 42,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1871,
										"name": "Context"
									}
								},
								{
									"id": 2052,
									"name": "internalFunctionsTable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 43,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 2061,
										"name": "InternalFunctions"
									}
								},
								{
									"id": 2047,
									"name": "mappingKeys",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 38,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1530,
											"name": "Slot"
										}
									}
								},
								{
									"id": 2046,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 37,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 2029,
										"name": "EvmState"
									}
								},
								{
									"id": 2048,
									"name": "userDefinedTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 39,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 284,
										"name": "TypesById"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2049,
										2050,
										2051,
										2052,
										2047,
										2046,
										2048
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 36,
									"character": 17
								}
							]
						},
						{
							"id": 2029,
							"name": "EvmState",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2033,
									"name": "calldata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 22,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "Uint8Array",
										"package": "typescript",
										"name": "Uint8Array"
									}
								},
								{
									"id": 2034,
									"name": "code",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 23,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "Uint8Array",
										"package": "typescript",
										"name": "Uint8Array"
									}
								},
								{
									"id": 2039,
									"name": "eventdata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 27,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "Uint8Array",
										"package": "typescript",
										"name": "Uint8Array"
									}
								},
								{
									"id": 2040,
									"name": "eventtopics",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 28,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "Uint8Array",
											"package": "typescript",
											"name": "Uint8Array"
										}
									}
								},
								{
									"id": 2032,
									"name": "memory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 21,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "Uint8Array",
										"package": "typescript",
										"name": "Uint8Array"
									}
								},
								{
									"id": 2041,
									"name": "returndata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 29,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "Uint8Array",
										"package": "typescript",
										"name": "Uint8Array"
									}
								},
								{
									"id": 2035,
									"name": "specials",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 24,
											"character": 2
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2036,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 2037,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 2038,
														"name": "builtin",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "reference",
													"qualifiedName": "Uint8Array",
													"package": "typescript",
													"name": "Uint8Array"
												}
											}
										}
									}
								},
								{
									"id": 2031,
									"name": "stack",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 20,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "Uint8Array",
											"package": "typescript",
											"name": "Uint8Array"
										}
									}
								},
								{
									"id": 2030,
									"name": "storage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 19,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 2042,
										"name": "WordMapping"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2033,
										2034,
										2039,
										2040,
										2032,
										2041,
										2035,
										2031,
										2030
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 18,
									"character": 17
								}
							]
						},
						{
							"id": 2064,
							"name": "InternalFunction",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2066,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 62,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2075,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 71,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2076,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 72,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 2315,
										"name": "ContractKind"
									}
								},
								{
									"id": 2074,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 70,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2073,
									"name": "contractNode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 69,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1674,
										"name": "AstNode"
									}
								},
								{
									"id": 2077,
									"name": "contractPayable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 73,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2072,
									"name": "contractPointer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 68,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2070,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 66,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2078,
									"name": "isDesignatedInvalid",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 74,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2071,
									"name": "mutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 67,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 2314,
										"name": "Mutability"
									}
								},
								{
									"id": 2069,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 65,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2068,
									"name": "node",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 64,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1674,
										"name": "AstNode"
									}
								},
								{
									"id": 2067,
									"name": "pointer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 63,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2065,
									"name": "sourceIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 61,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2066,
										2075,
										2076,
										2074,
										2073,
										2077,
										2072,
										2070,
										2078,
										2071,
										2069,
										2068,
										2067,
										2065
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 60,
									"character": 17
								}
							]
						},
						{
							"id": 2061,
							"name": "InternalFunctions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 56,
									"character": 17
								}
							],
							"indexSignature": {
								"id": 2062,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 2063,
										"name": "pc",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								],
								"type": {
									"type": "reference",
									"id": 2064,
									"name": "InternalFunction"
								}
							}
						},
						{
							"id": 2042,
							"name": "WordMapping",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 32,
									"character": 17
								}
							],
							"indexSignature": {
								"id": 2043,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 2044,
										"name": "slotAddress",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reference",
									"qualifiedName": "Uint8Array",
									"package": "typescript",
									"name": "Uint8Array"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								2022,
								2005
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2053,
								2045,
								2029,
								2064,
								2061,
								2042
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/evm/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 2079,
					"name": "Export",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 2103,
							"name": "ResultInspector",
							"kind": 16777216,
							"kindString": "Reference",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 26,
									"character": 2
								}
							],
							"target": 822
						},
						{
							"id": 2104,
							"name": "ResultInspectorOptions",
							"kind": 16777216,
							"kindString": "Reference",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 27,
									"character": 2
								}
							],
							"target": 820
						},
						{
							"id": 2107,
							"name": "nativizeAccessList",
							"kind": 16777216,
							"kindString": "Reference",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 30,
									"character": 2
								}
							],
							"target": 807
						},
						{
							"id": 2108,
							"name": "stringValueInfoToStringLossy",
							"kind": 16777216,
							"kindString": "Reference",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 31,
									"character": 2
								}
							],
							"target": 810
						},
						{
							"id": 2105,
							"name": "unsafeNativize",
							"kind": 16777216,
							"kindString": "Reference",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 28,
									"character": 2
								}
							],
							"target": 804
						},
						{
							"id": 2106,
							"name": "unsafeNativizeVariables",
							"kind": 16777216,
							"kindString": "Reference",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 29,
									"character": 2
								}
							],
							"target": 795
						},
						{
							"id": 2112,
							"name": "CalldataDecodingInspector",
							"kind": 128,
							"kindString": "Class",
							"flags": {},
							"comment": {
								"shortText": "Similar to [[ResultInspector]], but for a [[CalldataDecoding]].\nSee [[ResultInspector]] for more information."
							},
							"children": [
								{
									"id": 2113,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 296,
											"character": 2
										}
									],
									"signatures": [
										{
											"id": 2114,
											"name": "new CalldataDecodingInspector",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 2115,
													"name": "decoding",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 886,
														"name": "CalldataDecoding"
													}
												},
												{
													"id": 2116,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 820,
														"name": "ResultInspectorOptions"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 2112,
												"name": "CalldataDecodingInspector"
											}
										}
									]
								},
								{
									"id": 2117,
									"name": "decoding",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 293,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 886,
										"name": "CalldataDecoding"
									}
								},
								{
									"id": 2118,
									"name": "options",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 294,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 820,
										"name": "ResultInspectorOptions"
									}
								},
								{
									"id": 2123,
									"name": "[custom]",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 307,
											"character": 2
										}
									],
									"signatures": [
										{
											"id": 2124,
											"name": "[custom]",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2125,
													"name": "depth",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2126,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 813,
														"name": "InspectOptions"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 2119,
									"name": "inspect",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 304,
											"character": 2
										}
									],
									"signatures": [
										{
											"id": 2120,
											"name": "inspect",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"tags": [
													{
														"tag": "dev",
														"text": "non-standard alternative interface name used by browser-util-inspect\n     package\n"
													}
												]
											},
											"parameters": [
												{
													"id": 2121,
													"name": "depth",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2122,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 813,
														"name": "InspectOptions"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										2113
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2117,
										2118
									]
								},
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										2123,
										2119
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 292,
									"character": 13
								}
							]
						},
						{
							"id": 2127,
							"name": "LogDecodingInspector",
							"kind": 128,
							"kindString": "Class",
							"flags": {},
							"comment": {
								"shortText": "Similar to [[ResultInspector]], but for a [[LogDecoding]].\nSee [[ResultInspector]] for more information."
							},
							"children": [
								{
									"id": 2128,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 439,
											"character": 2
										}
									],
									"signatures": [
										{
											"id": 2129,
											"name": "new LogDecodingInspector",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 2130,
													"name": "decoding",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 887,
														"name": "LogDecoding"
													}
												},
												{
													"id": 2131,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 820,
														"name": "ResultInspectorOptions"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 2127,
												"name": "LogDecodingInspector"
											}
										}
									]
								},
								{
									"id": 2132,
									"name": "decoding",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 437,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 887,
										"name": "LogDecoding"
									}
								},
								{
									"id": 2133,
									"name": "options",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 438,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 820,
										"name": "ResultInspectorOptions"
									}
								},
								{
									"id": 2138,
									"name": "[custom]",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 450,
											"character": 2
										}
									],
									"signatures": [
										{
											"id": 2139,
											"name": "[custom]",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2140,
													"name": "depth",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2141,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 813,
														"name": "InspectOptions"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 2134,
									"name": "inspect",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 447,
											"character": 2
										}
									],
									"signatures": [
										{
											"id": 2135,
											"name": "inspect",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"tags": [
													{
														"tag": "dev",
														"text": "non-standard alternative interface name used by browser-util-inspect\n     package\n"
													}
												]
											},
											"parameters": [
												{
													"id": 2136,
													"name": "depth",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2137,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 813,
														"name": "InspectOptions"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										2128
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2132,
										2133
									]
								},
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										2138,
										2134
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 436,
									"character": 13
								}
							]
						},
						{
							"id": 2142,
							"name": "ReturndataDecodingInspector",
							"kind": 128,
							"kindString": "Class",
							"flags": {},
							"comment": {
								"shortText": "Similar to [[ResultInspector]], but for a [[ReturndataDecoding]].\nSee [[ResultInspector]] for more information."
							},
							"children": [
								{
									"id": 2143,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 476,
											"character": 2
										}
									],
									"signatures": [
										{
											"id": 2144,
											"name": "new ReturndataDecodingInspector",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 2145,
													"name": "decoding",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 888,
														"name": "ReturndataDecoding"
													}
												},
												{
													"id": 2146,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 820,
														"name": "ResultInspectorOptions"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 2142,
												"name": "ReturndataDecodingInspector"
											}
										}
									]
								},
								{
									"id": 2147,
									"name": "decoding",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 474,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 888,
										"name": "ReturndataDecoding"
									}
								},
								{
									"id": 2148,
									"name": "options",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 475,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 820,
										"name": "ResultInspectorOptions"
									}
								},
								{
									"id": 2153,
									"name": "[custom]",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 487,
											"character": 2
										}
									],
									"signatures": [
										{
											"id": 2154,
											"name": "[custom]",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2155,
													"name": "depth",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2156,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 813,
														"name": "InspectOptions"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 2149,
									"name": "inspect",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 484,
											"character": 2
										}
									],
									"signatures": [
										{
											"id": 2150,
											"name": "inspect",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"tags": [
													{
														"tag": "dev",
														"text": "non-standard alternative interface name used by browser-util-inspect\n     package\n"
													}
												]
											},
											"parameters": [
												{
													"id": 2151,
													"name": "depth",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2152,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 813,
														"name": "InspectOptions"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										2143
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2147,
										2148
									]
								},
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										2153,
										2149
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 473,
									"character": 13
								}
							]
						},
						{
							"id": 2109,
							"name": "NativizeOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Options for the nativize function."
							},
							"children": [
								{
									"id": 2111,
									"name": "format",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The format for the nativized result.  Currently the only supported\nformat is \"ethers\", which nativizes things in a way compatible with how\nEthers decodes values.  This format is quite limited, but more may be\nadded in the future.  There is also the separate function\n[[Format.Utils.Inspect.unsafeNativize|unsafeNativize]], although that is,\nas noted, unsafe."
									},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 62,
											"character": 2
										}
									],
									"type": {
										"type": "literal",
										"value": "ethers"
									}
								},
								{
									"id": 2110,
									"name": "numberFormatter",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This is a function that is used to describe how to format\ninteger values.  It should take as input the number as a BigInt.\nBy default, it's the identity function (i.e., it formats the numbers\nas BigInts), but by setting it you could instead format numbers as\na BN, BigNumber, string, etc."
									},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 53,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"name": "NumberFormatter"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2111,
										2110
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 45,
									"character": 17
								}
							]
						},
						{
							"id": 2092,
							"name": "containsDeliberateReadError",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 398,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2093,
									"name": "containsDeliberateReadError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2094,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 294,
												"name": "Result"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							]
						},
						{
							"id": 2080,
							"name": "nativize",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 94,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2081,
									"name": "nativize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function is similar to\n[[Format.Utils.Inspect.unsafeNativize|unsafeNativize]], but is intended to\nbe safe, and also allows for different output formats.  The only currently\nsupported format is \"ethers\", which is intended to match the way that\nTruffle Contract currently returns values (based on the Ethers decoder).  As\nsuch, it only handles ABI types, and in addition does not handle the types\nfixed, ufixed, or function.  Note that in these cases it returns `undefined`\nrather than throwing, as we want this function to be used in contexts where\nit had better not throw.  It also does not handle circularities, for similar\nreasons.",
										"text": "To handle numeric types, this function takes an optional numberFormatter\noption that tells it how to handle numbers; this function should take a\nBigInt as input.  By default, this function will be the identity, and so\nnumbers will be represented as BigInts.\n\nNote that this function begins by calling abify, so out-of-range enums (that\naren't so out-of-range as to be padding errors) will not return `undefined`.\nOut-of-range booleans similarly will return true rather than `undefined`.\nHowever, other range errors may return `undefined`; this may technically be a\nslight incompatibility with existing behavior, but should not be relevant\nexcept in quite unusual cases.\n\nIn order to match the behavior for tuples, tuples will be transformed into\narrays, but named entries will additionally be keyed by name.  Moreover,\nindexed variables of reference type will be nativized to an undecoded hex\nstring.\n"
									},
									"parameters": [
										{
											"id": 2082,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 294,
												"name": "Result"
											}
										},
										{
											"id": 2083,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2109,
												"name": "NativizeOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 2088,
							"name": "nativizeEventArgs",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 254,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2089,
									"name": "nativizeEventArgs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function is similar to [[compatibleNativize]], but takes\na [[LogDecoding]], and puts the results in an object.  Note\nthat this does not return the entire event info, but just the\n`args` for the event."
									},
									"parameters": [
										{
											"id": 2090,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 887,
												"name": "LogDecoding"
											}
										},
										{
											"id": 2091,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2109,
												"name": "NativizeOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 2084,
							"name": "nativizeReturn",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 211,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2085,
									"name": "nativizeReturn",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function is similar to [[nativize]], but takes\na [[ReturndataDecoding]].  If there's only one returned value, it\nwill be run through compatibleNativize but otherwise unaltered;\notherwise the results will be put in an object.",
										"text": "Note that if the ReturndataDecoding is not a [[ReturnDecoding]],\nthis will just return `undefined`.\n"
									},
									"parameters": [
										{
											"id": 2086,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 888,
												"name": "ReturndataDecoding"
											}
										},
										{
											"id": 2087,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2109,
												"name": "NativizeOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "References",
							"kind": 16777216,
							"children": [
								2103,
								2104,
								2107,
								2108,
								2105,
								2106
							]
						},
						{
							"title": "Classes",
							"kind": 128,
							"children": [
								2112,
								2127,
								2142
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2109
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								2092,
								2080,
								2088,
								2084
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/export.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 79,
					"name": "Format",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "# Codec Output Format",
						"text": "## Module information\n\nThis module primarily defines TypeScript types for the output format\nused in results provided by packages\n`@truffle/decoder@>=4.0.0` and `@truffle/codec@>=0.1.0`.\n\nSee below for complete listing or continue reading\n[Format information](#format-information) to learn about this format.\n\n### How to import\n\nImport either as part of Codec or by itself:\n\n```typescript\n// when importing entire Codec, use Codec.Format.*:\nimport * as Codec from \"@truffle/codec\";\n\n// or import Format directly:\nimport { Format } from \"@truffle/codec\";\n```\n\n![Example struct decoding](media://example-struct-decoding.png)\n\n## Format information\n\nThis format is intended for use in smart contract and dapp development\ntools and libraries, and for use in display contexts, such as when\nbuilding on-screen components to show transaction and smart contract\nstate information.\n\nThis format seeks to provide an exhaustive schema for JavaScript\nobjects to encode **lossless**, **machine-readable** representations of\nall possible Solidity and ABI data types and all possible values of those\ntypes.\n\nThis format targets types and values understood by the\n[Solidity programming language](https://docs.soliditylang.org/) and\nthe [Contract ABI specification](https://docs.soliditylang.org/en/v0.8.19/abi-spec.html),\nwithin the context of the [Ethereum Virtual Machine](https://ethereum.github.io/yellowpaper/paper.pdf)\n(EVM) and in raw data for transactions and logs according to the\n[Ethereum JSON RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC).\n\nObjects in this format may be deeply nested and/or contain circular\ndependencies. As such, **do not** serialize objects in this format or\notherwise attempt to display them in full without considering potential\nrisk. **Objects in this format are for the machine to read, not humans!**\nThis module provides utilities for inspecting objects in this format,\nincluding the **safe** [[Format.Utils.Inspect.ResultInspector]] wrapper\n(for [util.inspect](https://nodejs.org/api/util.html#util_util_inspect_object_options)),\nand the **unsafe** [[Format.Utils.Inspect.unsafeNativize]] function. For more\ninformation, please see the documentation for those utilities.\n\n### Specification\n\nIndividual decoded values are represented by objects of the type\n[[Format.Values.Result]], which contain the following fields:\n  1. `type`: This is a [[Format.Types.Type|`Type`]] object describing the value's\n    type.  Each `Type` has a `typeClass` field describing the overall broad type,\n    such as `\"uint\"` or `\"bytes\"`, together with additional information that gives\n    the specific type.  For full detail, see [[Format.Types]].\n\n  2. `kind`: This is either `\"value\"`, in which case the `Result` is a\n    [[Format.Values.Value|`Value`]], or `\"error\"`, in which case the `Result` is an\n    [[Format.Errors.ErrorResult|`ErrorResult`]].  In the former case, there will be\n    a `value` field containin the decoded value.  In the latter case, there will be\n    an `error` field indicating what went wrong.  *Warning*: When decoding a\n    complex type, such as an array, mapping, or array, getting a kind of `\"value\"`\n    does not necessarily mean the individual elements were decoded successfully.\n    Even if the `Result` for the array (mapping, struct) as a whole has kind\n    `\"value\"`, the elements might still have kind `\"error\"`.\n\n  3. `value`: As mentioned, this is included when `kind` is equal to `\"value\"`.\n    It contains information about the actual decoded value.  See\n    [[Format.Values|`Format.Values`]] for more information.\n\n  4. `error`: The alternative to `value`.  Generally includes information about\n    the raw data that led to the error.  See [[Format.Errors|`Format.Errors`]] for\n    more information.\n\n  5. `interpretations`: This field will also be present when `kind` is equal\n    to `\"value\"`; it is an object that may contain additional information\n    about the decoded value beyond what is found in `value`.  (All fields in\n    `interpretations` are always optional and will be included only when\n    applicable.)  You may wonder, what is the difference between `value`\n    and `interpretations`?  The answer is that the distinction is largely\n    historical; `interpretations` was not originally part of the format, and\n    it was added so that there would be a place to put new additional\n    information we wanted to include without having to expand `value`.  See\n    [[Format.Values|`Format.Values`]] for more information.\n\n  6. `reference`: This field is a debugger-only feature and does not\n     apply to results returned by  @truffle/decoder, so it won't be documented here.\n\n### Values vs. errors\n\nIt's worth taking a moment here to answer the question: What counts as a value,\nand what counts as an error?\n\nIn general, the answer is that anything that can be generated via Solidity\nalone (i.e. no assembly), with correctly-encoded inputs, and without making use\nof compiler bugs, is a value, not an error.  That means that, for instance, the\nfollowing things are values, not errors:\n  - A variable of contract type whose address does not actually hold a\n    contract of that type;\n  - An external function pointer that does not correspond to a valid\n    function;\n  - A string containing invalid UTF-8;\n  - ..., etc.\n\nBy contrast, the following *are* errors:\n  - A `bool` which is neither `false` (0) nor `true` (1);\n  - An `enum` which is out of range;\n  - ..., etc.\n\n(You may be wondering about the enum case here, because if you go sufficiently\nfar back, to Solidity 0.4.4 or earlier, it *was* possible to generate\nout-of-range enums without resorting to assembly or compiler bugs.  However,\nenums are only supported in full mode (see\n[Notes on decoding modes](../#decoding-modes)),\nwhich only supports 0.4.12 and later, so\nwe consider out-of-range enums an error.  There are also additional technical\nreasons why supporting out-of-range enums as a value would be difficult.)\n\nThere are three special cases here that are likely worthy of note.\n\nFirstly, internal function pointers currently can't be meaningfully\ndecoded via @truffle/decoder.  However, they decode to a bare-bones value,\nnot an error, as it is (in a sense) our own fault that we can't decode\nthese, so it doesn't make sense to report an error, which would mean that\nsomething is wrong with the encoded data itself.  This value that it\ndecodes to will give the program counter values it corresponds to, but\nwill not include the function name or defining class, as @truffle/decoder\nis not presently capable of that.  For now, full decoding of internal\nfunction pointers remains a debugger-only feature.  (But limited support for\nthis via @truffle/decoder is planned for the future.)\n\n(When using the debugger, an invalid internal function pointer will decode to an\nerror.  However, when using @truffle/decoder, we have no way of discerning whether\nthe pointer is valid or not, so internal function pointers will always decode to\na value, if an uninformative one.)\n\nSecondly, when decoding events, it is impossible to decode indexed parameters\nof reference type.  Thus, these decode to an error\n(`IndexedReferenceTypeError`, which see) rather than to a value.\n\nThirdly, the decoder is currently limited when it comes to decoding state\nvariables that are declared constant, and not all such variables are yet\nsupported in decoding; attempting to decode one of these that is not currently\nsupported will yield an error.\n\nSimilarly, there are various things that decode to errors for technical reasons.\nObjects with encoded length fields larger than what fits in a JavaScript safe\ninteger, or pointed to by pointers with values larger than what fits in a\nJavaScript safe integer, will decode to errors, even if they may technically be\nlegal.  Such cases are impractical to handle and should never come up in real\nuse so we decode them to errors.  Errors may also be returned in case of an\nerror in attempting to read the data to be decoded.\n\nFinally, except when decoding events, we do not return an error if the pointers\nin an ABI-encoded array or tuple are arranged in a nonstandard way, or if\nstrings or bytestrings are incorrectly padded, because it is not worth the\ntrouble to detect these conditions.\n\n\n## Notes on this documentation\n\nMost of this doesn't have explanatory documentation\nbecause it's largely self-explanatory, but particularly\nnon-obvious parts have been documented for clarity.\n\nA note on optional fields: A number of types or values\nhave optional fields.  These contain helpful\nbut non-essential information, or information which\nfor technical reasons we can't guarantee we can determine.\n"
					},
					"children": [
						{
							"id": 550,
							"name": "Errors",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Contains the types for error and `ErrorResult` objects."
							},
							"children": [
								{
									"id": 601,
									"name": "AddressErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an address"
									},
									"children": [
										{
											"id": 604,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 297,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 606,
														"name": "AddressPaddingError"
													}
												]
											}
										},
										{
											"id": 603,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 296,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 602,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 295,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 127,
												"name": "AddressType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												604,
												603,
												602
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 294,
											"character": 17
										}
									]
								},
								{
									"id": 606,
									"name": "AddressPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for an address (note padding is not always checked)"
									},
									"children": [
										{
											"id": 608,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 317,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "AddressPaddingError"
											}
										},
										{
											"id": 609,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 318,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2317,
												"name": "PaddingType"
											}
										},
										{
											"id": 607,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string; no checksum"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 316,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												608,
												609,
												607
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 312,
											"character": 17
										}
									]
								},
								{
									"id": 668,
									"name": "ArrayErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an array"
									},
									"children": [
										{
											"id": 671,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 537,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 742,
														"name": "DynamicDataImplementationError"
													}
												]
											}
										},
										{
											"id": 670,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 536,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 669,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 535,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 150,
												"name": "ArrayType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												671,
												670,
												669
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 534,
											"character": 17
										}
									]
								},
								{
									"id": 575,
									"name": "BoolErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a boolean"
									},
									"children": [
										{
											"id": 578,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 205,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 579,
														"name": "BoolError"
													}
												]
											}
										},
										{
											"id": 577,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 204,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 576,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 203,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 113,
												"name": "BoolType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												578,
												577,
												576
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 202,
											"character": 17
										}
									]
								},
								{
									"id": 580,
									"name": "BoolOutOfRangeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "The bool is neither 0 nor 1"
									},
									"children": [
										{
											"id": 582,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 222,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "BoolOutOfRangeError"
											}
										},
										{
											"id": 581,
											"name": "rawAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 221,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "BN",
												"package": "@types/bn.js",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												582,
												581
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 220,
											"character": 17
										}
									]
								},
								{
									"id": 583,
									"name": "BoolPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for a boolean"
									},
									"children": [
										{
											"id": 585,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 235,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "BoolPaddingError"
											}
										},
										{
											"id": 586,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 236,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2317,
												"name": "PaddingType"
											}
										},
										{
											"id": 584,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 234,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												585,
												586,
												584
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 230,
											"character": 17
										}
									]
								},
								{
									"id": 596,
									"name": "BytesDynamicErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a dynamic-length bytestring"
									},
									"children": [
										{
											"id": 599,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 279,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 742,
														"name": "DynamicDataImplementationError"
													}
												]
											}
										},
										{
											"id": 598,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 278,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 597,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 277,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 122,
												"name": "BytesTypeDynamic"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												599,
												598,
												597
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 276,
											"character": 17
										}
									]
								},
								{
									"id": 592,
									"name": "BytesPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for a static-length bytestring (note padding is not always checked)"
									},
									"children": [
										{
											"id": 594,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 267,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "BytesPaddingError"
											}
										},
										{
											"id": 595,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 268,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2317,
												"name": "PaddingType"
											}
										},
										{
											"id": 593,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 266,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												594,
												595,
												593
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 262,
											"character": 17
										}
									]
								},
								{
									"id": 587,
									"name": "BytesStaticErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a static-length bytestring"
									},
									"children": [
										{
											"id": 590,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 247,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 592,
														"name": "BytesPaddingError"
													}
												]
											}
										},
										{
											"id": 589,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 246,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 588,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 245,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 117,
												"name": "BytesTypeStatic"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												590,
												589,
												588
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 244,
											"character": 17
										}
									]
								},
								{
									"id": 772,
									"name": "CodeNotSuppliedError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A read error in code, but one triggered deliberately to indicate that\nbytecode is unknown, rather than due to an unexpected error condition.  This\nerror is triggered by passing null in response to a storage request."
									},
									"children": [
										{
											"id": 774,
											"name": "address",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 947,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 773,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 946,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "CodeNotSuppliedError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												774,
												773
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 945,
											"character": 17
										}
									]
								},
								{
									"id": 659,
									"name": "ContractErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a contract"
									},
									"children": [
										{
											"id": 662,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 501,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 664,
														"name": "ContractPaddingError"
													}
												]
											}
										},
										{
											"id": 661,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 500,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 660,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 499,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 236,
												"name": "ContractType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												662,
												661,
												660
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 498,
											"character": 17
										}
									]
								},
								{
									"id": 664,
									"name": "ContractPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for contract (note padding is not always checked)"
									},
									"children": [
										{
											"id": 666,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 521,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "ContractPaddingError"
											}
										},
										{
											"id": 667,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 522,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2317,
												"name": "PaddingType"
											}
										},
										{
											"id": 665,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 520,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												666,
												667,
												665
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 516,
											"character": 17
										}
									]
								},
								{
									"id": 725,
									"name": "DeployedFunctionInConstructorError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Indicates that this is a deployed-style pointer,\ndespite the fact that you're in a constructor"
									},
									"children": [
										{
											"id": 729,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 757,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 727,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 755,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 236,
												"name": "ContractType"
											}
										},
										{
											"id": 728,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 756,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 726,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 754,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "DeployedFunctionInConstructorError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												729,
												727,
												728,
												726
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 753,
											"character": 17
										}
									]
								},
								{
									"id": 633,
									"name": "EnumErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an enum"
									},
									"children": [
										{
											"id": 636,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 414,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 637,
														"name": "EnumError"
													}
												]
											}
										},
										{
											"id": 635,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 413,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 634,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 412,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 221,
												"name": "EnumType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												636,
												635,
												634
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 411,
											"character": 17
										}
									]
								},
								{
									"id": 647,
									"name": "EnumNotFoundDecodingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "The enum type definition could not be located"
									},
									"children": [
										{
											"id": 648,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 459,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "EnumNotFoundDecodingError"
											}
										},
										{
											"id": 650,
											"name": "rawAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 461,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "BN",
												"package": "@types/bn.js",
												"name": "BN"
											}
										},
										{
											"id": 649,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 460,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 221,
												"name": "EnumType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												648,
												650,
												649
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 458,
											"character": 17
										}
									]
								},
								{
									"id": 638,
									"name": "EnumOutOfRangeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "The enum is out of range"
									},
									"children": [
										{
											"id": 639,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 433,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "EnumOutOfRangeError"
											}
										},
										{
											"id": 641,
											"name": "rawAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 435,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "BN",
												"package": "@types/bn.js",
												"name": "BN"
											}
										},
										{
											"id": 640,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 434,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 221,
												"name": "EnumType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												639,
												641,
												640
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 432,
											"character": 17
										}
									]
								},
								{
									"id": 642,
									"name": "EnumPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for an enum"
									},
									"children": [
										{
											"id": 645,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 449,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "EnumPaddingError"
											}
										},
										{
											"id": 646,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 450,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2317,
												"name": "PaddingType"
											}
										},
										{
											"id": 643,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 447,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 644,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 448,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 221,
												"name": "EnumType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												645,
												646,
												643,
												644
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 443,
											"character": 17
										}
									]
								},
								{
									"id": 615,
									"name": "FixedErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a signed fixed-point number"
									},
									"children": [
										{
											"id": 618,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 347,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 624,
														"name": "FixedPaddingError"
													}
												]
											}
										},
										{
											"id": 617,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 346,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 616,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 345,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 140,
												"name": "FixedType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												618,
												617,
												616
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 344,
											"character": 17
										}
									]
								},
								{
									"id": 624,
									"name": "FixedPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for a signed fixed-point number (note padding is not always checked)"
									},
									"children": [
										{
											"id": 626,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 377,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "FixedPaddingError"
											}
										},
										{
											"id": 627,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 378,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2317,
												"name": "PaddingType"
											}
										},
										{
											"id": 625,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 376,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												626,
												627,
												625
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 372,
											"character": 17
										}
									]
								},
								{
									"id": 698,
									"name": "FunctionExternalErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an external function"
									},
									"children": [
										{
											"id": 701,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 650,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 702,
														"name": "FunctionExternalError"
													}
												]
											}
										},
										{
											"id": 700,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 649,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 699,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 648,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 179,
												"name": "FunctionExternalType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												701,
												700,
												699
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 647,
											"character": 17
										}
									]
								},
								{
									"id": 703,
									"name": "FunctionExternalNonStackPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This error kind represents a padding error for an external function pointer located anywhere other than the stack."
									},
									"children": [
										{
											"id": 705,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 672,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "FunctionExternalNonStackPaddingError"
											}
										},
										{
											"id": 706,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 673,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2317,
												"name": "PaddingType"
											}
										},
										{
											"id": 704,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 671,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												705,
												706,
												704
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 667,
											"character": 17
										}
									]
								},
								{
									"id": 707,
									"name": "FunctionExternalStackPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This error kind represents a padding error for external function pointer located on the stack."
									},
									"children": [
										{
											"id": 710,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 690,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "FunctionExternalStackPaddingError"
											}
										},
										{
											"id": 708,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string (no checksum; also a full word long)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 685,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 709,
											"name": "rawSelector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string (but a full word long)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 689,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												710,
												708,
												709
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 681,
											"character": 17
										}
									]
								},
								{
									"id": 711,
									"name": "FunctionInternalErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an internal function"
									},
									"children": [
										{
											"id": 714,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 705,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 715,
														"name": "FunctionInternalError"
													}
												]
											}
										},
										{
											"id": 713,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 704,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 712,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 703,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 173,
												"name": "FunctionInternalType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												714,
												713,
												712
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 702,
											"character": 17
										}
									]
								},
								{
									"id": 716,
									"name": "FunctionInternalPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for an internal function"
									},
									"children": [
										{
											"id": 718,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 729,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "FunctionInternalPaddingError"
											}
										},
										{
											"id": 719,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 730,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2317,
												"name": "PaddingType"
											}
										},
										{
											"id": 717,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 728,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												718,
												719,
												717
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 724,
											"character": 17
										}
									]
								},
								{
									"id": 744,
									"name": "IndexedReferenceTypeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Used when decoding an indexed parameter of reference (or tuple) type.  These\ncan't meaningfully be decoded, so instead they decode to an error, sorry."
									},
									"children": [
										{
											"id": 745,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 845,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "IndexedReferenceTypeError"
											}
										},
										{
											"id": 747,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 850,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 746,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 846,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 217,
														"name": "TupleType"
													},
													{
														"type": "reference",
														"id": 283,
														"name": "ReferenceType"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												745,
												747,
												746
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 844,
											"character": 17
										}
									]
								},
								{
									"id": 566,
									"name": "IntErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a signed integer"
									},
									"children": [
										{
											"id": 569,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 173,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 571,
														"name": "IntPaddingError"
													}
												]
											}
										},
										{
											"id": 568,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 172,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 567,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 171,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 109,
												"name": "IntType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												569,
												568,
												567
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 170,
											"character": 17
										}
									]
								},
								{
									"id": 571,
									"name": "IntPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for a signed integer (note padding is not always checked)"
									},
									"children": [
										{
											"id": 573,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 193,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "IntPaddingError"
											}
										},
										{
											"id": 574,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 194,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2317,
												"name": "PaddingType"
											}
										},
										{
											"id": 572,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 192,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												573,
												574,
												572
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 188,
											"character": 17
										}
									]
								},
								{
									"id": 787,
									"name": "InternalFunctionInABIError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This should never come up, but just to be sure..."
									},
									"children": [
										{
											"id": 788,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 1001,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "InternalFunctionInABIError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												788
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 1000,
											"character": 17
										}
									]
								},
								{
									"id": 688,
									"name": "MagicErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a magic variable"
									},
									"children": [
										{
											"id": 691,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 609,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 740,
												"name": "GenericError"
											}
										},
										{
											"id": 690,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 608,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 689,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 607,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 266,
												"name": "MagicType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												691,
												690,
												689
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 606,
											"character": 17
										}
									]
								},
								{
									"id": 730,
									"name": "MalformedInternalFunctionError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Used when the deployed PC is zero but the constructor PC\nis nonzero"
									},
									"children": [
										{
											"id": 734,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 770,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 732,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 768,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 236,
												"name": "ContractType"
											}
										},
										{
											"id": 733,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 769,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 731,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 767,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "MalformedInternalFunctionError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												734,
												732,
												733,
												731
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 766,
											"character": 17
										}
									]
								},
								{
									"id": 673,
									"name": "MappingErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a mapping"
									},
									"children": [
										{
											"id": 676,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 555,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 740,
												"name": "GenericError"
											}
										},
										{
											"id": 675,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 554,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 674,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 553,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 167,
												"name": "MappingType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												676,
												675,
												674
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 552,
											"character": 17
										}
									]
								},
								{
									"id": 720,
									"name": "NoSuchInternalFunctionError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Indicates that the function pointer being decoded\nfails to point to a valid function, and also is not one of the\ndefault values"
									},
									"children": [
										{
											"id": 724,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 744,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 722,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 742,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 236,
												"name": "ContractType"
											}
										},
										{
											"id": 723,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 743,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 721,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 741,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "NoSuchInternalFunctionError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												724,
												722,
												723,
												721
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 740,
											"character": 17
										}
									]
								},
								{
									"id": 735,
									"name": "OptionsErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An options error.  This should never happen,\nas options are never decoded, but it's included for\ncompleteness."
									},
									"children": [
										{
											"id": 738,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 785,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 740,
												"name": "GenericError"
											}
										},
										{
											"id": 737,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 784,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 736,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 783,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 281,
												"name": "OptionsType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												738,
												737,
												736
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 782,
											"character": 17
										}
									]
								},
								{
									"id": 779,
									"name": "OverlargePointersNotImplementedError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Error for dynamic type being represented by pointer bigger than a JS number"
									},
									"children": [
										{
											"id": 780,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 967,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "OverlargePointersNotImplementedError"
											}
										},
										{
											"id": 781,
											"name": "pointerAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 968,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "BN",
												"package": "@types/bn.js",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												780,
												781
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 966,
											"character": 17
										}
									]
								},
								{
									"id": 783,
									"name": "OverlongArrayOrStringStrictModeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Error for the stricter length check in strict mode"
									},
									"children": [
										{
											"id": 786,
											"name": "dataLength",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 992,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 784,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 990,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "OverlongArrayOrStringStrictModeError"
											}
										},
										{
											"id": 785,
											"name": "lengthAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 991,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "BN",
												"package": "@types/bn.js",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												786,
												784,
												785
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 989,
											"character": 17
										}
									]
								},
								{
									"id": 775,
									"name": "OverlongArraysAndStringsNotImplementedError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Error for array/string/bytestring having length bigger than a JS number"
									},
									"children": [
										{
											"id": 778,
											"name": "dataLength",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 958,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 776,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 956,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "OverlongArraysAndStringsNotImplementedError"
											}
										},
										{
											"id": 777,
											"name": "lengthAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 957,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "BN",
												"package": "@types/bn.js",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												778,
												776,
												777
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 955,
											"character": 17
										}
									]
								},
								{
									"id": 759,
									"name": "ReadErrorBytes",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Read error in a byte-based location (memory, calldata, etc)"
									},
									"children": [
										{
											"id": 760,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 900,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "ReadErrorBytes"
											}
										},
										{
											"id": 763,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 903,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 761,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 901,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 758,
												"name": "BytesLocation"
											}
										},
										{
											"id": 762,
											"name": "start",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 902,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												760,
												763,
												761,
												762
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 899,
											"character": 17
										}
									]
								},
								{
									"id": 754,
									"name": "ReadErrorStack",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Read error on the stack"
									},
									"children": [
										{
											"id": 756,
											"name": "from",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 880,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 755,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 879,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "ReadErrorStack"
											}
										},
										{
											"id": 757,
											"name": "to",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 881,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												756,
												755,
												757
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 878,
											"character": 17
										}
									]
								},
								{
									"id": 764,
									"name": "ReadErrorStorage",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Read error in storage"
									},
									"children": [
										{
											"id": 765,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 912,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "ReadErrorStorage"
											}
										},
										{
											"id": 766,
											"name": "range",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 913,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1523,
												"name": "Range"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												765,
												766
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 911,
											"character": 17
										}
									]
								},
								{
									"id": 767,
									"name": "StorageNotSuppliedError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A read error in storage, but one triggered deliberately to indicate\nthat that particular area of storage is unknown, rather than due to\nan unexpected error condition.  This error is triggered by passing\nnull in response to a storage request."
									},
									"children": [
										{
											"id": 768,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 925,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "StorageNotSuppliedError"
											}
										},
										{
											"id": 769,
											"name": "slot",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 926,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "BN",
												"package": "@types/bn.js",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												768,
												769
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 924,
											"character": 17
										}
									]
								},
								{
									"id": 610,
									"name": "StringErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a string"
									},
									"children": [
										{
											"id": 613,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 329,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 742,
														"name": "DynamicDataImplementationError"
													}
												]
											}
										},
										{
											"id": 612,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 328,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 611,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 327,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 136,
												"name": "StringType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												613,
												612,
												611
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 326,
											"character": 17
										}
									]
								},
								{
									"id": 678,
									"name": "StructErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a struct"
									},
									"children": [
										{
											"id": 681,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 573,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 742,
														"name": "DynamicDataImplementationError"
													}
												]
											}
										},
										{
											"id": 680,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 572,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 679,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 571,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 194,
												"name": "StructType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												681,
												680,
												679
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 570,
											"character": 17
										}
									]
								},
								{
									"id": 683,
									"name": "TupleErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a tuple"
									},
									"children": [
										{
											"id": 686,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 591,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 742,
														"name": "DynamicDataImplementationError"
													}
												]
											}
										},
										{
											"id": 685,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 590,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 684,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 589,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 217,
												"name": "TupleType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												686,
												685,
												684
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 588,
											"character": 17
										}
									]
								},
								{
									"id": 693,
									"name": "TypeErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a type"
									},
									"children": [
										{
											"id": 696,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 627,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 740,
												"name": "GenericError"
											}
										},
										{
											"id": 695,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 626,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 694,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 625,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 273,
												"name": "TypeType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												696,
												695,
												694
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 624,
											"character": 17
										}
									]
								},
								{
									"id": 619,
									"name": "UfixedErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an unsigned fixed-point number"
									},
									"children": [
										{
											"id": 622,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 357,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 629,
														"name": "UfixedPaddingError"
													}
												]
											}
										},
										{
											"id": 621,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 356,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 620,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 355,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 145,
												"name": "UfixedType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												622,
												621,
												620
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 354,
											"character": 17
										}
									]
								},
								{
									"id": 629,
									"name": "UfixedPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for an unsigned fixed-point number (note padding is not always checked)"
									},
									"children": [
										{
											"id": 631,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 398,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "UfixedPaddingError"
											}
										},
										{
											"id": 632,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 399,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2317,
												"name": "PaddingType"
											}
										},
										{
											"id": 630,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 397,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												631,
												632,
												630
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 393,
											"character": 17
										}
									]
								},
								{
									"id": 557,
									"name": "UintErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an unsigned integer"
									},
									"children": [
										{
											"id": 560,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 141,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 562,
														"name": "UintPaddingError"
													}
												]
											}
										},
										{
											"id": 559,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 140,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 558,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 139,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 105,
												"name": "UintType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												560,
												559,
												558
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 138,
											"character": 17
										}
									]
								},
								{
									"id": 562,
									"name": "UintPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for an unsigned integer (note padding is not always checked)"
									},
									"children": [
										{
											"id": 564,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 161,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "UintPaddingError"
											}
										},
										{
											"id": 565,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 162,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2317,
												"name": "PaddingType"
											}
										},
										{
											"id": 563,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 160,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												564,
												565,
												563
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 156,
											"character": 17
										}
									]
								},
								{
									"id": 751,
									"name": "UnsupportedConstantError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error for an unsupported type of constant (this counts as a read error)"
									},
									"children": [
										{
											"id": 753,
											"name": "definition",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 870,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1674,
												"name": "AstNode"
											}
										},
										{
											"id": 752,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 869,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "UnsupportedConstantError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												753,
												752
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 868,
											"character": 17
										}
									]
								},
								{
									"id": 770,
									"name": "UnusedImmutableError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Attempting to read an immutable that is never stored anywhere"
									},
									"children": [
										{
											"id": 771,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 935,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "UnusedImmutableError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												771
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 934,
											"character": 17
										}
									]
								},
								{
									"id": 748,
									"name": "UserDefinedTypeNotFoundError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error for when can't find the definition info for a user-defined type"
									},
									"children": [
										{
											"id": 749,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 859,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "UserDefinedTypeNotFoundError"
											}
										},
										{
											"id": 750,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 860,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 193,
												"name": "UserDefinedType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												749,
												750
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 858,
											"character": 17
										}
									]
								},
								{
									"id": 651,
									"name": "UserDefinedValueTypeErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a user-defined value type"
									},
									"children": [
										{
											"id": 654,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 472,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 740,
														"name": "GenericError"
													},
													{
														"type": "reference",
														"id": 656,
														"name": "WrappedError"
													}
												]
											}
										},
										{
											"id": 653,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 471,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 652,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 470,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 250,
												"name": "UserDefinedValueTypeType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												654,
												653,
												652
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 469,
											"character": 17
										}
									]
								},
								{
									"id": 656,
									"name": "WrappedError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result representing something going wrong decoding\nthe underlying type when decoding a UDVT"
									},
									"children": [
										{
											"id": 658,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 490,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 555,
												"name": "BuiltInValueErrorResult"
											}
										},
										{
											"id": 657,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 489,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "WrappedError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												658,
												657
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 488,
											"character": 17
										}
									]
								},
								{
									"id": 552,
									"name": "AbiErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error result for an ABI type"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 48,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 557,
												"name": "UintErrorResult"
											},
											{
												"type": "reference",
												"id": 566,
												"name": "IntErrorResult"
											},
											{
												"type": "reference",
												"id": 575,
												"name": "BoolErrorResult"
											},
											{
												"type": "reference",
												"id": 556,
												"name": "BytesErrorResult"
											},
											{
												"type": "reference",
												"id": 601,
												"name": "AddressErrorResult"
											},
											{
												"type": "reference",
												"id": 615,
												"name": "FixedErrorResult"
											},
											{
												"type": "reference",
												"id": 619,
												"name": "UfixedErrorResult"
											},
											{
												"type": "reference",
												"id": 610,
												"name": "StringErrorResult"
											},
											{
												"type": "reference",
												"id": 668,
												"name": "ArrayErrorResult"
											},
											{
												"type": "reference",
												"id": 698,
												"name": "FunctionExternalErrorResult"
											},
											{
												"type": "reference",
												"id": 683,
												"name": "TupleErrorResult"
											}
										]
									}
								},
								{
									"id": 605,
									"name": "AddressError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A address-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 305,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 606,
										"name": "AddressPaddingError"
									}
								},
								{
									"id": 672,
									"name": "ArrayError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An arrray-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 545,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 742,
										"name": "DynamicDataImplementationError"
									}
								},
								{
									"id": 579,
									"name": "BoolError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A bool-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 213,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 580,
												"name": "BoolOutOfRangeError"
											},
											{
												"type": "reference",
												"id": 583,
												"name": "BoolPaddingError"
											}
										]
									}
								},
								{
									"id": 555,
									"name": "BuiltInValueErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error result for a built-in value type"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 117,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 557,
												"name": "UintErrorResult"
											},
											{
												"type": "reference",
												"id": 566,
												"name": "IntErrorResult"
											},
											{
												"type": "reference",
												"id": 575,
												"name": "BoolErrorResult"
											},
											{
												"type": "reference",
												"id": 587,
												"name": "BytesStaticErrorResult"
											},
											{
												"type": "reference",
												"id": 601,
												"name": "AddressErrorResult"
											},
											{
												"type": "reference",
												"id": 615,
												"name": "FixedErrorResult"
											},
											{
												"type": "reference",
												"id": 619,
												"name": "UfixedErrorResult"
											}
										]
									}
								},
								{
									"id": 600,
									"name": "BytesDynamicError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A dynamic-bytestring-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 287,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 742,
										"name": "DynamicDataImplementationError"
									}
								},
								{
									"id": 556,
									"name": "BytesErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error result for a bytestring"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 131,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 587,
												"name": "BytesStaticErrorResult"
											},
											{
												"type": "reference",
												"id": 596,
												"name": "BytesDynamicErrorResult"
											}
										]
									}
								},
								{
									"id": 758,
									"name": "BytesLocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A byte-based location"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 887,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "memory"
											},
											{
												"type": "literal",
												"value": "calldata"
											},
											{
												"type": "literal",
												"value": "eventdata"
											},
											{
												"type": "literal",
												"value": "returndata"
											},
											{
												"type": "literal",
												"value": "code"
											}
										]
									}
								},
								{
									"id": 591,
									"name": "BytesStaticError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A static-bytestring-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 255,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 592,
										"name": "BytesPaddingError"
									}
								},
								{
									"id": 663,
									"name": "ContractError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A contract-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 509,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 664,
										"name": "ContractPaddingError"
									}
								},
								{
									"id": 553,
									"name": "DecoderError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "One of the underlying errors contained in an [[ErrorResult]]"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 66,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 740,
												"name": "GenericError"
											},
											{
												"type": "reference",
												"id": 561,
												"name": "UintError"
											},
											{
												"type": "reference",
												"id": 570,
												"name": "IntError"
											},
											{
												"type": "reference",
												"id": 579,
												"name": "BoolError"
											},
											{
												"type": "reference",
												"id": 591,
												"name": "BytesStaticError"
											},
											{
												"type": "reference",
												"id": 600,
												"name": "BytesDynamicError"
											},
											{
												"type": "reference",
												"id": 605,
												"name": "AddressError"
											},
											{
												"type": "reference",
												"id": 614,
												"name": "StringError"
											},
											{
												"type": "reference",
												"id": 623,
												"name": "FixedError"
											},
											{
												"type": "reference",
												"id": 628,
												"name": "UfixedError"
											},
											{
												"type": "reference",
												"id": 672,
												"name": "ArrayError"
											},
											{
												"type": "reference",
												"id": 677,
												"name": "MappingError"
											},
											{
												"type": "reference",
												"id": 682,
												"name": "StructError"
											},
											{
												"type": "reference",
												"id": 692,
												"name": "MagicError"
											},
											{
												"type": "reference",
												"id": 697,
												"name": "TypeErrorUnion"
											},
											{
												"type": "reference",
												"id": 687,
												"name": "TupleError"
											},
											{
												"type": "reference",
												"id": 637,
												"name": "EnumError"
											},
											{
												"type": "reference",
												"id": 655,
												"name": "UserDefinedValueTypeError"
											},
											{
												"type": "reference",
												"id": 663,
												"name": "ContractError"
											},
											{
												"type": "reference",
												"id": 702,
												"name": "FunctionExternalError"
											},
											{
												"type": "reference",
												"id": 715,
												"name": "FunctionInternalError"
											},
											{
												"type": "reference",
												"id": 782,
												"name": "InternalUseError"
											}
										]
									}
								},
								{
									"id": 742,
									"name": "DynamicDataImplementationError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error resulting from overlarge length or pointer values"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 826,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 775,
												"name": "OverlongArraysAndStringsNotImplementedError"
											},
											{
												"type": "reference",
												"id": 779,
												"name": "OverlargePointersNotImplementedError"
											}
										]
									}
								},
								{
									"id": 554,
									"name": "ElementaryErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error result for an elementary value"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 99,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 557,
												"name": "UintErrorResult"
											},
											{
												"type": "reference",
												"id": 566,
												"name": "IntErrorResult"
											},
											{
												"type": "reference",
												"id": 575,
												"name": "BoolErrorResult"
											},
											{
												"type": "reference",
												"id": 556,
												"name": "BytesErrorResult"
											},
											{
												"type": "reference",
												"id": 601,
												"name": "AddressErrorResult"
											},
											{
												"type": "reference",
												"id": 610,
												"name": "StringErrorResult"
											},
											{
												"type": "reference",
												"id": 615,
												"name": "FixedErrorResult"
											},
											{
												"type": "reference",
												"id": 619,
												"name": "UfixedErrorResult"
											},
											{
												"type": "reference",
												"id": 633,
												"name": "EnumErrorResult"
											},
											{
												"type": "reference",
												"id": 651,
												"name": "UserDefinedValueTypeErrorResult"
											},
											{
												"type": "reference",
												"id": 659,
												"name": "ContractErrorResult"
											}
										]
									}
								},
								{
									"id": 637,
									"name": "EnumError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An enum-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 422,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 638,
												"name": "EnumOutOfRangeError"
											},
											{
												"type": "reference",
												"id": 642,
												"name": "EnumPaddingError"
											},
											{
												"type": "reference",
												"id": 647,
												"name": "EnumNotFoundDecodingError"
											}
										]
									}
								},
								{
									"id": 743,
									"name": "ErrorForThrowing",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error that may occur in a component other than the main\ncore of the decoder itself and thus may need to get thrown to it"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 836,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 748,
												"name": "UserDefinedTypeNotFoundError"
											},
											{
												"type": "reference",
												"id": 741,
												"name": "ReadError"
											}
										]
									}
								},
								{
									"id": 551,
									"name": "ErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A result which is an error rather than a value"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 31,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 554,
												"name": "ElementaryErrorResult"
											},
											{
												"type": "reference",
												"id": 668,
												"name": "ArrayErrorResult"
											},
											{
												"type": "reference",
												"id": 673,
												"name": "MappingErrorResult"
											},
											{
												"type": "reference",
												"id": 678,
												"name": "StructErrorResult"
											},
											{
												"type": "reference",
												"id": 688,
												"name": "MagicErrorResult"
											},
											{
												"type": "reference",
												"id": 693,
												"name": "TypeErrorResult"
											},
											{
												"type": "reference",
												"id": 683,
												"name": "TupleErrorResult"
											},
											{
												"type": "reference",
												"id": 698,
												"name": "FunctionExternalErrorResult"
											},
											{
												"type": "reference",
												"id": 711,
												"name": "FunctionInternalErrorResult"
											},
											{
												"type": "reference",
												"id": 735,
												"name": "OptionsErrorResult"
											}
										]
									}
								},
								{
									"id": 623,
									"name": "FixedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A fixed-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 365,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 624,
										"name": "FixedPaddingError"
									}
								},
								{
									"id": 702,
									"name": "FunctionExternalError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An external-function specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 658,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 703,
												"name": "FunctionExternalNonStackPaddingError"
											},
											{
												"type": "reference",
												"id": 707,
												"name": "FunctionExternalStackPaddingError"
											}
										]
									}
								},
								{
									"id": 715,
									"name": "FunctionInternalError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An internal-function specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 713,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 716,
												"name": "FunctionInternalPaddingError"
											},
											{
												"type": "reference",
												"id": 720,
												"name": "NoSuchInternalFunctionError"
											},
											{
												"type": "reference",
												"id": 725,
												"name": "DeployedFunctionInConstructorError"
											},
											{
												"type": "reference",
												"id": 730,
												"name": "MalformedInternalFunctionError"
											}
										]
									}
								},
								{
									"id": 740,
									"name": "GenericError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A type-non-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 802,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 748,
												"name": "UserDefinedTypeNotFoundError"
											},
											{
												"type": "reference",
												"id": 744,
												"name": "IndexedReferenceTypeError"
											},
											{
												"type": "reference",
												"id": 741,
												"name": "ReadError"
											}
										]
									}
								},
								{
									"id": 570,
									"name": "IntError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An int-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 181,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 571,
										"name": "IntPaddingError"
									}
								},
								{
									"id": 782,
									"name": "InternalUseError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Internal-use error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 980,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 783,
												"name": "OverlongArrayOrStringStrictModeError"
											},
											{
												"type": "reference",
												"id": 787,
												"name": "InternalFunctionInABIError"
											}
										]
									}
								},
								{
									"id": 692,
									"name": "MagicError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A magic-specific error (there are none)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 617,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 677,
									"name": "MappingError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A mapping-specific error (there are none)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 563,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 739,
									"name": "OptionsError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "The options type has no type-specific errors at the moment"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 791,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 741,
									"name": "ReadError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A read error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 812,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 751,
												"name": "UnsupportedConstantError"
											},
											{
												"type": "reference",
												"id": 754,
												"name": "ReadErrorStack"
											},
											{
												"type": "reference",
												"id": 759,
												"name": "ReadErrorBytes"
											},
											{
												"type": "reference",
												"id": 764,
												"name": "ReadErrorStorage"
											},
											{
												"type": "reference",
												"id": 767,
												"name": "StorageNotSuppliedError"
											},
											{
												"type": "reference",
												"id": 770,
												"name": "UnusedImmutableError"
											},
											{
												"type": "reference",
												"id": 772,
												"name": "CodeNotSuppliedError"
											}
										]
									}
								},
								{
									"id": 614,
									"name": "StringError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A string-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 337,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 742,
										"name": "DynamicDataImplementationError"
									}
								},
								{
									"id": 682,
									"name": "StructError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A struct-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 581,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 742,
										"name": "DynamicDataImplementationError"
									}
								},
								{
									"id": 687,
									"name": "TupleError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A tuple-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 599,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 742,
										"name": "DynamicDataImplementationError"
									}
								},
								{
									"id": 697,
									"name": "TypeErrorUnion",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error specific to type values (there are none);\nthis isn't called TypeError because that's not legal"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 636,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 628,
									"name": "UfixedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A ufixed-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 386,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 629,
										"name": "UfixedPaddingError"
									}
								},
								{
									"id": 561,
									"name": "UintError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A uint-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 149,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 562,
										"name": "UintPaddingError"
									}
								},
								{
									"id": 655,
									"name": "UserDefinedValueTypeError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A UDVT-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 480,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 656,
										"name": "WrappedError"
									}
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										601,
										606,
										668,
										575,
										580,
										583,
										596,
										592,
										587,
										772,
										659,
										664,
										725,
										633,
										647,
										638,
										642,
										615,
										624,
										698,
										703,
										707,
										711,
										716,
										744,
										566,
										571,
										787,
										688,
										730,
										673,
										720,
										735,
										779,
										783,
										775,
										759,
										754,
										764,
										767,
										610,
										678,
										683,
										693,
										619,
										629,
										557,
										562,
										751,
										770,
										748,
										651,
										656
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												601,
												606,
												575,
												580,
												583,
												596,
												592,
												587,
												642,
												615,
												624,
												566,
												571,
												610,
												619,
												629,
												557,
												562
											]
										},
										{
											"title": "Container types",
											"children": [
												668,
												673,
												678,
												683
											]
										},
										{
											"title": "Function types",
											"children": [
												725,
												698,
												703,
												707,
												711,
												716,
												730,
												720
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												688,
												693
											]
										},
										{
											"title": "Generic errors",
											"children": [
												772,
												744,
												779,
												775,
												759,
												754,
												764,
												767,
												751,
												770,
												748
											]
										},
										{
											"title": "Internal-use errors",
											"children": [
												787,
												783
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												659,
												664,
												633,
												647,
												638,
												651,
												656
											]
										},
										{
											"title": "Other",
											"children": [
												735
											]
										}
									]
								},
								{
									"title": "Type Aliases",
									"kind": 4194304,
									"children": [
										552,
										605,
										672,
										579,
										555,
										600,
										556,
										758,
										591,
										663,
										553,
										742,
										554,
										637,
										743,
										551,
										623,
										702,
										715,
										740,
										570,
										782,
										692,
										677,
										739,
										741,
										614,
										682,
										687,
										697,
										628,
										561,
										655
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												552,
												553,
												551
											]
										},
										{
											"title": "Elementary types",
											"children": [
												605,
												579,
												555,
												600,
												556,
												591,
												554,
												623,
												570,
												614,
												628,
												561
											]
										},
										{
											"title": "Container types",
											"children": [
												672,
												677,
												682,
												687
											]
										},
										{
											"title": "Function types",
											"children": [
												702,
												715
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												692,
												697
											]
										},
										{
											"title": "Generic errors",
											"children": [
												742,
												743,
												740,
												741
											]
										},
										{
											"title": "Internal-use errors",
											"children": [
												782
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												663,
												637,
												655
											]
										},
										{
											"title": "Other",
											"children": [
												758,
												739
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/errors.ts",
									"line": 7,
									"character": 0
								}
							]
						},
						{
							"id": 80,
							"name": "Types",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Contains the types for type objects, and some\nfunctions for working with them."
							},
							"children": [
								{
									"id": 132,
									"name": "AddressTypeGeneral",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an address (with payability unspecified)"
									},
									"children": [
										{
											"id": 134,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 144,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "general"
											}
										},
										{
											"id": 133,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 143,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "address"
											}
										},
										{
											"id": 135,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 145,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												134,
												133,
												135
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 142,
											"character": 17
										}
									]
								},
								{
									"id": 128,
									"name": "AddressTypeSpecific",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an address (with payability specified)"
									},
									"children": [
										{
											"id": 130,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 133,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "specific"
											}
										},
										{
											"id": 131,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 134,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 129,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 132,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "address"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												130,
												131,
												129
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 131,
											"character": 17
										}
									]
								},
								{
									"id": 158,
									"name": "ArrayTypeDynamic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a dynamic-length array"
									},
									"children": [
										{
											"id": 161,
											"name": "baseType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 212,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 104,
												"name": "Type"
											}
										},
										{
											"id": 160,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 211,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "dynamic"
											}
										},
										{
											"id": 162,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 213,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2312,
												"name": "Location"
											}
										},
										{
											"id": 159,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 210,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "array"
											}
										},
										{
											"id": 163,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 214,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												161,
												160,
												162,
												159,
												163
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 209,
											"character": 17
										}
									]
								},
								{
									"id": 151,
									"name": "ArrayTypeStatic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a static-length array"
									},
									"children": [
										{
											"id": 154,
											"name": "baseType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 198,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 104,
												"name": "Type"
											}
										},
										{
											"id": 153,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 197,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "static"
											}
										},
										{
											"id": 155,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 199,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "BN",
												"package": "@types/bn.js",
												"name": "BN"
											}
										},
										{
											"id": 156,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 200,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2312,
												"name": "Location"
											}
										},
										{
											"id": 152,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 196,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "array"
											}
										},
										{
											"id": 157,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 201,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												154,
												153,
												155,
												156,
												152,
												157
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 195,
											"character": 17
										}
									]
								},
								{
									"id": 113,
									"name": "BoolType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a boolean"
									},
									"children": [
										{
											"id": 114,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 84,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "bool"
											}
										},
										{
											"id": 115,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 85,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												114,
												115
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 83,
											"character": 17
										}
									]
								},
								{
									"id": 122,
									"name": "BytesTypeDynamic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a dynamic-length bytestring"
									},
									"children": [
										{
											"id": 124,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 114,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "dynamic"
											}
										},
										{
											"id": 125,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 115,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2312,
												"name": "Location"
											}
										},
										{
											"id": 123,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 113,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "bytes"
											}
										},
										{
											"id": 126,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 116,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												124,
												125,
												123,
												126
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 112,
											"character": 17
										}
									]
								},
								{
									"id": 117,
									"name": "BytesTypeStatic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a static-length bytestring"
									},
									"children": [
										{
											"id": 119,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 102,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "static"
											}
										},
										{
											"id": 120,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 103,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 118,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 101,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "bytes"
											}
										},
										{
											"id": 121,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 104,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												119,
												120,
												118,
												121
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 100,
											"character": 17
										}
									]
								},
								{
									"id": 244,
									"name": "ContractTypeForeign",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a contract w/o full Solidity info -- not used for actual variables"
									},
									"children": [
										{
											"id": 248,
											"name": "contractKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 521,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2315,
												"name": "ContractKind"
											}
										},
										{
											"id": 246,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 519,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "foreign"
											}
										},
										{
											"id": 249,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates whether contract has payable fallback function"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 525,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 245,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 518,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "contract"
											}
										},
										{
											"id": 247,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 520,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												248,
												246,
												249,
												245,
												247
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 517,
											"character": 17
										}
									]
								},
								{
									"id": 237,
									"name": "ContractTypeNative",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a contract with full Solidity info -- may be used for actual variables"
									},
									"children": [
										{
											"id": 242,
											"name": "contractKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 503,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2315,
												"name": "ContractKind"
											}
										},
										{
											"id": 240,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 501,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 239,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 497,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "native"
											}
										},
										{
											"id": 243,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates whether contract has payable fallback function"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 507,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 238,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 496,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "contract"
											}
										},
										{
											"id": 241,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 502,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												242,
												240,
												239,
												243,
												238,
												241
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 495,
											"character": 17
										}
									]
								},
								{
									"id": 230,
									"name": "EnumTypeGlobal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Global enum"
									},
									"children": [
										{
											"id": 233,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 472,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 232,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 468,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "global"
											}
										},
										{
											"id": 235,
											"name": "options",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 477,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 231,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 467,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "enum"
											}
										},
										{
											"id": 234,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 473,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												233,
												232,
												235,
												231,
												234
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 466,
											"character": 17
										}
									]
								},
								{
									"id": 222,
									"name": "EnumTypeLocal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Local enum (defined in a contract)"
									},
									"children": [
										{
											"id": 228,
											"name": "definingContract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 454,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 237,
												"name": "ContractTypeNative"
											}
										},
										{
											"id": 227,
											"name": "definingContractName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 453,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 225,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 451,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 224,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 447,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "local"
											}
										},
										{
											"id": 229,
											"name": "options",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 458,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 223,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 446,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "enum"
											}
										},
										{
											"id": 226,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 452,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												228,
												227,
												225,
												224,
												229,
												223,
												226
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 445,
											"character": 17
										}
									]
								},
								{
									"id": 140,
									"name": "FixedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a signed fixed-point number"
									},
									"children": [
										{
											"id": 142,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 166,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 143,
											"name": "places",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 167,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 141,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 165,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "fixed"
											}
										},
										{
											"id": 144,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 168,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												142,
												143,
												141,
												144
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 164,
											"character": 17
										}
									]
								},
								{
									"id": 187,
									"name": "FunctionExternalTypeGeneral",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an external function pointer (general ABI type)"
									},
									"children": [
										{
											"id": 190,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 332,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "general"
											}
										},
										{
											"id": 188,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 330,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "function"
											}
										},
										{
											"id": 191,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 334,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 189,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 331,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "external"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												190,
												188,
												191,
												189
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 329,
											"character": 17
										}
									]
								},
								{
									"id": 180,
									"name": "FunctionExternalTypeSpecific",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an external function pointer (full Solidity type)"
									},
									"children": [
										{
											"id": 185,
											"name": "inputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 319,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 104,
													"name": "Type"
												}
											}
										},
										{
											"id": 183,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 317,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "specific"
											}
										},
										{
											"id": 184,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 318,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2314,
												"name": "Mutability"
											}
										},
										{
											"id": 186,
											"name": "outputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 320,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 104,
													"name": "Type"
												}
											}
										},
										{
											"id": 181,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 315,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "function"
											}
										},
										{
											"id": 182,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 316,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "external"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												185,
												183,
												184,
												186,
												181,
												182
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 314,
											"character": 17
										}
									]
								},
								{
									"id": 173,
									"name": "FunctionInternalType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an internal function pointer"
									},
									"children": [
										{
											"id": 177,
											"name": "inputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 295,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 104,
													"name": "Type"
												}
											}
										},
										{
											"id": 176,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 294,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2314,
												"name": "Mutability"
											}
										},
										{
											"id": 178,
											"name": "outputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 296,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 104,
													"name": "Type"
												}
											}
										},
										{
											"id": 174,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 292,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "function"
											}
										},
										{
											"id": 175,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 293,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "internal"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												177,
												176,
												178,
												174,
												175
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 291,
											"character": 17
										}
									]
								},
								{
									"id": 109,
									"name": "IntType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a signed integer"
									},
									"children": [
										{
											"id": 111,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 74,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 110,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 73,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "int"
											}
										},
										{
											"id": 112,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 75,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												111,
												110,
												112
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 72,
											"character": 17
										}
									]
								},
								{
									"id": 266,
									"name": "MagicType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a magic variable"
									},
									"children": [
										{
											"id": 269,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 588,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 270,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 271,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 272,
																"name": "field",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "reference",
															"id": 104,
															"name": "Type"
														}
													}
												}
											}
										},
										{
											"id": 267,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 583,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "magic"
											}
										},
										{
											"id": 268,
											"name": "variable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 584,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 265,
												"name": "MagicVariableName"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												269,
												267,
												268
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 582,
											"character": 17
										}
									]
								},
								{
									"id": 167,
									"name": "MappingType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a mapping"
									},
									"children": [
										{
											"id": 169,
											"name": "keyType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 274,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 164,
												"name": "ElementaryType"
											}
										},
										{
											"id": 171,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 276,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "storage"
											}
										},
										{
											"id": 168,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 273,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "mapping"
											}
										},
										{
											"id": 170,
											"name": "valueType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 275,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 104,
												"name": "Type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												169,
												171,
												168,
												170
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 272,
											"character": 17
										}
									]
								},
								{
									"id": 195,
									"name": "NameTypePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 196,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 369,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 197,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 370,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 104,
												"name": "Type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												196,
												197
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 368,
											"character": 17
										}
									]
								},
								{
									"id": 214,
									"name": "OptionallyNamedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 215,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 416,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 216,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 417,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 104,
												"name": "Type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												215,
												216
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 415,
											"character": 17
										}
									]
								},
								{
									"id": 281,
									"name": "OptionsType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Fictitious type used for a transaction options argument\n(e.g. value, from, etc)."
									},
									"children": [
										{
											"id": 282,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 631,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "options"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												282
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 630,
											"character": 17
										}
									]
								},
								{
									"id": 136,
									"name": "StringType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a string"
									},
									"children": [
										{
											"id": 138,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 155,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2312,
												"name": "Location"
											}
										},
										{
											"id": 137,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 154,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "string"
											}
										},
										{
											"id": 139,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 156,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												138,
												137,
												139
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 153,
											"character": 17
										}
									]
								},
								{
									"id": 207,
									"name": "StructTypeGlobal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Global structs"
									},
									"children": [
										{
											"id": 210,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 406,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 209,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 402,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "global"
											}
										},
										{
											"id": 213,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 412,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2312,
												"name": "Location"
											}
										},
										{
											"id": 212,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 411,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 195,
													"name": "NameTypePair"
												}
											}
										},
										{
											"id": 208,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 401,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "struct"
											}
										},
										{
											"id": 211,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 407,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												210,
												209,
												213,
												212,
												208,
												211
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 400,
											"character": 17
										}
									]
								},
								{
									"id": 198,
									"name": "StructTypeLocal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Local structs (defined in contracts)"
									},
									"children": [
										{
											"id": 204,
											"name": "definingContract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 387,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 237,
												"name": "ContractTypeNative"
											}
										},
										{
											"id": 203,
											"name": "definingContractName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 386,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 201,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 384,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 200,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 380,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "local"
											}
										},
										{
											"id": 206,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 392,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2312,
												"name": "Location"
											}
										},
										{
											"id": 205,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 391,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 195,
													"name": "NameTypePair"
												}
											}
										},
										{
											"id": 199,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 379,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "struct"
											}
										},
										{
											"id": 202,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 385,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												204,
												203,
												201,
												200,
												206,
												205,
												199,
												202
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 378,
											"character": 17
										}
									]
								},
								{
									"id": 217,
									"name": "TupleType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a tuple (for use in ABI)"
									},
									"children": [
										{
											"id": 219,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 427,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 214,
													"name": "OptionallyNamedType"
												}
											}
										},
										{
											"id": 218,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 426,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "tuple"
											}
										},
										{
											"id": 220,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 428,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												219,
												218,
												220
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 425,
											"character": 17
										}
									]
								},
								{
									"id": 274,
									"name": "TypeTypeContract",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a contract type"
									},
									"children": [
										{
											"id": 277,
											"name": "stateVariableTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order, and must only include\n**non-inherited** state variables"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 612,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 195,
													"name": "NameTypePair"
												}
											}
										},
										{
											"id": 276,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 607,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 237,
												"name": "ContractTypeNative"
											}
										},
										{
											"id": 275,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 606,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												277,
												276,
												275
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 605,
											"character": 17
										}
									]
								},
								{
									"id": 278,
									"name": "TypeTypeEnum",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an enum type"
									},
									"children": [
										{
											"id": 280,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 621,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 221,
												"name": "EnumType"
											}
										},
										{
											"id": 279,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 620,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												280,
												279
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 619,
											"character": 17
										}
									]
								},
								{
									"id": 287,
									"name": "TypesByCompilationAndId",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 650,
											"character": 17
										}
									],
									"indexSignature": {
										"id": 288,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 289,
												"name": "compilationId",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reflection",
											"declaration": {
												"id": 290,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"children": [
													{
														"id": 291,
														"name": "compiler",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "codec/lib/format/types.ts",
																"line": 652,
																"character": 4
															}
														],
														"type": {
															"type": "reference",
															"id": 1743,
															"name": "CompilerVersion"
														}
													},
													{
														"id": 292,
														"name": "types",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "codec/lib/format/types.ts",
																"line": 653,
																"character": 4
															}
														],
														"type": {
															"type": "reference",
															"id": 284,
															"name": "TypesById"
														}
													}
												],
												"groups": [
													{
														"title": "Properties",
														"kind": 1024,
														"children": [
															291,
															292
														]
													}
												],
												"sources": [
													{
														"fileName": "codec/lib/format/types.ts",
														"line": 651,
														"character": 27
													}
												]
											}
										}
									}
								},
								{
									"id": 284,
									"name": "TypesById",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 646,
											"character": 17
										}
									],
									"indexSignature": {
										"id": 285,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 286,
												"name": "id",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 193,
											"name": "UserDefinedType"
										}
									}
								},
								{
									"id": 145,
									"name": "UfixedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an unsigned fixed-point number"
									},
									"children": [
										{
											"id": 147,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 178,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 148,
											"name": "places",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 179,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 146,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 177,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "ufixed"
											}
										},
										{
											"id": 149,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 180,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												147,
												148,
												146,
												149
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 176,
											"character": 17
										}
									]
								},
								{
									"id": 105,
									"name": "UintType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an unsigned integer"
									},
									"children": [
										{
											"id": 107,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 63,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 106,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 62,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "uint"
											}
										},
										{
											"id": 108,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 64,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												107,
												106,
												108
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 61,
											"character": 17
										}
									]
								},
								{
									"id": 259,
									"name": "UserDefinedValueTypeTypeGlobal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Global UDVT (defined outside a contract)"
									},
									"children": [
										{
											"id": 262,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 570,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 261,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 566,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "global"
											}
										},
										{
											"id": 260,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 565,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "userDefinedValueType"
											}
										},
										{
											"id": 263,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 571,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 264,
											"name": "underlyingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 572,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 165,
												"name": "BuiltInValueType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												262,
												261,
												260,
												263,
												264
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 564,
											"character": 17
										}
									]
								},
								{
									"id": 251,
									"name": "UserDefinedValueTypeTypeLocal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Local UDVT (defined in a contract)"
									},
									"children": [
										{
											"id": 257,
											"name": "definingContract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 555,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 237,
												"name": "ContractTypeNative"
											}
										},
										{
											"id": 256,
											"name": "definingContractName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 554,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 254,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 552,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 253,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 548,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "local"
											}
										},
										{
											"id": 252,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 547,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "userDefinedValueType"
											}
										},
										{
											"id": 255,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 553,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 258,
											"name": "underlyingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 556,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 165,
												"name": "BuiltInValueType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												257,
												256,
												254,
												253,
												252,
												255,
												258
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 546,
											"character": 17
										}
									]
								},
								{
									"id": 166,
									"name": "AbiType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Types that can go in the ABI"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 254,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 105,
												"name": "UintType"
											},
											{
												"type": "reference",
												"id": 109,
												"name": "IntType"
											},
											{
												"type": "reference",
												"id": 113,
												"name": "BoolType"
											},
											{
												"type": "reference",
												"id": 116,
												"name": "BytesType"
											},
											{
												"type": "reference",
												"id": 132,
												"name": "AddressTypeGeneral"
											},
											{
												"type": "reference",
												"id": 140,
												"name": "FixedType"
											},
											{
												"type": "reference",
												"id": 145,
												"name": "UfixedType"
											},
											{
												"type": "reference",
												"id": 136,
												"name": "StringType"
											},
											{
												"type": "reference",
												"id": 150,
												"name": "ArrayType"
											},
											{
												"type": "reference",
												"id": 187,
												"name": "FunctionExternalTypeGeneral"
											},
											{
												"type": "reference",
												"id": 217,
												"name": "TupleType"
											}
										]
									}
								},
								{
									"id": 127,
									"name": "AddressType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of an address"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 124,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 128,
												"name": "AddressTypeSpecific"
											},
											{
												"type": "reference",
												"id": 132,
												"name": "AddressTypeGeneral"
											}
										]
									}
								},
								{
									"id": 150,
									"name": "ArrayType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of an array"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 188,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 151,
												"name": "ArrayTypeStatic"
											},
											{
												"type": "reference",
												"id": 158,
												"name": "ArrayTypeDynamic"
											}
										]
									}
								},
								{
									"id": 165,
									"name": "BuiltInValueType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Types that can underlie a user-defined value type"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 240,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 105,
												"name": "UintType"
											},
											{
												"type": "reference",
												"id": 109,
												"name": "IntType"
											},
											{
												"type": "reference",
												"id": 113,
												"name": "BoolType"
											},
											{
												"type": "reference",
												"id": 117,
												"name": "BytesTypeStatic"
											},
											{
												"type": "reference",
												"id": 140,
												"name": "FixedType"
											},
											{
												"type": "reference",
												"id": 145,
												"name": "UfixedType"
											},
											{
												"type": "reference",
												"id": 128,
												"name": "AddressTypeSpecific"
											}
										]
									}
								},
								{
									"id": 116,
									"name": "BytesType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a bytestring (static or dynamic)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 93,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 117,
												"name": "BytesTypeStatic"
											},
											{
												"type": "reference",
												"id": 122,
												"name": "BytesTypeDynamic"
											}
										]
									}
								},
								{
									"id": 192,
									"name": "ContractDefinedType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Types defined inside contracts"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 342,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 198,
												"name": "StructTypeLocal"
											},
											{
												"type": "reference",
												"id": 222,
												"name": "EnumTypeLocal"
											},
											{
												"type": "reference",
												"id": 251,
												"name": "UserDefinedValueTypeTypeLocal"
											}
										]
									}
								},
								{
									"id": 236,
									"name": "ContractType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a contract; used not just for actual values but wherever a contract type\nis needed",
										"text": "Contract types may be native (has Solidity info) or foreign (lacking Solidity info).\n"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 488,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 237,
												"name": "ContractTypeNative"
											},
											{
												"type": "reference",
												"id": 244,
												"name": "ContractTypeForeign"
											}
										]
									}
								},
								{
									"id": 164,
									"name": "ElementaryType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of an elementary value"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 222,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 105,
												"name": "UintType"
											},
											{
												"type": "reference",
												"id": 109,
												"name": "IntType"
											},
											{
												"type": "reference",
												"id": 113,
												"name": "BoolType"
											},
											{
												"type": "reference",
												"id": 116,
												"name": "BytesType"
											},
											{
												"type": "reference",
												"id": 140,
												"name": "FixedType"
											},
											{
												"type": "reference",
												"id": 145,
												"name": "UfixedType"
											},
											{
												"type": "reference",
												"id": 127,
												"name": "AddressType"
											},
											{
												"type": "reference",
												"id": 136,
												"name": "StringType"
											},
											{
												"type": "reference",
												"id": 221,
												"name": "EnumType"
											},
											{
												"type": "reference",
												"id": 250,
												"name": "UserDefinedValueTypeType"
											},
											{
												"type": "reference",
												"id": 236,
												"name": "ContractType"
											}
										]
									}
								},
								{
									"id": 221,
									"name": "EnumType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of an enum",
										"text": "Enums may be local (defined in a contract) or global (defined outside of any contract)\n"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 438,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 222,
												"name": "EnumTypeLocal"
											},
											{
												"type": "reference",
												"id": 230,
												"name": "EnumTypeGlobal"
											}
										]
									}
								},
								{
									"id": 179,
									"name": "FunctionExternalType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of an external function pointer"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 305,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 180,
												"name": "FunctionExternalTypeSpecific"
											},
											{
												"type": "reference",
												"id": 187,
												"name": "FunctionExternalTypeGeneral"
											}
										]
									}
								},
								{
									"id": 172,
									"name": "FunctionType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a function pointer (internal or external)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 284,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 173,
												"name": "FunctionInternalType"
											},
											{
												"type": "reference",
												"id": 179,
												"name": "FunctionExternalType"
											}
										]
									}
								},
								{
									"id": 265,
									"name": "MagicVariableName",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 575,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "message"
											},
											{
												"type": "literal",
												"value": "block"
											},
											{
												"type": "literal",
												"value": "transaction"
											}
										]
									}
								},
								{
									"id": 283,
									"name": "ReferenceType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Reference types"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 639,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 150,
												"name": "ArrayType"
											},
											{
												"type": "reference",
												"id": 167,
												"name": "MappingType"
											},
											{
												"type": "reference",
												"id": 194,
												"name": "StructType"
											},
											{
												"type": "reference",
												"id": 136,
												"name": "StringType"
											},
											{
												"type": "reference",
												"id": 122,
												"name": "BytesTypeDynamic"
											}
										]
									}
								},
								{
									"id": 194,
									"name": "StructType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a struct",
										"text": "Structs may be local (defined in a contract) or global (defined outside of any contract)\n"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 366,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 198,
												"name": "StructTypeLocal"
											},
											{
												"type": "reference",
												"id": 207,
												"name": "StructTypeGlobal"
											}
										]
									}
								},
								{
									"id": 104,
									"name": "Type",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Object representing a type"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 35,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 105,
												"name": "UintType"
											},
											{
												"type": "reference",
												"id": 109,
												"name": "IntType"
											},
											{
												"type": "reference",
												"id": 113,
												"name": "BoolType"
											},
											{
												"type": "reference",
												"id": 116,
												"name": "BytesType"
											},
											{
												"type": "reference",
												"id": 127,
												"name": "AddressType"
											},
											{
												"type": "reference",
												"id": 140,
												"name": "FixedType"
											},
											{
												"type": "reference",
												"id": 145,
												"name": "UfixedType"
											},
											{
												"type": "reference",
												"id": 136,
												"name": "StringType"
											},
											{
												"type": "reference",
												"id": 150,
												"name": "ArrayType"
											},
											{
												"type": "reference",
												"id": 167,
												"name": "MappingType"
											},
											{
												"type": "reference",
												"id": 172,
												"name": "FunctionType"
											},
											{
												"type": "reference",
												"id": 194,
												"name": "StructType"
											},
											{
												"type": "reference",
												"id": 221,
												"name": "EnumType"
											},
											{
												"type": "reference",
												"id": 250,
												"name": "UserDefinedValueTypeType"
											},
											{
												"type": "reference",
												"id": 236,
												"name": "ContractType"
											},
											{
												"type": "reference",
												"id": 266,
												"name": "MagicType"
											},
											{
												"type": "reference",
												"id": 273,
												"name": "TypeType"
											},
											{
												"type": "reference",
												"id": 217,
												"name": "TupleType"
											},
											{
												"type": "reference",
												"id": 281,
												"name": "OptionsType"
											}
										]
									}
								},
								{
									"id": 273,
									"name": "TypeType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a type!  This is currently only used for contract types and enum\ntypes, but may expand in the future."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 599,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 274,
												"name": "TypeTypeContract"
											},
											{
												"type": "reference",
												"id": 278,
												"name": "TypeTypeEnum"
											}
										]
									}
								},
								{
									"id": 193,
									"name": "UserDefinedType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "User-defined types"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 352,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 192,
												"name": "ContractDefinedType"
											},
											{
												"type": "reference",
												"id": 237,
												"name": "ContractTypeNative"
											},
											{
												"type": "reference",
												"id": 207,
												"name": "StructTypeGlobal"
											},
											{
												"type": "reference",
												"id": 230,
												"name": "EnumTypeGlobal"
											},
											{
												"type": "reference",
												"id": 259,
												"name": "UserDefinedValueTypeTypeGlobal"
											}
										]
									}
								},
								{
									"id": 250,
									"name": "UserDefinedValueTypeType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a user-defined value type",
										"text": "These may be local (defined in a contract) or global (defined outside of any contract)\n"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 537,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 251,
												"name": "UserDefinedValueTypeTypeLocal"
											},
											{
												"type": "reference",
												"id": 259,
												"name": "UserDefinedValueTypeTypeGlobal"
											}
										]
									}
								},
								{
									"id": 81,
									"name": "forgetCompilations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 657,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 82,
											"name": "forgetCompilations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 83,
													"name": "typesByCompilation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 287,
														"name": "TypesByCompilationAndId"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 284,
												"name": "TypesById"
											}
										}
									]
								},
								{
									"id": 87,
									"name": "fullType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 689,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 88,
											"name": "fullType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 89,
													"name": "basicType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												},
												{
													"id": 90,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 284,
														"name": "TypesById"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 104,
												"name": "Type"
											}
										}
									]
								},
								{
									"id": 101,
									"name": "isContractDefinedType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 877,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 102,
											"name": "isContractDefinedType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 103,
													"name": "anyType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "anyType",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"id": 192,
													"name": "ContractDefinedType"
												}
											}
										}
									]
								},
								{
									"id": 84,
									"name": "isReferenceType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 676,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 85,
											"name": "isReferenceType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 86,
													"name": "anyType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "anyType",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"id": 283,
													"name": "ReferenceType"
												}
											}
										}
									]
								},
								{
									"id": 91,
									"name": "specifyLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 706,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 92,
											"name": "specifyLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 93,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												},
												{
													"id": 94,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2312,
														"name": "Location"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 104,
												"name": "Type"
											}
										}
									]
								},
								{
									"id": 95,
									"name": "typeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 751,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 96,
											"name": "typeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 97,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 98,
									"name": "typeStringWithoutLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 760,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 99,
											"name": "typeStringWithoutLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 100,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										132,
										128,
										158,
										151,
										113,
										122,
										117,
										244,
										237,
										230,
										222,
										140,
										187,
										180,
										173,
										109,
										266,
										167,
										195,
										214,
										281,
										136,
										207,
										198,
										217,
										274,
										278,
										287,
										284,
										145,
										105,
										259,
										251
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												132,
												128,
												113,
												122,
												117,
												140,
												109,
												136,
												145,
												105
											]
										},
										{
											"title": "Container types",
											"children": [
												158,
												151,
												167,
												207,
												198,
												217
											]
										},
										{
											"title": "Function types",
											"children": [
												187,
												180,
												173
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												266,
												274,
												278
											]
										},
										{
											"title": "Special types (encoder-only)",
											"children": [
												281
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												244,
												237,
												230,
												222,
												259,
												251
											]
										},
										{
											"title": "Other",
											"children": [
												195,
												214,
												287,
												284
											]
										}
									]
								},
								{
									"title": "Type Aliases",
									"kind": 4194304,
									"children": [
										166,
										127,
										150,
										165,
										116,
										192,
										236,
										164,
										221,
										179,
										172,
										265,
										283,
										194,
										104,
										273,
										193,
										250
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												166,
												165,
												192,
												164,
												283,
												104,
												193
											]
										},
										{
											"title": "Elementary types",
											"children": [
												127,
												116
											]
										},
										{
											"title": "Container types",
											"children": [
												150,
												194
											]
										},
										{
											"title": "Function types",
											"children": [
												179,
												172
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												273
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												236,
												221,
												250
											]
										},
										{
											"title": "Other",
											"children": [
												265
											]
										}
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										81,
										87,
										101,
										84,
										91,
										95,
										98
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/types.ts",
									"line": 10,
									"character": 0
								}
							]
						},
						{
							"id": 789,
							"name": "Utils",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 837,
									"name": "Circularity",
									"kind": 4,
									"kindString": "Namespace",
									"flags": {},
									"children": [
										{
											"id": 838,
											"name": "tie",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/circularity.ts",
													"line": 6,
													"character": 16
												}
											],
											"signatures": [
												{
													"id": 839,
													"name": "tie",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 840,
															"name": "untied",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 294,
																"name": "Result"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 294,
														"name": "Format.Values.Result"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												838
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/circularity.ts",
											"line": 1,
											"character": 0
										}
									]
								},
								{
									"id": 790,
									"name": "Exception",
									"kind": 4,
									"kindString": "Namespace",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"children": [
										{
											"id": 791,
											"name": "message",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/exception.ts",
													"line": 16,
													"character": 16
												}
											],
											"signatures": [
												{
													"id": 792,
													"name": "message",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 793,
															"name": "error",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 743,
																"name": "ErrorForThrowing"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												791
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/exception.ts",
											"line": 6,
											"character": 0
										}
									]
								},
								{
									"id": 794,
									"name": "Inspect",
									"kind": 4,
									"kindString": "Namespace",
									"flags": {},
									"children": [
										{
											"id": 822,
											"name": "ResultInspector",
											"kind": 128,
											"kindString": "Class",
											"flags": {},
											"comment": {
												"shortText": "This class is meant to be used with Node's\n[util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\nfunction.  Given a [[Format.Values.Result]] `value`, one can use\n`new ResultInspector(value)` to create a ResultInspector for that value,\nwhich can be used with util.inspect() to create a human-readable string\nrepresenting the value.",
												"tags": [
													{
														"tag": "example",
														"text": "\nSuppose `value` is a Result.  In Node, the following would print to the\nconsole a human-readable representation of `value`, with colors enabled,\nno maximum depth, and no maximum array length, and lines (usually) no\nlonger than 80 characters:\n```javascript\nconsole.log(\n  util.inspect(\n    new ResultInspector(value),\n    {\n      colors: true,\n      depth: null,\n      maxArrayLength: null,\n      breakLength: 80\n    }\n  )\n);\n```\nOf course, there are many other ways to use util.inspect; see Node's\ndocumentation, linked above, for more.\n"
													}
												]
											},
											"children": [
												{
													"id": 823,
													"name": "constructor",
													"kind": 512,
													"kindString": "Constructor",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 67,
															"character": 2
														}
													],
													"signatures": [
														{
															"id": 824,
															"name": "new ResultInspector",
															"kind": 16384,
															"kindString": "Constructor signature",
															"flags": {},
															"parameters": [
																{
																	"id": 825,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 294,
																		"name": "Result"
																	}
																},
																{
																	"id": 826,
																	"name": "options",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"id": 820,
																		"name": "ResultInspectorOptions"
																	}
																}
															],
															"type": {
																"type": "reference",
																"id": 822,
																"name": "ResultInspector"
															}
														}
													]
												},
												{
													"id": 828,
													"name": "options",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 66,
															"character": 2
														}
													],
													"type": {
														"type": "reference",
														"id": 820,
														"name": "ResultInspectorOptions"
													}
												},
												{
													"id": 827,
													"name": "result",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 65,
															"character": 2
														}
													],
													"type": {
														"type": "reference",
														"id": 294,
														"name": "Result"
													}
												},
												{
													"id": 833,
													"name": "[custom]",
													"kind": 2048,
													"kindString": "Method",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 78,
															"character": 2
														}
													],
													"signatures": [
														{
															"id": 834,
															"name": "[custom]",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 835,
																	"name": "depth",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 836,
																	"name": "options",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 813,
																		"name": "InspectOptions"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												},
												{
													"id": 829,
													"name": "inspect",
													"kind": 2048,
													"kindString": "Method",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 75,
															"character": 2
														}
													],
													"signatures": [
														{
															"id": 830,
															"name": "inspect",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {
																"tags": [
																	{
																		"tag": "dev",
																		"text": "non-standard alternative interface name used by browser-util-inspect\n     package\n"
																	}
																]
															},
															"parameters": [
																{
																	"id": 831,
																	"name": "depth",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 832,
																	"name": "options",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 813,
																		"name": "InspectOptions"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											],
											"groups": [
												{
													"title": "Constructors",
													"kind": 512,
													"children": [
														823
													]
												},
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														828,
														827
													]
												},
												{
													"title": "Methods",
													"kind": 2048,
													"children": [
														833,
														829
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 64,
													"character": 13
												}
											]
										},
										{
											"id": 813,
											"name": "InspectOptions",
											"kind": 256,
											"kindString": "Interface",
											"flags": {},
											"children": [
												{
													"id": 819,
													"name": "breakLength",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 16,
															"character": 2
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 818,
													"name": "colors",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 15,
															"character": 2
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 814,
													"name": "stylize",
													"kind": 2048,
													"kindString": "Method",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 14,
															"character": 2
														}
													],
													"signatures": [
														{
															"id": 815,
															"name": "stylize",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 816,
																	"name": "toMaybeColor",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 817,
																	"name": "style",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														819,
														818
													]
												},
												{
													"title": "Methods",
													"kind": 2048,
													"children": [
														814
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 13,
													"character": 17
												}
											]
										},
										{
											"id": 820,
											"name": "ResultInspectorOptions",
											"kind": 256,
											"kindString": "Interface",
											"flags": {},
											"children": [
												{
													"id": 821,
													"name": "noHideAddress",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "This option causes the [[ResultInspector]] to display, for\naddresses with a reverse ENS record, both the ENS name and\nthe address.  (By default it displays only the ENS name.)"
													},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 32,
															"character": 2
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														821
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 26,
													"character": 17
												}
											]
										},
										{
											"id": 807,
											"name": "nativizeAccessList",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 722,
													"character": 16
												}
											],
											"signatures": [
												{
													"id": 808,
													"name": "nativizeAccessList",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Turns a wrapped access list into a usable form.\nWill fail if the input is not a wrapped access list!\nNote that the storage keys must be given as uint256, not bytes32.\nPrimarily meant for internal use."
													},
													"parameters": [
														{
															"id": 809,
															"name": "wrappedAccessList",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 313,
																"name": "ArrayValue"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 2339,
														"name": "Common.AccessList"
													}
												}
											]
										},
										{
											"id": 810,
											"name": "stringValueInfoToStringLossy",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 750,
													"character": 16
												}
											],
											"signatures": [
												{
													"id": 811,
													"name": "stringValueInfoToStringLossy",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 812,
															"name": "info",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 493,
																"name": "StringValueInfo"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											]
										},
										{
											"id": 804,
											"name": "unsafeNativize",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 543,
													"character": 16
												}
											],
											"signatures": [
												{
													"id": 805,
													"name": "unsafeNativize",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "WARNING! Do NOT use this function in real code unless you absolutely have\nto!  Using it in controlled tests is fine, but do NOT use it in real code if\nyou have any better option!",
														"text": "This function is a giant hack.  It will throw exceptions on numbers that\ndon't fit in a Javascript number.  It loses various information.  It was\nonly ever written to support our hacked-together watch expression system,\nand later repurposed to make testing easier.\n\nIf you are not doing something as horrible as evaluating user-inputted\nJavascript expressions meant to operate upon Solidity variables, then you\nprobably have a better option than using this in real code!\n\n(For instance, if you just want to nicely print individual values, without\nattempting to first operate on them via Javascript expressions, we have the\n[[ResultInspector]] class, which can be used with Node's\n[util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\nto do exactly that.)\n\nRemember, the decoder output format was made to be machine-readable.  It\nshouldn't be too hard for you to process.  If it comes to it, copy-paste\nthis code and dehackify it for your use case, which hopefully is more\nmanageable than the one that caused us to write this.\n"
													},
													"parameters": [
														{
															"id": 806,
															"name": "result",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 294,
																"name": "Result"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										},
										{
											"id": 795,
											"name": "unsafeNativizeVariables",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 502,
													"character": 16
												}
											],
											"signatures": [
												{
													"id": 796,
													"name": "unsafeNativizeVariables",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "WARNING! Do NOT use this function in real code unless you\nabsolutely have to!  Using it in controlled tests is fine,\nbut do NOT use it in real code if you have any better option!\nSee [[unsafeNativize]] for why!"
													},
													"parameters": [
														{
															"id": 797,
															"name": "variables",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 798,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"indexSignature": {
																		"id": 799,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 800,
																				"name": "name",
																				"kind": 32768,
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "reference",
																			"id": 294,
																			"name": "Format.Values.Result"
																		}
																	}
																}
															}
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 801,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/utils/inspect.ts",
																	"line": 504,
																	"character": 4
																}
															],
															"indexSignature": {
																"id": 802,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 803,
																		"name": "name",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Classes",
											"kind": 128,
											"children": [
												822
											]
										},
										{
											"title": "Interfaces",
											"kind": 256,
											"children": [
												813,
												820
											]
										},
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												807,
												810,
												804,
												795
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/inspect.ts",
											"line": 1,
											"character": 0
										}
									]
								}
							],
							"groups": [
								{
									"title": "Namespaces",
									"kind": 4,
									"children": [
										837,
										790,
										794
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/utils/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 293,
							"name": "Values",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Contains the types for value and result objects."
							},
							"children": [
								{
									"id": 477,
									"name": "AddressValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An address value"
									},
									"children": [
										{
											"id": 484,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 138,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 485,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 486,
															"name": "ensName",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 139,
																	"character": 4
																}
															],
															"type": {
																"type": "reference",
																"id": 493,
																"name": "StringValueInfo"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																486
															]
														}
													]
												}
											}
										},
										{
											"id": 479,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 127,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 478,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 126,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 127,
												"name": "AddressType"
											}
										},
										{
											"id": 480,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 128,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 481,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 482,
															"name": "asAddress",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "has leading \"0x\" and is checksum-cased"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 132,
																	"character": 4
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 483,
															"name": "rawAsHex",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "just a hex string, so no checksum"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 136,
																	"character": 4
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																482,
																483
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												484,
												479,
												478,
												480
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 125,
											"character": 17
										}
									]
								},
								{
									"id": 313,
									"name": "ArrayValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An array value (may contain errors!)"
									},
									"children": [
										{
											"id": 318,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 271,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 319,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 315,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 265,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 316,
											"name": "reference",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "will be used in the future for circular vales"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 269,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 314,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 264,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 150,
												"name": "ArrayType"
											}
										},
										{
											"id": 317,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 270,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 294,
													"name": "Result"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												318,
												315,
												316,
												314,
												317
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 263,
											"character": 17
										}
									]
								},
								{
									"id": 452,
									"name": "BoolValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A boolean value"
									},
									"children": [
										{
											"id": 458,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 82,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 459,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 454,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 78,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 453,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 77,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 113,
												"name": "BoolType"
											}
										},
										{
											"id": 455,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 79,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 456,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 457,
															"name": "asBoolean",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 80,
																	"character": 4
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																457
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												458,
												454,
												453,
												455
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 76,
											"character": 17
										}
									]
								},
								{
									"id": 469,
									"name": "BytesDynamicValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value (dynamic length)"
									},
									"children": [
										{
											"id": 475,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 117,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 476,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 471,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 110,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 470,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 109,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 122,
												"name": "BytesTypeDynamic"
											}
										},
										{
											"id": 472,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 111,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 473,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 474,
															"name": "asHex",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "hex-formatted, with leading \"0x\""
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 115,
																	"character": 4
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																474
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												475,
												471,
												470,
												472
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 108,
											"character": 17
										}
									]
								},
								{
									"id": 460,
									"name": "BytesStaticValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value (static length)"
									},
									"children": [
										{
											"id": 467,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 100,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 468,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 462,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 92,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 461,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 91,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 117,
												"name": "BytesTypeStatic"
											}
										},
										{
											"id": 463,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 93,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 464,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 465,
															"name": "asHex",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "hex-formatted, with leading \"0x\""
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 97,
																	"character": 4
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 466,
															"name": "rawAsHex",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 98,
																	"character": 4
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																465,
																466
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												467,
												462,
												461,
												463
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 90,
											"character": 17
										}
									]
								},
								{
									"id": 533,
									"name": "ContractValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A contract value; see [[ContractValueInfo]] for more detail"
									},
									"children": [
										{
											"id": 537,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 254,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 538,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 539,
															"name": "ensName",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 255,
																	"character": 4
																}
															],
															"type": {
																"type": "reference",
																"id": 493,
																"name": "StringValueInfo"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																539
															]
														}
													]
												}
											}
										},
										{
											"id": 535,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 252,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 534,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 251,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 236,
												"name": "ContractType"
											}
										},
										{
											"id": 536,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 253,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 540,
												"name": "ContractValueInfo"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												537,
												535,
												534,
												536
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 250,
											"character": 17
										}
									]
								},
								{
									"id": 541,
									"name": "ContractValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of ContractValueInfo is used when we can identify the class."
									},
									"children": [
										{
											"id": 543,
											"name": "address",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "formatted as address (leading \"0x\", checksum-cased);\nnote that this is not an AddressResult!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 280,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 545,
											"name": "class",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 285,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 236,
												"name": "ContractType"
											}
										},
										{
											"id": 542,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 275,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "known"
											}
										},
										{
											"id": 544,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "this is just a hexstring; no checksum (also may have padding beforehand)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 284,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												543,
												545,
												542,
												544
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 274,
											"character": 17
										}
									]
								},
								{
									"id": 546,
									"name": "ContractValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of ContractValueInfo is used when we can't identify the class."
									},
									"children": [
										{
											"id": 548,
											"name": "address",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "formatted as address (leading \"0x\", checksum-cased);\nnote that this is not an AddressResult!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 300,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 547,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 295,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "unknown"
											}
										},
										{
											"id": 549,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "this is just a hexstring; no checksum (also may have padding beforehand)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 304,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												548,
												547,
												549
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 294,
											"character": 17
										}
									]
								},
								{
									"id": 518,
									"name": "EnumValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An enum value"
									},
									"children": [
										{
											"id": 525,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 230,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 526,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 520,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 222,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 519,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 221,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 221,
												"name": "EnumType"
											}
										},
										{
											"id": 521,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 223,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 522,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 523,
															"name": "name",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 224,
																	"character": 4
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 524,
															"name": "numericAsBN",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "the numeric value of the enum"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 228,
																	"character": 4
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "BN",
																"package": "@types/bn.js",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																523,
																524
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												525,
												520,
												519,
												521
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 220,
											"character": 17
										}
									]
								},
								{
									"id": 500,
									"name": "FixedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A signed fixed-point value"
									},
									"children": [
										{
											"id": 507,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 197,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 508,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 502,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 192,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 501,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 191,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 140,
												"name": "FixedType"
											}
										},
										{
											"id": 503,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 193,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 504,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 505,
															"name": "asBig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 194,
																	"character": 4
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "Big",
																"package": "@types/big.js",
																"name": "Big"
															}
														},
														{
															"id": 506,
															"name": "rawAsBig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 195,
																	"character": 4
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "Big",
																"package": "@types/big.js",
																"name": "Big"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																505,
																506
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												507,
												502,
												501,
												503
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 190,
											"character": 17
										}
									]
								},
								{
									"id": 376,
									"name": "FunctionExternalValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An external function pointer value; see [[FunctionExternalValueInfo]] for more detail"
									},
									"children": [
										{
											"id": 380,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 452,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 381,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 382,
															"name": "contractEnsName",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/values.ts",
																	"line": 453,
																	"character": 4
																}
															],
															"type": {
																"type": "reference",
																"id": 493,
																"name": "StringValueInfo"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																382
															]
														}
													]
												}
											}
										},
										{
											"id": 378,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 450,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 377,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 449,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 179,
												"name": "FunctionExternalType"
											}
										},
										{
											"id": 379,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 451,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 383,
												"name": "FunctionExternalValueInfo"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												380,
												378,
												377,
												379
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 448,
											"character": 17
										}
									]
								},
								{
									"id": 389,
									"name": "FunctionExternalValueInfoInvalid",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used when we can identify the class but can't locate the function."
									},
									"children": [
										{
											"id": 391,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 493,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 541,
												"name": "ContractValueInfoKnown"
											}
										},
										{
											"id": 390,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 492,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "invalid"
											}
										},
										{
											"id": 392,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 497,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												391,
												390,
												392
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 491,
											"character": 17
										}
									]
								},
								{
									"id": 384,
									"name": "FunctionExternalValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used for a known function of a known class."
									},
									"children": [
										{
											"id": 388,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 482,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										},
										{
											"id": 386,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 477,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 541,
												"name": "ContractValueInfoKnown"
											}
										},
										{
											"id": 385,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 476,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "known"
											}
										},
										{
											"id": 387,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 481,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												388,
												386,
												385,
												387
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 475,
											"character": 17
										}
									]
								},
								{
									"id": 393,
									"name": "FunctionExternalValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used when we can't even locate the class."
									},
									"children": [
										{
											"id": 395,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 507,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 546,
												"name": "ContractValueInfoUnknown"
											}
										},
										{
											"id": 394,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 506,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "unknown"
											}
										},
										{
											"id": 396,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 511,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												395,
												394,
												396
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 505,
											"character": 17
										}
									]
								},
								{
									"id": 398,
									"name": "FunctionInternalValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An internal function pointer value; see [[FunctionInternalValueInfo]] for more detail"
									},
									"children": [
										{
											"id": 402,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 536,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 403,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 400,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 534,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 399,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 533,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 173,
												"name": "FunctionInternalType"
											}
										},
										{
											"id": 401,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 535,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 404,
												"name": "FunctionInternalValueInfo"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												402,
												400,
												399,
												401
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 532,
											"character": 17
										}
									]
								},
								{
									"id": 414,
									"name": "FunctionInternalValueInfoException",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A default value -- internal functions have two default values\ndepending on whether they live in storage or elsewhere.\nIn storage the default value is 0 for both program counters.\nElsewhere they're both nonzero."
									},
									"children": [
										{
											"id": 418,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 587,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 416,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 585,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 236,
												"name": "ContractType"
											}
										},
										{
											"id": 417,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 586,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 415,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 584,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "exception"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												418,
												416,
												417,
												415
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 583,
											"character": 17
										}
									]
								},
								{
									"id": 405,
									"name": "FunctionInternalValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of FunctionInternalValueInfo is used for an actual internal function."
									},
									"children": [
										{
											"id": 409,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 561,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 407,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 559,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 236,
												"name": "ContractType"
											}
										},
										{
											"id": 411,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Is null for a free function"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 566,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 236,
												"name": "ContractType"
											}
										},
										{
											"id": 408,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 560,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 412,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "An internal opaque ID"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 570,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 406,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 558,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "function"
											}
										},
										{
											"id": 413,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 571,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2314,
												"name": "Mutability"
											}
										},
										{
											"id": 410,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 562,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												409,
												407,
												411,
												408,
												412,
												406,
												413,
												410
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 557,
											"character": 17
										}
									]
								},
								{
									"id": 419,
									"name": "FunctionInternalValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type is used when decoding internal functions in contexts that don't\nsupport full decoding of such functions.  The high-level decoding interface\ncan currently only sometimes perform such a full decoding.",
										"text": "In contexts where such full decoding isn't supported, you'll get one of\nthese; so you'll still get the program counter values, but further\ninformation will be absent.  Note you'll get this even if really it should\ndecode to an error, because if there's insufficient information to determine\nadditional function information, there's necessarily insufficient\ninformation to determine if it should be an error.\n"
									},
									"children": [
										{
											"id": 423,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 608,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 421,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 606,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 236,
												"name": "ContractType"
											}
										},
										{
											"id": 422,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 607,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 420,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 605,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "unknown"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												423,
												421,
												422,
												420
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 604,
											"character": 17
										}
									]
								},
								{
									"id": 443,
									"name": "IntValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A signed integer value"
									},
									"children": [
										{
											"id": 450,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 68,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 451,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 445,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 63,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 444,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 62,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 109,
												"name": "IntType"
											}
										},
										{
											"id": 446,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 64,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 447,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 448,
															"name": "asBN",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 65,
																	"character": 4
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "BN",
																"package": "@types/bn.js",
																"name": "BN"
															}
														},
														{
															"id": 449,
															"name": "rawAsBN",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 66,
																	"character": 4
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "BN",
																"package": "@types/bn.js",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																448,
																449
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												450,
												445,
												444,
												446
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 61,
											"character": 17
										}
									]
								},
								{
									"id": 327,
									"name": "KeyValuePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 328,
											"name": "key",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 299,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 431,
												"name": "ElementaryValue"
											}
										},
										{
											"id": 329,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 300,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 294,
												"name": "Result"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												328,
												329
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 298,
											"character": 17
										}
									]
								},
								{
									"id": 352,
									"name": "MagicValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A magic variable's value (may contain errors?)"
									},
									"children": [
										{
											"id": 359,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 379,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 360,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 354,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 374,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 353,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 373,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 266,
												"name": "MagicType"
											}
										},
										{
											"id": 355,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 376,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 356,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 357,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 358,
																"name": "field",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "reference",
															"id": 294,
															"name": "Result"
														}
													}
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												359,
												354,
												353,
												355
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 372,
											"character": 17
										}
									]
								},
								{
									"id": 321,
									"name": "MappingValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A mapping value (may contain errors!)"
									},
									"children": [
										{
											"id": 325,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 295,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 326,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 323,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 288,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 322,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 287,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 167,
												"name": "MappingType"
											}
										},
										{
											"id": 324,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "order is irrelevant; also note keys must be values, not errors"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 294,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 327,
													"name": "KeyValuePair"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												325,
												323,
												322,
												324
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 286,
											"character": 17
										}
									]
								},
								{
									"id": 338,
									"name": "NameValuePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 339,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 332,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 340,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 333,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 294,
												"name": "Result"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												339,
												340
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 331,
											"character": 17
										}
									]
								},
								{
									"id": 348,
									"name": "OptionallyNamedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 349,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 356,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 350,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 357,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 294,
												"name": "Result"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												349,
												350
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 355,
											"character": 17
										}
									]
								},
								{
									"id": 425,
									"name": "OptionsValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An options value"
									},
									"children": [
										{
											"id": 429,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 631,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 430,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 427,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 629,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 426,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 628,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 281,
												"name": "OptionsType"
											}
										},
										{
											"id": 428,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 630,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 2325,
												"name": "Options"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												429,
												427,
												426,
												428
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 627,
											"character": 17
										}
									]
								},
								{
									"id": 487,
									"name": "StringValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A string value; see [[StringValueInfo]] for more detail"
									},
									"children": [
										{
											"id": 491,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 152,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 492,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 489,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 150,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 488,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 149,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 136,
												"name": "StringType"
											}
										},
										{
											"id": 490,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 151,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 493,
												"name": "StringValueInfo"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												491,
												489,
												488,
												490
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 148,
											"character": 17
										}
									]
								},
								{
									"id": 497,
									"name": "StringValueInfoMalformed",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of StringValueInfo represents a malformed string."
									},
									"children": [
										{
											"id": 499,
											"name": "asHex",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex-formatted, with leading \"0x\""
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 182,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 498,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 178,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "malformed"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												499,
												498
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 177,
											"character": 17
										}
									]
								},
								{
									"id": 494,
									"name": "StringValueInfoValid",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of StringValueInfo represents a valid UTF-8 string."
									},
									"children": [
										{
											"id": 496,
											"name": "asString",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 169,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 495,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 168,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "valid"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												496,
												495
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 167,
											"character": 17
										}
									]
								},
								{
									"id": 331,
									"name": "StructValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A struct value (may contain errors!)"
									},
									"children": [
										{
											"id": 336,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 328,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 337,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 333,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 317,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 334,
											"name": "reference",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "will be used in the future for circular vales"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 321,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 332,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 316,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 194,
												"name": "StructType"
											}
										},
										{
											"id": 335,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "these must be stored in order!\nmoreover, any mappings *must* be included, even\nif this is a memory struct (such mappings will be empty)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 327,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 338,
													"name": "NameValuePair"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												336,
												333,
												334,
												332,
												335
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 315,
											"character": 17
										}
									]
								},
								{
									"id": 342,
									"name": "TupleValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A tuple value (may contain errors!)"
									},
									"children": [
										{
											"id": 346,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 352,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 347,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 344,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 350,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 343,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 349,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 217,
												"name": "TupleType"
											}
										},
										{
											"id": 345,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 351,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 348,
													"name": "OptionallyNamedValue"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												346,
												344,
												343,
												345
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 348,
											"character": 17
										}
									]
								},
								{
									"id": 363,
									"name": "TypeValueContract",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A contract type's value (see [[TypeValue]])"
									},
									"children": [
										{
											"id": 367,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 412,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 368,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 365,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 407,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 364,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 406,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 274,
												"name": "TypeTypeContract"
											}
										},
										{
											"id": 366,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "these must be stored in order!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 411,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 338,
													"name": "NameValuePair"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												367,
												365,
												364,
												366
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 405,
											"character": 17
										}
									]
								},
								{
									"id": 369,
									"name": "TypeValueEnum",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An enum type's value (see [[TypeValue]])"
									},
									"children": [
										{
											"id": 373,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 427,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 374,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 371,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 422,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 370,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 421,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 278,
												"name": "TypeTypeEnum"
											}
										},
										{
											"id": 372,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "these must be stored in order!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 426,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 518,
													"name": "EnumValue"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												373,
												371,
												370,
												372
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 420,
											"character": 17
										}
									]
								},
								{
									"id": 509,
									"name": "UfixedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An unsigned fixed-point value"
									},
									"children": [
										{
											"id": 516,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 212,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 517,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 511,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 207,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 510,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 206,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 145,
												"name": "UfixedType"
											}
										},
										{
											"id": 512,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 208,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 513,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 514,
															"name": "asBig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 209,
																	"character": 4
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "Big",
																"package": "@types/big.js",
																"name": "Big"
															}
														},
														{
															"id": 515,
															"name": "rawAsBig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 210,
																	"character": 4
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "Big",
																"package": "@types/big.js",
																"name": "Big"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																514,
																515
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												516,
												511,
												510,
												512
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 205,
											"character": 17
										}
									]
								},
								{
									"id": 434,
									"name": "UintValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An unsigned integer value"
									},
									"children": [
										{
											"id": 441,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 53,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 442,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 436,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 48,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 435,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 47,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 105,
												"name": "UintType"
											}
										},
										{
											"id": 437,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 49,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 438,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 439,
															"name": "asBN",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 50,
																	"character": 4
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "BN",
																"package": "@types/bn.js",
																"name": "BN"
															}
														},
														{
															"id": 440,
															"name": "rawAsBN",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 51,
																	"character": 4
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "BN",
																"package": "@types/bn.js",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																439,
																440
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												441,
												436,
												435,
												437
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 46,
											"character": 17
										}
									]
								},
								{
									"id": 527,
									"name": "UserDefinedValueTypeValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A UDVT value"
									},
									"children": [
										{
											"id": 531,
											"name": "interpretations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 242,
													"character": 2
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 532,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										},
										{
											"id": 529,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 240,
													"character": 2
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 528,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 239,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 250,
												"name": "UserDefinedValueTypeType"
											}
										},
										{
											"id": 530,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 241,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 432,
												"name": "BuiltInValueValue"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												531,
												529,
												528,
												530
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 238,
											"character": 17
										}
									]
								},
								{
									"id": 297,
									"name": "AbiResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A result for an ABI type"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 107,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 300,
												"name": "UintResult"
											},
											{
												"type": "reference",
												"id": 301,
												"name": "IntResult"
											},
											{
												"type": "reference",
												"id": 302,
												"name": "BoolResult"
											},
											{
												"type": "reference",
												"id": 299,
												"name": "BytesResult"
											},
											{
												"type": "reference",
												"id": 305,
												"name": "AddressResult"
											},
											{
												"type": "reference",
												"id": 307,
												"name": "FixedResult"
											},
											{
												"type": "reference",
												"id": 308,
												"name": "UfixedResult"
											},
											{
												"type": "reference",
												"id": 306,
												"name": "StringResult"
											},
											{
												"type": "reference",
												"id": 312,
												"name": "ArrayResult"
											},
											{
												"type": "reference",
												"id": 375,
												"name": "FunctionExternalResult"
											},
											{
												"type": "reference",
												"id": 341,
												"name": "TupleResult"
											}
										]
									}
								},
								{
									"id": 296,
									"name": "AbiValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A value that can go in the ABI"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 89,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 434,
												"name": "UintValue"
											},
											{
												"type": "reference",
												"id": 443,
												"name": "IntValue"
											},
											{
												"type": "reference",
												"id": 452,
												"name": "BoolValue"
											},
											{
												"type": "reference",
												"id": 433,
												"name": "BytesValue"
											},
											{
												"type": "reference",
												"id": 477,
												"name": "AddressValue"
											},
											{
												"type": "reference",
												"id": 500,
												"name": "FixedValue"
											},
											{
												"type": "reference",
												"id": 509,
												"name": "UfixedValue"
											},
											{
												"type": "reference",
												"id": 487,
												"name": "StringValue"
											},
											{
												"type": "reference",
												"id": 313,
												"name": "ArrayValue"
											},
											{
												"type": "reference",
												"id": 376,
												"name": "FunctionExternalValue"
											},
											{
												"type": "reference",
												"id": 342,
												"name": "TupleValue"
											}
										]
									}
								},
								{
									"id": 305,
									"name": "AddressResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An address value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 197,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 477,
												"name": "AddressValue"
											},
											{
												"type": "reference",
												"id": 601,
												"name": "Errors.AddressErrorResult"
											}
										]
									}
								},
								{
									"id": 312,
									"name": "ArrayResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An array value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 256,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 313,
												"name": "ArrayValue"
											},
											{
												"type": "reference",
												"id": 668,
												"name": "Errors.ArrayErrorResult"
											}
										]
									}
								},
								{
									"id": 302,
									"name": "BoolResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A boolean value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 172,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 452,
												"name": "BoolValue"
											},
											{
												"type": "reference",
												"id": 575,
												"name": "Errors.BoolErrorResult"
											}
										]
									}
								},
								{
									"id": 432,
									"name": "BuiltInValueValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 25,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 434,
												"name": "UintValue"
											},
											{
												"type": "reference",
												"id": 443,
												"name": "IntValue"
											},
											{
												"type": "reference",
												"id": 452,
												"name": "BoolValue"
											},
											{
												"type": "reference",
												"id": 460,
												"name": "BytesStaticValue"
											},
											{
												"type": "reference",
												"id": 477,
												"name": "AddressValue"
											},
											{
												"type": "reference",
												"id": 500,
												"name": "FixedValue"
											},
											{
												"type": "reference",
												"id": 509,
												"name": "UfixedValue"
											}
										]
									}
								},
								{
									"id": 304,
									"name": "BytesDynamicResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value or error (dynamic-length)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 188,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 469,
												"name": "BytesDynamicValue"
											},
											{
												"type": "reference",
												"id": 596,
												"name": "Errors.BytesDynamicErrorResult"
											}
										]
									}
								},
								{
									"id": 299,
									"name": "BytesResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value or error (static or dynamic)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 151,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 303,
												"name": "BytesStaticResult"
											},
											{
												"type": "reference",
												"id": 304,
												"name": "BytesDynamicResult"
											}
										]
									}
								},
								{
									"id": 303,
									"name": "BytesStaticResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value or error (static-length)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 179,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 460,
												"name": "BytesStaticValue"
											},
											{
												"type": "reference",
												"id": 587,
												"name": "Errors.BytesStaticErrorResult"
											}
										]
									}
								},
								{
									"id": 433,
									"name": "BytesValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value (static or dynamic)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 39,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 460,
												"name": "BytesStaticValue"
											},
											{
												"type": "reference",
												"id": 469,
												"name": "BytesDynamicValue"
											}
										]
									}
								},
								{
									"id": 311,
									"name": "ContractResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A contract value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 245,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 533,
												"name": "ContractValue"
											},
											{
												"type": "reference",
												"id": 659,
												"name": "Errors.ContractErrorResult"
											}
										]
									}
								},
								{
									"id": 540,
									"name": "ContractValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "There are two types -- one for contracts whose class we can identify, and one\nfor when we can't identify the class."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 265,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 541,
												"name": "ContractValueInfoKnown"
											},
											{
												"type": "reference",
												"id": 546,
												"name": "ContractValueInfoUnknown"
											}
										]
									}
								},
								{
									"id": 298,
									"name": "ElementaryResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An elementary value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 133,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 300,
												"name": "UintResult"
											},
											{
												"type": "reference",
												"id": 301,
												"name": "IntResult"
											},
											{
												"type": "reference",
												"id": 302,
												"name": "BoolResult"
											},
											{
												"type": "reference",
												"id": 299,
												"name": "BytesResult"
											},
											{
												"type": "reference",
												"id": 305,
												"name": "AddressResult"
											},
											{
												"type": "reference",
												"id": 306,
												"name": "StringResult"
											},
											{
												"type": "reference",
												"id": 307,
												"name": "FixedResult"
											},
											{
												"type": "reference",
												"id": 308,
												"name": "UfixedResult"
											},
											{
												"type": "reference",
												"id": 309,
												"name": "EnumResult"
											},
											{
												"type": "reference",
												"id": 310,
												"name": "UserDefinedValueTypeResult"
											},
											{
												"type": "reference",
												"id": 311,
												"name": "ContractResult"
											}
										]
									}
								},
								{
									"id": 431,
									"name": "ElementaryValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An elementary value"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 12,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 434,
												"name": "UintValue"
											},
											{
												"type": "reference",
												"id": 443,
												"name": "IntValue"
											},
											{
												"type": "reference",
												"id": 452,
												"name": "BoolValue"
											},
											{
												"type": "reference",
												"id": 433,
												"name": "BytesValue"
											},
											{
												"type": "reference",
												"id": 477,
												"name": "AddressValue"
											},
											{
												"type": "reference",
												"id": 487,
												"name": "StringValue"
											},
											{
												"type": "reference",
												"id": 500,
												"name": "FixedValue"
											},
											{
												"type": "reference",
												"id": 509,
												"name": "UfixedValue"
											},
											{
												"type": "reference",
												"id": 518,
												"name": "EnumValue"
											},
											{
												"type": "reference",
												"id": 527,
												"name": "UserDefinedValueTypeValue"
											},
											{
												"type": "reference",
												"id": 533,
												"name": "ContractValue"
											}
										]
									}
								},
								{
									"id": 309,
									"name": "EnumResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An enum value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 229,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 518,
												"name": "EnumValue"
											},
											{
												"type": "reference",
												"id": 633,
												"name": "Errors.EnumErrorResult"
											}
										]
									}
								},
								{
									"id": 307,
									"name": "FixedResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A signed fixed-point value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 211,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 500,
												"name": "FixedValue"
											},
											{
												"type": "reference",
												"id": 615,
												"name": "Errors.FixedErrorResult"
											}
										]
									}
								},
								{
									"id": 375,
									"name": "FunctionExternalResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An external function pointer value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 439,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 376,
												"name": "FunctionExternalValue"
											},
											{
												"type": "reference",
												"id": 698,
												"name": "Errors.FunctionExternalErrorResult"
											}
										]
									}
								},
								{
									"id": 383,
									"name": "FunctionExternalValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "External function values come in 3 types:\n1. known function of known class\n2. known class, but can't locate function\n3. can't determine class"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 465,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 384,
												"name": "FunctionExternalValueInfoKnown"
											},
											{
												"type": "reference",
												"id": 389,
												"name": "FunctionExternalValueInfoInvalid"
											},
											{
												"type": "reference",
												"id": 393,
												"name": "FunctionExternalValueInfoUnknown"
											}
										]
									}
								},
								{
									"id": 397,
									"name": "FunctionInternalResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An internal function pointer value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 523,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 398,
												"name": "FunctionInternalValue"
											},
											{
												"type": "reference",
												"id": 711,
												"name": "Errors.FunctionInternalErrorResult"
											}
										]
									}
								},
								{
									"id": 404,
									"name": "FunctionInternalValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Internal functions come in three types:\n1. An actual function,\n2. A default value,\n3. A special value to indicate that decoding internal functions isn't supported in this context."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 547,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 405,
												"name": "FunctionInternalValueInfoKnown"
											},
											{
												"type": "reference",
												"id": 414,
												"name": "FunctionInternalValueInfoException"
											},
											{
												"type": "reference",
												"id": 419,
												"name": "FunctionInternalValueInfoUnknown"
											}
										]
									}
								},
								{
									"id": 301,
									"name": "IntResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A signed integer value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 165,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 443,
												"name": "IntValue"
											},
											{
												"type": "reference",
												"id": 566,
												"name": "Errors.IntErrorResult"
											}
										]
									}
								},
								{
									"id": 351,
									"name": "MagicResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A magic variable's value (or error)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 365,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 352,
												"name": "MagicValue"
											},
											{
												"type": "reference",
												"id": 688,
												"name": "Errors.MagicErrorResult"
											}
										]
									}
								},
								{
									"id": 320,
									"name": "MappingResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A mapping value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 279,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 321,
												"name": "MappingValue"
											},
											{
												"type": "reference",
												"id": 673,
												"name": "Errors.MappingErrorResult"
											}
										]
									}
								},
								{
									"id": 424,
									"name": "OptionsResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An options value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 620,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 425,
												"name": "OptionsValue"
											},
											{
												"type": "reference",
												"id": 735,
												"name": "Errors.OptionsErrorResult"
											}
										]
									}
								},
								{
									"id": 294,
									"name": "Result",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "This is the overall Result type.  It may encode an actual value or an error."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 55,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 298,
												"name": "ElementaryResult"
											},
											{
												"type": "reference",
												"id": 312,
												"name": "ArrayResult"
											},
											{
												"type": "reference",
												"id": 320,
												"name": "MappingResult"
											},
											{
												"type": "reference",
												"id": 330,
												"name": "StructResult"
											},
											{
												"type": "reference",
												"id": 341,
												"name": "TupleResult"
											},
											{
												"type": "reference",
												"id": 351,
												"name": "MagicResult"
											},
											{
												"type": "reference",
												"id": 361,
												"name": "TypeResult"
											},
											{
												"type": "reference",
												"id": 375,
												"name": "FunctionExternalResult"
											},
											{
												"type": "reference",
												"id": 397,
												"name": "FunctionInternalResult"
											},
											{
												"type": "reference",
												"id": 424,
												"name": "OptionsResult"
											}
										]
									}
								},
								{
									"id": 306,
									"name": "StringResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A string value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 204,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 487,
												"name": "StringValue"
											},
											{
												"type": "reference",
												"id": 610,
												"name": "Errors.StringErrorResult"
											}
										]
									}
								},
								{
									"id": 493,
									"name": "StringValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "These come in two types: valid strings and malformed strings."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 160,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 494,
												"name": "StringValueInfoValid"
											},
											{
												"type": "reference",
												"id": 497,
												"name": "StringValueInfoMalformed"
											}
										]
									}
								},
								{
									"id": 330,
									"name": "StructResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A struct value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 308,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 331,
												"name": "StructValue"
											},
											{
												"type": "reference",
												"id": 678,
												"name": "Errors.StructErrorResult"
											}
										]
									}
								},
								{
									"id": 341,
									"name": "TupleResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A tuple value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 341,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 342,
												"name": "TupleValue"
											},
											{
												"type": "reference",
												"id": 683,
												"name": "Errors.TupleErrorResult"
											}
										]
									}
								},
								{
									"id": 361,
									"name": "TypeResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A type's value (or error); currently only allows contract types and\nenum types"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 388,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 362,
												"name": "TypeValue"
											},
											{
												"type": "reference",
												"id": 693,
												"name": "Errors.TypeErrorResult"
											}
										]
									}
								},
								{
									"id": 362,
									"name": "TypeValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A type's value -- for now, we consider the value of a contract type to\nconsist of the values of its non-inherited state variables in the current\ncontext, and the value of an enum type to be an array of its possible options\n(as Values).  May contain errors."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 398,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 363,
												"name": "TypeValueContract"
											},
											{
												"type": "reference",
												"id": 369,
												"name": "TypeValueEnum"
											}
										]
									}
								},
								{
									"id": 308,
									"name": "UfixedResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An unsigned fixed-point value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 218,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 509,
												"name": "UfixedValue"
											},
											{
												"type": "reference",
												"id": 619,
												"name": "Errors.UfixedErrorResult"
											}
										]
									}
								},
								{
									"id": 300,
									"name": "UintResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An unsigned integer value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 158,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 434,
												"name": "UintValue"
											},
											{
												"type": "reference",
												"id": 557,
												"name": "Errors.UintErrorResult"
											}
										]
									}
								},
								{
									"id": 310,
									"name": "UserDefinedValueTypeResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A UDVT value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 236,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 527,
												"name": "UserDefinedValueTypeValue"
											},
											{
												"type": "reference",
												"id": 651,
												"name": "Errors.UserDefinedValueTypeErrorResult"
											}
										]
									}
								},
								{
									"id": 295,
									"name": "Value",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An actual value, not an error (although if a container type it may contain errors!)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 72,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 431,
												"name": "ElementaryValue"
											},
											{
												"type": "reference",
												"id": 313,
												"name": "ArrayValue"
											},
											{
												"type": "reference",
												"id": 321,
												"name": "MappingValue"
											},
											{
												"type": "reference",
												"id": 331,
												"name": "StructValue"
											},
											{
												"type": "reference",
												"id": 342,
												"name": "TupleValue"
											},
											{
												"type": "reference",
												"id": 352,
												"name": "MagicValue"
											},
											{
												"type": "reference",
												"id": 362,
												"name": "TypeValue"
											},
											{
												"type": "reference",
												"id": 376,
												"name": "FunctionExternalValue"
											},
											{
												"type": "reference",
												"id": 398,
												"name": "FunctionInternalValue"
											},
											{
												"type": "reference",
												"id": 425,
												"name": "OptionsValue"
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										477,
										313,
										452,
										469,
										460,
										533,
										541,
										546,
										518,
										500,
										376,
										389,
										384,
										393,
										398,
										414,
										405,
										419,
										443,
										327,
										352,
										321,
										338,
										348,
										425,
										487,
										497,
										494,
										331,
										342,
										363,
										369,
										509,
										434,
										527
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												477,
												452,
												469,
												460,
												500,
												443,
												487,
												497,
												494,
												509,
												434
											]
										},
										{
											"title": "Container types",
											"children": [
												313,
												321,
												331,
												342
											]
										},
										{
											"title": "Function types",
											"children": [
												376,
												389,
												384,
												393,
												398,
												414,
												405,
												419
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												352,
												363,
												369
											]
										},
										{
											"title": "Special types (encoder-only)",
											"children": [
												425
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												533,
												541,
												546,
												518,
												527
											]
										},
										{
											"title": "Other",
											"children": [
												327,
												338,
												348
											]
										}
									]
								},
								{
									"title": "Type Aliases",
									"kind": 4194304,
									"children": [
										297,
										296,
										305,
										312,
										302,
										432,
										304,
										299,
										303,
										433,
										311,
										540,
										298,
										431,
										309,
										307,
										375,
										383,
										397,
										404,
										301,
										351,
										320,
										424,
										294,
										306,
										493,
										330,
										341,
										361,
										362,
										308,
										300,
										310,
										295
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												297,
												296,
												298,
												431,
												294,
												295
											]
										},
										{
											"title": "Elementary types",
											"children": [
												305,
												302,
												304,
												299,
												303,
												433,
												307,
												301,
												306,
												493,
												308,
												300
											]
										},
										{
											"title": "Container types",
											"children": [
												312,
												320,
												330,
												341
											]
										},
										{
											"title": "Function types",
											"children": [
												375,
												383,
												397,
												404
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												351,
												361,
												362
											]
										},
										{
											"title": "Special types (encoder-only)",
											"children": [
												424
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												311,
												540,
												309,
												310
											]
										},
										{
											"title": "Other",
											"children": [
												432
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/values.ts",
									"line": 8,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								550,
								80,
								789,
								293
							],
							"categories": [
								{
									"title": "Main Format",
									"children": [
										550,
										80,
										293
									]
								},
								{
									"title": "Other",
									"children": [
										789
									]
								}
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/format/index.ts",
							"line": 183,
							"character": 0
						}
					]
				},
				{
					"id": 1347,
					"name": "MappingKey",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "For encoding mapping keys"
					},
					"children": [
						{
							"id": 1348,
							"name": "Encode",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1349,
									"name": "encodeMappingKey",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/mapping-key/encode/index.ts",
											"line": 16,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1350,
											"name": "encodeMappingKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1351,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 431,
														"name": "ElementaryValue"
													}
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										}
									]
								},
								{
									"id": 1352,
									"name": "mappingKeyAsHex",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/mapping-key/encode/index.ts",
											"line": 34,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1353,
											"name": "mappingKeyAsHex",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1354,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 431,
														"name": "ElementaryValue"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1349,
										1352
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1349,
												1352
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/mapping-key/encode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								1348
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/mapping-key/index.ts",
							"line": 10,
							"character": 0
						}
					]
				},
				{
					"id": 1355,
					"name": "Memory",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "For allocation and decoding of memory data"
					},
					"children": [
						{
							"id": 1356,
							"name": "Allocate",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1366,
									"name": "MemoryAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1367,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 16,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1368,
													"name": "MemoryMemberAllocation"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1367
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 15,
											"character": 17
										}
									]
								},
								{
									"id": 1363,
									"name": "MemoryAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 11,
											"character": 17
										}
									],
									"indexSignature": {
										"id": 1364,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1365,
												"name": "id",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1366,
											"name": "MemoryAllocation"
										}
									}
								},
								{
									"id": 1368,
									"name": "MemoryMemberAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1369,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 20,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1371,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 22,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1963,
												"name": "MemoryPointer"
											}
										},
										{
											"id": 1370,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 21,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 104,
												"name": "Type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1369,
												1371,
												1370
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 19,
											"character": 17
										}
									]
								},
								{
									"id": 1357,
									"name": "getMemoryAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/index.ts",
											"line": 14,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1358,
											"name": "getMemoryAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1359,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 284,
														"name": "TypesById"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1363,
												"name": "MemoryAllocations"
											}
										}
									]
								},
								{
									"id": 1360,
									"name": "isSkippedInMemoryStructs",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/index.ts",
											"line": 26,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1361,
											"name": "isSkippedInMemoryStructs",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1362,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1366,
										1363,
										1368
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1357,
										1360
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/memory/allocate/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1372,
							"name": "Decode",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1373,
									"name": "decodeMemory",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/memory/decode/index.ts",
											"line": 22,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1374,
											"name": "decodeMemory",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1375,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												},
												{
													"id": 1376,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1963,
														"name": "MemoryPointer"
													}
												},
												{
													"id": 1377,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												},
												{
													"id": 1378,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "{}"
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 294,
														"name": "Format.Values.Result"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1379,
									"name": "decodeMemoryReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/memory/decode/index.ts",
											"line": 67,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1380,
											"name": "decodeMemoryReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1381,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 283,
														"name": "ReferenceType"
													}
												},
												{
													"id": 1382,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1953,
														"name": "DataPointer"
													}
												},
												{
													"id": 1383,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												},
												{
													"id": 1384,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "{}"
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 294,
														"name": "Format.Values.Result"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1373,
										1379
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/memory/decode/index.ts",
									"line": 7,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								1356,
								1372
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/memory/index.ts",
							"line": 9,
							"character": 0
						}
					]
				},
				{
					"id": 1952,
					"name": "Pointer",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1967,
							"name": "CalldataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1970,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 38,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1968,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 36,
											"character": 2
										}
									],
									"type": {
										"type": "literal",
										"value": "calldata"
									}
								},
								{
									"id": 1969,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 37,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1970,
										1968,
										1969
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 35,
									"character": 17
								}
							]
						},
						{
							"id": 1986,
							"name": "CodePointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1989,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 67,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1987,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 65,
											"character": 2
										}
									],
									"type": {
										"type": "literal",
										"value": "code"
									}
								},
								{
									"id": 1988,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 66,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1989,
										1987,
										1988
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 64,
									"character": 17
								}
							]
						},
						{
							"id": 1996,
							"name": "ConstantDefinitionPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1998,
									"name": "definition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 82,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1674,
										"name": "AstNode"
									}
								},
								{
									"id": 1997,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 81,
											"character": 2
										}
									],
									"type": {
										"type": "literal",
										"value": "definition"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1998,
										1997
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 80,
									"character": 17
								}
							]
						},
						{
							"id": 1975,
							"name": "EventDataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1978,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 50,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1976,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 48,
											"character": 2
										}
									],
									"type": {
										"type": "literal",
										"value": "eventdata"
									}
								},
								{
									"id": 1977,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 49,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1978,
										1976,
										1977
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 47,
									"character": 17
								}
							]
						},
						{
							"id": 1979,
							"name": "EventTopicPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1980,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 54,
											"character": 2
										}
									],
									"type": {
										"type": "literal",
										"value": "eventtopic"
									}
								},
								{
									"id": 1981,
									"name": "topic",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 55,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1980,
										1981
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 53,
									"character": 17
								}
							]
						},
						{
							"id": 1982,
							"name": "GenericAbiPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1985,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 61,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1983,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 59,
											"character": 2
										}
									],
									"type": {
										"type": "literal",
										"value": "abi"
									}
								},
								{
									"id": 1984,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 60,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1985,
										1983,
										1984
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 58,
									"character": 17
								}
							]
						},
						{
							"id": 1963,
							"name": "MemoryPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1966,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 32,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1964,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 30,
											"character": 2
										}
									],
									"type": {
										"type": "literal",
										"value": "memory"
									}
								},
								{
									"id": 1965,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 31,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1966,
										1964,
										1965
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 29,
									"character": 17
								}
							]
						},
						{
							"id": 1971,
							"name": "ReturndataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1974,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 44,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1972,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 42,
											"character": 2
										}
									],
									"type": {
										"type": "literal",
										"value": "returndata"
									}
								},
								{
									"id": 1973,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 43,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1974,
										1972,
										1973
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 41,
									"character": 17
								}
							]
						},
						{
							"id": 1999,
							"name": "SpecialPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2000,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 86,
											"character": 2
										}
									],
									"type": {
										"type": "literal",
										"value": "special"
									}
								},
								{
									"id": 2001,
									"name": "special",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 87,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2000,
										2001
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 85,
									"character": 17
								}
							]
						},
						{
							"id": 1993,
							"name": "StackLiteralPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1995,
									"name": "literal",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 77,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "Uint8Array",
										"package": "typescript",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1994,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 76,
											"character": 2
										}
									],
									"type": {
										"type": "literal",
										"value": "stackliteral"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1995,
										1994
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 75,
									"character": 17
								}
							]
						},
						{
							"id": 1959,
							"name": "StackPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1961,
									"name": "from",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 25,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1960,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 24,
											"character": 2
										}
									],
									"type": {
										"type": "literal",
										"value": "stack"
									}
								},
								{
									"id": 1962,
									"name": "to",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 26,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1961,
										1960,
										1962
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 23,
									"character": 17
								}
							]
						},
						{
							"id": 1990,
							"name": "StoragePointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1991,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 71,
											"character": 2
										}
									],
									"type": {
										"type": "literal",
										"value": "storage"
									}
								},
								{
									"id": 1992,
									"name": "range",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 72,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1523,
										"name": "Range"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1991,
										1992
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 70,
									"character": 17
								}
							]
						},
						{
							"id": 2002,
							"name": "UnreadablePointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2003,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 91,
											"character": 2
										}
									],
									"type": {
										"type": "literal",
										"value": "nowhere"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2003
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 90,
									"character": 17
								}
							]
						},
						{
							"id": 1956,
							"name": "AbiDataPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 16,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1967,
										"name": "CalldataPointer"
									},
									{
										"type": "reference",
										"id": 1971,
										"name": "ReturndataPointer"
									},
									{
										"type": "reference",
										"id": 1975,
										"name": "EventDataPointer"
									}
								]
							}
						},
						{
							"id": 1955,
							"name": "AbiPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 15,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1956,
										"name": "AbiDataPointer"
									},
									{
										"type": "reference",
										"id": 1982,
										"name": "GenericAbiPointer"
									}
								]
							}
						},
						{
							"id": 1957,
							"name": "BytesPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 20,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1963,
										"name": "MemoryPointer"
									},
									{
										"type": "reference",
										"id": 1956,
										"name": "AbiDataPointer"
									},
									{
										"type": "reference",
										"id": 1986,
										"name": "CodePointer"
									}
								]
							}
						},
						{
							"id": 1958,
							"name": "CodeFormPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 21,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1986,
										"name": "CodePointer"
									},
									{
										"type": "reference",
										"id": 2002,
										"name": "UnreadablePointer"
									}
								]
							}
						},
						{
							"id": 1953,
							"name": "DataPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 4,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1954,
										"name": "StackFormPointer"
									},
									{
										"type": "reference",
										"id": 1963,
										"name": "MemoryPointer"
									},
									{
										"type": "reference",
										"id": 1990,
										"name": "StoragePointer"
									},
									{
										"type": "reference",
										"id": 1956,
										"name": "AbiDataPointer"
									},
									{
										"type": "reference",
										"id": 1958,
										"name": "CodeFormPointer"
									},
									{
										"type": "reference",
										"id": 1996,
										"name": "ConstantDefinitionPointer"
									},
									{
										"type": "reference",
										"id": 1999,
										"name": "SpecialPointer"
									},
									{
										"type": "reference",
										"id": 1979,
										"name": "EventTopicPointer"
									}
								]
							}
						},
						{
							"id": 1954,
							"name": "StackFormPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 14,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1959,
										"name": "StackPointer"
									},
									{
										"type": "reference",
										"id": 1993,
										"name": "StackLiteralPointer"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1967,
								1986,
								1996,
								1975,
								1979,
								1982,
								1963,
								1971,
								1999,
								1993,
								1959,
								1990,
								2002
							]
						},
						{
							"title": "Type Aliases",
							"kind": 4194304,
							"children": [
								1956,
								1955,
								1957,
								1958,
								1953,
								1954
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/pointer/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1385,
					"name": "Special",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "For decoding of special/magic variables"
					},
					"children": [
						{
							"id": 1386,
							"name": "Decode",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1392,
									"name": "decodeMagic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 24,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1393,
											"name": "decodeMagic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1394,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 266,
														"name": "MagicType"
													}
												},
												{
													"id": 1395,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1999,
														"name": "SpecialPointer"
													}
												},
												{
													"id": 1396,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 351,
														"name": "Format.Values.MagicResult"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1387,
									"name": "decodeSpecial",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 12,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1388,
											"name": "decodeSpecial",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1389,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												},
												{
													"id": 1390,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1999,
														"name": "SpecialPointer"
													}
												},
												{
													"id": 1391,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 294,
														"name": "Format.Values.Result"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1392,
										1387
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/special/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1397,
							"name": "Read",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1398,
									"name": "readSpecial",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/special/read/index.ts",
											"line": 4,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1399,
											"name": "readSpecial",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1400,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1999,
														"name": "SpecialPointer"
													}
												},
												{
													"id": 1401,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2029,
														"name": "EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1398
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/special/read/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								1386,
								1397
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/special/index.ts",
							"line": 10,
							"character": 0
						}
					]
				},
				{
					"id": 1402,
					"name": "Stack",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "For decoding stack variables"
					},
					"children": [
						{
							"id": 1403,
							"name": "Decode",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1409,
									"name": "decodeLiteral",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/stack/decode/index.ts",
											"line": 40,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1410,
											"name": "decodeLiteral",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1411,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												},
												{
													"id": 1412,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1993,
														"name": "StackLiteralPointer"
													}
												},
												{
													"id": 1413,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 294,
														"name": "Format.Values.Result"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1404,
									"name": "decodeStack",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/stack/decode/index.ts",
											"line": 22,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1405,
											"name": "decodeStack",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1406,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												},
												{
													"id": 1407,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1959,
														"name": "StackPointer"
													}
												},
												{
													"id": 1408,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 294,
														"name": "Format.Values.Result"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1409,
										1404
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/stack/decode/index.ts",
									"line": 7,
									"character": 0
								}
							]
						},
						{
							"id": 1414,
							"name": "Read",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1415,
									"name": "readStack",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/stack/read/index.ts",
											"line": 8,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1416,
											"name": "readStack",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1417,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1959,
														"name": "StackPointer"
													}
												},
												{
													"id": 1418,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2029,
														"name": "EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										}
									]
								},
								{
									"id": 1419,
									"name": "readStackLiteral",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/stack/read/index.ts",
											"line": 35,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1420,
											"name": "readStackLiteral",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1421,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1993,
														"name": "StackLiteralPointer"
													}
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1415,
										1419
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/stack/read/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								1403,
								1414
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/stack/index.ts",
							"line": 9,
							"character": 0
						}
					]
				},
				{
					"id": 1422,
					"name": "Storage",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "For allocation and decoding of storage variables"
					},
					"children": [
						{
							"id": 1439,
							"name": "Allocate",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1482,
									"name": "UnknownBaseContractIdError",
									"kind": 128,
									"kindString": "Class",
									"flags": {},
									"children": [
										{
											"id": 1483,
											"name": "constructor",
											"kind": 512,
											"kindString": "Constructor",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 40,
													"character": 2
												}
											],
											"signatures": [
												{
													"id": 1484,
													"name": "new UnknownBaseContractIdError",
													"kind": 16384,
													"kindString": "Constructor signature",
													"flags": {},
													"parameters": [
														{
															"id": 1485,
															"name": "derivedId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1486,
															"name": "derivedName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1487,
															"name": "derivedKind",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1488,
															"name": "baseId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 1482,
														"name": "UnknownBaseContractIdError"
													},
													"overwrites": {
														"type": "reference",
														"name": "Error.constructor"
													}
												}
											],
											"overwrites": {
												"type": "reference",
												"name": "Error.constructor"
											}
										},
										{
											"id": 1492,
											"name": "baseId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 39,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1489,
											"name": "derivedId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 36,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1491,
											"name": "derivedKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 38,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1490,
											"name": "derivedName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 37,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Constructors",
											"kind": 512,
											"children": [
												1483
											]
										},
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1492,
												1489,
												1491,
												1490
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 35,
											"character": 13
										}
									],
									"extendedTypes": [
										{
											"type": "reference",
											"qualifiedName": "Error",
											"package": "typescript",
											"name": "Error"
										}
									]
								},
								{
									"id": 1469,
									"name": "StateAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1470,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 35,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1477,
													"name": "StateVariableAllocation"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1470
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 34,
											"character": 17
										}
									]
								},
								{
									"id": 1471,
									"name": "StateAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 26,
											"character": 17
										}
									],
									"indexSignature": {
										"id": 1472,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1473,
												"name": "compilationId",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reflection",
											"declaration": {
												"id": 1474,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/storage/allocate/types.ts",
														"line": 27,
														"character": 27
													}
												],
												"indexSignature": {
													"id": 1475,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1476,
															"name": "id",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 1469,
														"name": "StateAllocation"
													}
												}
											}
										}
									}
								},
								{
									"id": 1477,
									"name": "StateVariableAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1480,
											"name": "compilationId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 42,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1479,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 41,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1674,
												"name": "AstNode"
											}
										},
										{
											"id": 1478,
											"name": "definition",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 40,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1674,
												"name": "AstNode"
											}
										},
										{
											"id": 1481,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 43,
													"character": 2
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 1990,
														"name": "StoragePointer"
													},
													{
														"type": "reference",
														"id": 1958,
														"name": "CodeFormPointer"
													},
													{
														"type": "reference",
														"id": 1996,
														"name": "ConstantDefinitionPointer"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1480,
												1479,
												1478,
												1481
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 39,
											"character": 17
										}
									]
								},
								{
									"id": 1459,
									"name": "StorageAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1461,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 14,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1465,
													"name": "StorageMemberAllocation"
												}
											}
										},
										{
											"id": 1460,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 13,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1518,
												"name": "StorageLength"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1461,
												1460
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 12,
											"character": 17
										}
									]
								},
								{
									"id": 1462,
									"name": "StorageAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 7,
											"character": 17
										}
									],
									"indexSignature": {
										"id": 1463,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1464,
												"name": "id",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1459,
											"name": "StorageAllocation"
										}
									}
								},
								{
									"id": 1465,
									"name": "StorageMemberAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1466,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 19,
													"character": 2
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1468,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 21,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1990,
												"name": "StoragePointer"
											}
										},
										{
											"id": 1467,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 20,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 104,
												"name": "Type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1466,
												1468,
												1467
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 18,
											"character": 17
										}
									]
								},
								{
									"id": 1443,
									"name": "getStateAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 100,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1444,
											"name": "getStateAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "This function gets allocations for the state variables of the contracts;\nthis is distinct from getStorageAllocations, which gets allocations for\nstorage structs.",
												"text": "While mostly state variables are kept in storage, constant ones are not.\nAnd immutable ones, once those are introduced, will be kept in code!\n(But those don't exist yet so this function doesn't handle them yet.)\n"
											},
											"parameters": [
												{
													"id": 1445,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1223,
															"name": "ContractAllocationInfo"
														}
													}
												},
												{
													"id": 1446,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1447,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": {
																"id": 1448,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 1449,
																		"name": "compilationId",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "reference",
																	"id": 1722,
																	"name": "Ast.AstNodes"
																}
															}
														}
													}
												},
												{
													"id": 1450,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 284,
														"name": "TypesById"
													}
												},
												{
													"id": 1451,
													"name": "storageAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1462,
														"name": "StorageAllocations"
													}
												},
												{
													"id": 1452,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1471,
														"name": "StateAllocations"
													},
													"defaultValue": "{}"
												}
											],
											"type": {
												"type": "reference",
												"id": 1471,
												"name": "StateAllocations"
											}
										}
									]
								},
								{
									"id": 1440,
									"name": "getStorageAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 63,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1441,
											"name": "getStorageAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1442,
													"name": "userDefinedTypesByCompilation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 287,
														"name": "TypesByCompilationAndId"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1462,
												"name": "StorageAllocations"
											}
										}
									]
								},
								{
									"id": 1453,
									"name": "storageSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 445,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1454,
											"name": "storageSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1455,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												},
												{
													"id": 1456,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 284,
														"name": "TypesById"
													}
												},
												{
													"id": 1457,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1462,
														"name": "StorageAllocations"
													}
												},
												{
													"id": 1458,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1743,
														"name": "CompilerVersion"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1518,
												"name": "Storage.StorageLength"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Classes",
									"kind": 128,
									"children": [
										1482
									]
								},
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1469,
										1471,
										1477,
										1459,
										1462,
										1465
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1443,
										1440,
										1453
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/allocate/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1493,
							"name": "Decode",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1494,
									"name": "decodeStorage",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 24,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1495,
											"name": "decodeStorage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1496,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												},
												{
													"id": 1497,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1990,
														"name": "StoragePointer"
													}
												},
												{
													"id": 1498,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 294,
														"name": "Format.Values.Result"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1504,
									"name": "decodeStorageReference",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 90,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1505,
											"name": "decodeStorageReference",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1506,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 283,
														"name": "ReferenceType"
													}
												},
												{
													"id": 1507,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1990,
														"name": "StoragePointer"
													}
												},
												{
													"id": 1508,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 294,
														"name": "Format.Values.Result"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1499,
									"name": "decodeStorageReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 39,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1500,
											"name": "decodeStorageReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1501,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 283,
														"name": "ReferenceType"
													}
												},
												{
													"id": 1502,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1953,
														"name": "DataPointer"
													}
												},
												{
													"id": 1503,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 294,
														"name": "Format.Values.Result"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1494,
										1504,
										1499
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/decode/index.ts",
									"line": 7,
									"character": 0
								}
							]
						},
						{
							"id": 1509,
							"name": "Read",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1510,
									"name": "readSlot",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/read/index.ts",
											"line": 19,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1511,
											"name": "readSlot",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1512,
													"name": "storage",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2042,
														"name": "WordMapping"
													}
												},
												{
													"id": 1513,
													"name": "slot",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1530,
														"name": "Slot"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1514,
									"name": "readStorage",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/read/index.ts",
											"line": 50,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1515,
											"name": "readStorage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1516,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1990,
														"name": "StoragePointer"
													}
												},
												{
													"id": 1517,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2029,
														"name": "EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1510,
										1514
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/read/index.ts",
									"line": 7,
									"character": 0
								}
							]
						},
						{
							"id": 1423,
							"name": "Utils",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1435,
									"name": "equalSlots",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 50,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1436,
											"name": "equalSlots",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1437,
													"name": "slot1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1530,
														"name": "Slot"
													}
												},
												{
													"id": 1438,
													"name": "slot2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1530,
														"name": "Slot"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1424,
									"name": "isWordsLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 9,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1425,
											"name": "isWordsLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1426,
													"name": "size",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1518,
														"name": "StorageLength"
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "size",
												"asserts": false,
												"targetType": {
													"type": "reflection",
													"declaration": {
														"id": 1427,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {},
														"children": [
															{
																"id": 1428,
																"name": "words",
																"kind": 1024,
																"kindString": "Property",
																"flags": {},
																"sources": [
																	{
																		"fileName": "codec/lib/storage/utils.ts",
																		"line": 9,
																		"character": 62
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "number"
																}
															}
														],
														"groups": [
															{
																"title": "Properties",
																"kind": 1024,
																"children": [
																	1428
																]
															}
														]
													}
												}
											}
										}
									]
								},
								{
									"id": 1432,
									"name": "slotAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 30,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1433,
											"name": "slotAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "convert a slot to a word corresponding to actual storage address",
												"text": "if `slot` is an array, return hash of array values.\nif `slot` array is nested, recurse on sub-arrays\n"
											},
											"parameters": [
												{
													"id": 1434,
													"name": "slot",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "number or possibly-nested array of numbers\n"
													},
													"type": {
														"type": "reference",
														"id": 1530,
														"name": "Slot"
													}
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "BN",
												"package": "@types/bn.js",
												"name": "BN"
											}
										}
									]
								},
								{
									"id": 1429,
									"name": "storageLengthToBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 13,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1430,
											"name": "storageLengthToBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1431,
													"name": "size",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1518,
														"name": "StorageLength"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1435,
										1424,
										1432,
										1429
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1523,
							"name": "Range",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1524,
									"name": "from",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 8,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1527,
										"name": "StoragePosition"
									}
								},
								{
									"id": 1526,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 10,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1525,
									"name": "to",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 9,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1527,
										"name": "StoragePosition"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1524,
										1526,
										1525
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/types.ts",
									"line": 7,
									"character": 17
								}
							]
						},
						{
							"id": 1530,
							"name": "Slot",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1533,
									"name": "hashPath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 21,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1531,
									"name": "key",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 19,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 431,
										"name": "ElementaryValue"
									}
								},
								{
									"id": 1534,
									"name": "offset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 22,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "BN",
										"package": "@types/bn.js",
										"name": "BN"
									}
								},
								{
									"id": 1532,
									"name": "path",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 20,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1530,
										"name": "Slot"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1533,
										1531,
										1534,
										1532
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/types.ts",
									"line": 18,
									"character": 17
								}
							]
						},
						{
							"id": 1527,
							"name": "StoragePosition",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1529,
									"name": "index",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 15,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1528,
									"name": "slot",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 14,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1530,
										"name": "Slot"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1529,
										1528
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/types.ts",
									"line": 13,
									"character": 17
								}
							]
						},
						{
							"id": 1518,
							"name": "StorageLength",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/storage/types.ts",
									"line": 5,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1519,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1520,
													"name": "bytes",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/storage/types.ts",
															"line": 5,
															"character": 30
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1520
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/storage/types.ts",
													"line": 5,
													"character": 28
												}
											]
										}
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1521,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1522,
													"name": "words",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/storage/types.ts",
															"line": 5,
															"character": 50
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1522
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/storage/types.ts",
													"line": 5,
													"character": 48
												}
											]
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								1439,
								1493,
								1509,
								1423
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1523,
								1530,
								1527
							]
						},
						{
							"title": "Type Aliases",
							"kind": 4194304,
							"children": [
								1518
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/storage/index.ts",
							"line": 9,
							"character": 0
						}
					]
				},
				{
					"id": 1330,
					"name": "Topic",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "For decoding of event topics"
					},
					"children": [
						{
							"id": 1331,
							"name": "Decode",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1332,
									"name": "decodeTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/topic/decode/index.ts",
											"line": 12,
											"character": 17
										}
									],
									"signatures": [
										{
											"id": 1333,
											"name": "decodeTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1334,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												},
												{
													"id": 1335,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1979,
														"name": "EventTopicPointer"
													}
												},
												{
													"id": 1336,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2045,
														"name": "EvmInfo"
													}
												},
												{
													"id": 1337,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "{}"
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1011,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 294,
														"name": "Format.Values.Result"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"qualifiedName": "Uint8Array",
																"package": "typescript",
																"name": "Uint8Array"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1332
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1338,
							"name": "Encode",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1339,
									"name": "encodeTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/topic/encode/index.ts",
											"line": 14,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1340,
											"name": "encodeTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Encodes for event topics (indexed parameters).\nWarning: This function is not fully implemented yet!"
											},
											"parameters": [
												{
													"id": 1341,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 294,
														"name": "Result"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "Uint8Array",
														"package": "typescript",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1339
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1339
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/encode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1342,
							"name": "Read",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1343,
									"name": "readTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/topic/read/index.ts",
											"line": 4,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 1344,
											"name": "readTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1345,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1979,
														"name": "EventTopicPointer"
													}
												},
												{
													"id": 1346,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2029,
														"name": "EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1343
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/read/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								1331,
								1338,
								1342
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/topic/index.ts",
							"line": 9,
							"character": 0
						}
					]
				},
				{
					"id": 2157,
					"name": "Wrap",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 2212,
							"name": "Messages",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 2247,
									"name": "badEnumMessage",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 19,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Input string was neither numeric nor a valid enum value\""
								},
								{
									"id": 2250,
									"name": "checksumFailedMessage",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 23,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Address checksum failed (use all lowercase or all uppercase to circumvent)\""
								},
								{
									"id": 2242,
									"name": "errorResultMessage",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 12,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Input is a wrapped result representing an error rather than a value\""
								},
								{
									"id": 2251,
									"name": "invalidUtf16Message",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 25,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Input string was not valid UTF-16\""
								},
								{
									"id": 2252,
									"name": "looseModeOnlyMessage",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 26,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Numeric input for bytes is only allowed in loose mode and only for dynamic-length bytestrings\""
								},
								{
									"id": 2253,
									"name": "negativeBytesMessage",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 27,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Input for bytes cannot be negative\""
								},
								{
									"id": 2244,
									"name": "nonIntegerMessage",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 16,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Input numeric value was not an integer\""
								},
								{
									"id": 2245,
									"name": "nonNumericMessage",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 17,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Input string was not numeric\""
								},
								{
									"id": 2246,
									"name": "nonSafeMessage",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 18,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Input number is not a Javascript safe integer\""
								},
								{
									"id": 2243,
									"name": "notAStringMessage",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 14,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Input was not a string, type/value pair, or wrapped or boxed string\""
								},
								{
									"id": 2249,
									"name": "outOfRangeEnumMessage",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 22,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Input is outside the range of this enum type\""
								},
								{
									"id": 2248,
									"name": "outOfRangeMessage",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 21,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"Input is outside the range of this numeric type\""
								},
								{
									"id": 2231,
									"name": "notABytestringMessage",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 43,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 2232,
											"name": "notABytestringMessage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2233,
													"name": "what",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 2223,
									"name": "overlongMessage",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 37,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 2224,
											"name": "overlongMessage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2225,
													"name": "expected",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2226,
													"name": "got",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 2220,
									"name": "specifiedTypeMessage",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 34,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 2221,
											"name": "specifiedTypeMessage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2222,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 2227,
									"name": "tooPreciseMessage",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 40,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 2228,
											"name": "tooPreciseMessage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2229,
													"name": "expected",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2230,
													"name": "got",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 2239,
									"name": "unrecognizedNumberMessage",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 54,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 2240,
											"name": "unrecognizedNumberMessage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2241,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 2304,
																"name": "IntegerOrEnumType"
															},
															{
																"type": "reference",
																"id": 2305,
																"name": "DecimalType"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 2217,
									"name": "wrappedTypeMessage",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 29,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 2218,
											"name": "wrappedTypeMessage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2219,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 2213,
									"name": "wrongArrayLengthMessage",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 8,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 2214,
											"name": "wrongArrayLengthMessage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2215,
													"name": "expected",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "reference",
																"qualifiedName": "BN",
																"package": "@types/bn.js",
																"name": "BN"
															}
														]
													}
												},
												{
													"id": 2216,
													"name": "got",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 2234,
									"name": "wrongLengthMessage",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/messages.ts",
											"line": 46,
											"character": 16
										}
									],
									"signatures": [
										{
											"id": 2235,
											"name": "wrongLengthMessage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2236,
													"name": "what",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 2237,
													"name": "expected",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2238,
													"name": "got",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										2247,
										2250,
										2242,
										2251,
										2252,
										2253,
										2244,
										2245,
										2246,
										2243,
										2249,
										2248
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2231,
										2223,
										2220,
										2227,
										2239,
										2217,
										2213,
										2234
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/messages.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 2200,
							"name": "BadResponseTypeError",
							"kind": 128,
							"kindString": "Class",
							"flags": {},
							"children": [
								{
									"id": 2201,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 101,
											"character": 2
										}
									],
									"signatures": [
										{
											"id": 2202,
											"name": "new BadResponseTypeError",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 2203,
													"name": "request",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1024,
														"name": "WrapRequest"
													}
												},
												{
													"id": 2204,
													"name": "response",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1034,
														"name": "WrapResponse"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 2200,
												"name": "BadResponseTypeError"
											},
											"overwrites": {
												"type": "reference",
												"name": "Error.constructor"
											}
										}
									],
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								},
								{
									"id": 2205,
									"name": "request",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 98,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1024,
										"name": "WrapRequest"
									}
								},
								{
									"id": 2206,
									"name": "response",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 99,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 1034,
										"name": "WrapResponse"
									}
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										2201
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2205,
										2206
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/errors.ts",
									"line": 97,
									"character": 13
								}
							],
							"extendedTypes": [
								{
									"type": "reference",
									"qualifiedName": "Error",
									"package": "typescript",
									"name": "Error"
								}
							]
						},
						{
							"id": 2173,
							"name": "NoOverloadsMatchedError",
							"kind": 128,
							"kindString": "Class",
							"flags": {},
							"comment": {
								"shortText": "This error indicates that no overloads matched when performing\noverload resolution.  If there was only one plausible match,\na [[TypeMismatchError]] will be thrown instead."
							},
							"children": [
								{
									"id": 2174,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 15,
											"character": 2
										}
									],
									"signatures": [
										{
											"id": 2175,
											"name": "new NoOverloadsMatchedError",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 2176,
													"name": "methods",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 2258,
															"name": "Method"
														}
													}
												},
												{
													"id": 2177,
													"name": "inputs",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												},
												{
													"id": 2178,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 284,
														"name": "TypesById"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 2173,
												"name": "NoOverloadsMatchedError"
											},
											"overwrites": {
												"type": "reference",
												"name": "Error.constructor"
											}
										}
									],
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								},
								{
									"id": 2180,
									"name": "inputs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 13,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 2179,
									"name": "methods",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 12,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 2258,
											"name": "Method"
										}
									}
								},
								{
									"id": 2181,
									"name": "userDefinedTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 14,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 284,
										"name": "TypesById"
									}
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										2174
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2180,
										2179,
										2181
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/errors.ts",
									"line": 11,
									"character": 13
								}
							],
							"extendedTypes": [
								{
									"type": "reference",
									"qualifiedName": "Error",
									"package": "typescript",
									"name": "Error"
								}
							]
						},
						{
							"id": 2182,
							"name": "NoUniqueBestOverloadError",
							"kind": 128,
							"kindString": "Class",
							"flags": {},
							"comment": {
								"shortText": "This error indicates that multiple overloads matched during\noverload resolution, but none of them was the unique best\noverload."
							},
							"children": [
								{
									"id": 2183,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 37,
											"character": 2
										}
									],
									"signatures": [
										{
											"id": 2184,
											"name": "new NoUniqueBestOverloadError",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 2185,
													"name": "resolutions",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 2254,
															"name": "Resolution"
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 2182,
												"name": "NoUniqueBestOverloadError"
											},
											"overwrites": {
												"type": "reference",
												"name": "Error.constructor"
											}
										}
									],
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								},
								{
									"id": 2186,
									"name": "resolutions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 36,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 2254,
											"name": "Resolution"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										2183
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2186
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/errors.ts",
									"line": 35,
									"character": 13
								}
							],
							"extendedTypes": [
								{
									"type": "reference",
									"qualifiedName": "Error",
									"package": "typescript",
									"name": "Error"
								}
							]
						},
						{
							"id": 2187,
							"name": "TypeMismatchError",
							"kind": 128,
							"kindString": "Class",
							"flags": {},
							"comment": {
								"shortText": "This error indicates that the given input could not be recognized as the\ntype it was supposed to be."
							},
							"children": [
								{
									"id": 2188,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 77,
											"character": 2
										}
									],
									"signatures": [
										{
											"id": 2189,
											"name": "new TypeMismatchError",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 2190,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 104,
														"name": "Type"
													}
												},
												{
													"id": 2191,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 2192,
													"name": "variableName",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 2193,
													"name": "specificity",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2194,
													"name": "reason",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 2187,
												"name": "TypeMismatchError"
											},
											"overwrites": {
												"type": "reference",
												"name": "Error.constructor"
											}
										}
									],
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								},
								{
									"id": 2197,
									"name": "dataType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 55,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 104,
										"name": "Type"
									}
								},
								{
									"id": 2198,
									"name": "input",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 56,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 2196,
									"name": "reason",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 54,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2199,
									"name": "specificity",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Specificity is used to determine which error to display;\nthe error with the highest specificity will be used.",
										"text": "Specificity 0: Only for use by the dispatcher\n\nSpecificity 1: The user shouldn't see this\n\nSpecificity 2: For always-error fallbacks\n\nSpecificity 3: For failure to get a good response on yielding\n\nSpecificity 4: More specific errors thrown from a semi-generic case\n\nSpecificity 5: Specific errors thrown from specific cases\n\nSpecificity 6: For one specific error that could use it :P\n"
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 75,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2195,
									"name": "variableName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 53,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										2188
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2197,
										2198,
										2196,
										2199,
										2195
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/errors.ts",
									"line": 52,
									"character": 13
								}
							],
							"extendedTypes": [
								{
									"type": "reference",
									"qualifiedName": "Error",
									"package": "typescript",
									"name": "Error"
								}
							]
						},
						{
							"id": 2285,
							"name": "ContractInput",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2286,
									"name": "address",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 64,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2287,
									"name": "selector",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 65,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2286,
										2287
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 63,
									"character": 17
								}
							]
						},
						{
							"id": 2294,
							"name": "EncodingTextInput",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2295,
									"name": "encoding",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 79,
											"character": 2
										}
									],
									"type": {
										"type": "literal",
										"value": "utf8"
									}
								},
								{
									"id": 2296,
									"name": "text",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 80,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2295,
										2296
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 78,
									"character": 17
								}
							]
						},
						{
							"id": 2288,
							"name": "FunctionExternalInput",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2289,
									"name": "address",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 69,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 2290,
									"name": "selector",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 70,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2289,
										2290
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 68,
									"character": 17
								}
							]
						},
						{
							"id": 2258,
							"name": "Method",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "This type represents a contract method or constructor.  Note that it's not a\nmethod for a specific instance, so there's no address field."
							},
							"children": [
								{
									"id": 2262,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The ABI entry for the method."
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 37,
											"character": 2
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionEntry"
											},
											{
												"type": "reference",
												"name": "ConstructorEntry"
											}
										]
									}
								},
								{
									"id": 2261,
									"name": "inputs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The types of the inputs (each of which may optionally have a name)."
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 33,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 214,
											"name": "OptionallyNamedType"
										}
									}
								},
								{
									"id": 2259,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The method name; omitted for constructors."
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 24,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2260,
									"name": "selector",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The method selector; for a constructor, this is instead the (linked)\nconstructor bytecode."
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 29,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2262,
										2261,
										2259,
										2260
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 20,
									"character": 17
								}
							]
						},
						{
							"id": 2254,
							"name": "Resolution",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {},
							"children": [
								{
									"id": 2256,
									"name": "arguments",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 11,
											"character": 2
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 295,
											"name": "Value"
										}
									}
								},
								{
									"id": 2255,
									"name": "method",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 10,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 2258,
										"name": "Method"
									}
								},
								{
									"id": 2257,
									"name": "options",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 12,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 2325,
										"name": "Options"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2256,
										2255,
										2257
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 9,
									"character": 17
								}
							]
						},
						{
							"id": 2271,
							"name": "ResolveOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2274,
									"name": "allowJson",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 53,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2273,
									"name": "allowOptions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 52,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2275,
									"name": "strictBooleans",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 54,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2272,
									"name": "userDefinedTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 51,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 284,
										"name": "TypesById"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2274,
										2273,
										2275,
										2272
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 50,
									"character": 17
								}
							]
						},
						{
							"id": 2291,
							"name": "TypeValueInput",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2292,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 74,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2293,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 75,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2292,
										2293
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 73,
									"character": 17
								}
							]
						},
						{
							"id": 2297,
							"name": "Uint8ArrayLike",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2298,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 84,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2298
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 83,
									"character": 17
								}
							],
							"indexSignature": {
								"id": 2299,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 2300,
										"name": "index",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						},
						{
							"id": 2263,
							"name": "WrapOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 2269,
									"name": "allowJson",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 46,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2266,
									"name": "loose",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 43,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2265,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 42,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2267,
									"name": "oldOptionsBehavior",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 44,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2268,
									"name": "specificityFloor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 45,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2270,
									"name": "strictBooleans",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 47,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2264,
									"name": "userDefinedTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 41,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 284,
										"name": "TypesById"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2269,
										2266,
										2265,
										2267,
										2268,
										2270,
										2264
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 40,
									"character": 17
								}
							]
						},
						{
							"id": 2301,
							"name": "AddressLikeType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 89,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 127,
										"name": "Format.Types.AddressType"
									},
									{
										"type": "reference",
										"id": 236,
										"name": "Format.Types.ContractType"
									}
								]
							}
						},
						{
							"id": 2302,
							"name": "AddressLikeValue",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 93,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 477,
										"name": "Format.Values.AddressValue"
									},
									{
										"type": "reference",
										"id": 533,
										"name": "Format.Values.ContractValue"
									}
								]
							}
						},
						{
							"id": 2276,
							"name": "Case",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 57,
									"character": 12
								}
							],
							"typeParameter": [
								{
									"id": 2282,
									"name": "TypeType",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 2283,
									"name": "ValueType",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 2284,
									"name": "RequestType",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2277,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 57,
											"character": 53
										}
									],
									"signatures": [
										{
											"id": 2278,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2279,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2282,
														"name": "TypeType"
													}
												},
												{
													"id": 2280,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "unknown"
													}
												},
												{
													"id": 2281,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2263,
														"name": "WrapOptions"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 2284,
														"name": "RequestType"
													},
													{
														"type": "reference",
														"id": 2283,
														"name": "ValueType"
													},
													{
														"type": "reference",
														"id": 1034,
														"name": "WrapResponse"
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									]
								}
							}
						},
						{
							"id": 2305,
							"name": "DecimalType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 101,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 140,
										"name": "Format.Types.FixedType"
									},
									{
										"type": "reference",
										"id": 145,
										"name": "Format.Types.UfixedType"
									}
								]
							}
						},
						{
							"id": 2309,
							"name": "DecimalValue",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 109,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 500,
										"name": "Format.Values.FixedValue"
									},
									{
										"type": "reference",
										"id": 509,
										"name": "Format.Values.UfixedValue"
									}
								]
							}
						},
						{
							"id": 2304,
							"name": "IntegerOrEnumType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 99,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 2303,
										"name": "IntegerType"
									},
									{
										"type": "reference",
										"id": 221,
										"name": "Format.Types.EnumType"
									}
								]
							}
						},
						{
							"id": 2308,
							"name": "IntegerOrEnumValue",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 107,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 2307,
										"name": "IntegerValue"
									},
									{
										"type": "reference",
										"id": 518,
										"name": "Format.Values.EnumValue"
									}
								]
							}
						},
						{
							"id": 2303,
							"name": "IntegerType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 97,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 105,
										"name": "Format.Types.UintType"
									},
									{
										"type": "reference",
										"id": 109,
										"name": "Format.Types.IntType"
									}
								]
							}
						},
						{
							"id": 2307,
							"name": "IntegerValue",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 105,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 434,
										"name": "Format.Values.UintValue"
									},
									{
										"type": "reference",
										"id": 443,
										"name": "Format.Values.IntValue"
									}
								]
							}
						},
						{
							"id": 2306,
							"name": "NumericType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 103,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 2303,
										"name": "IntegerType"
									},
									{
										"type": "reference",
										"id": 2305,
										"name": "DecimalType"
									}
								]
							}
						},
						{
							"id": 2310,
							"name": "TupleLikeType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 111,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 217,
										"name": "Format.Types.TupleType"
									},
									{
										"type": "reference",
										"id": 194,
										"name": "Format.Types.StructType"
									}
								]
							}
						},
						{
							"id": 2311,
							"name": "TupleLikeValue",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 113,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 342,
										"name": "Format.Values.TupleValue"
									},
									{
										"type": "reference",
										"id": 331,
										"name": "Format.Values.StructValue"
									}
								]
							}
						},
						{
							"id": 2168,
							"name": "resolveAndWrap",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/index.ts",
									"line": 132,
									"character": 17
								}
							],
							"signatures": [
								{
									"id": 2169,
									"name": "resolveAndWrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2170,
											"name": "methods",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 2258,
													"name": "Method"
												}
											}
										},
										{
											"id": 2171,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 2172,
											"name": "__namedParameters",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2271,
												"name": "ResolveOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1024,
												"name": "WrapRequest"
											},
											{
												"type": "reference",
												"id": 2254,
												"name": "Resolution"
											},
											{
												"type": "reference",
												"id": 1034,
												"name": "WrapResponse"
											}
										],
										"qualifiedName": "Generator",
										"package": "typescript",
										"name": "Generator"
									}
								}
							]
						},
						{
							"id": 2207,
							"name": "wrap",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/wrap.ts",
									"line": 78,
									"character": 17
								}
							],
							"signatures": [
								{
									"id": 2208,
									"name": "wrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2209,
											"name": "dataType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 104,
												"name": "Type"
											}
										},
										{
											"id": 2210,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										},
										{
											"id": 2211,
											"name": "wrapOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2263,
												"name": "WrapOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1024,
												"name": "WrapRequest"
											},
											{
												"type": "reference",
												"id": 295,
												"name": "Format.Values.Value"
											},
											{
												"type": "reference",
												"id": 1034,
												"name": "WrapResponse"
											}
										],
										"qualifiedName": "Generator",
										"package": "typescript",
										"name": "Generator"
									}
								}
							]
						},
						{
							"id": 2163,
							"name": "wrapForMethod",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/index.ts",
									"line": 47,
									"character": 17
								}
							],
							"signatures": [
								{
									"id": 2164,
									"name": "wrapForMethod",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2165,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2258,
												"name": "Method"
											}
										},
										{
											"id": 2166,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 2167,
											"name": "resolveOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2271,
												"name": "ResolveOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1024,
												"name": "WrapRequest"
											},
											{
												"type": "reference",
												"id": 2254,
												"name": "Resolution"
											},
											{
												"type": "reference",
												"id": 1034,
												"name": "WrapResponse"
											}
										],
										"qualifiedName": "Generator",
										"package": "typescript",
										"name": "Generator"
									}
								}
							]
						},
						{
							"id": 2158,
							"name": "wrapMultiple",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/index.ts",
									"line": 29,
									"character": 17
								}
							],
							"signatures": [
								{
									"id": 2159,
									"name": "wrapMultiple",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2160,
											"name": "types",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 214,
													"name": "OptionallyNamedType"
												}
											}
										},
										{
											"id": 2161,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 2162,
											"name": "wrapOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2263,
												"name": "WrapOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1024,
												"name": "WrapRequest"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 295,
													"name": "Format.Values.Value"
												}
											},
											{
												"type": "reference",
												"id": 1034,
												"name": "WrapResponse"
											}
										],
										"qualifiedName": "Generator",
										"package": "typescript",
										"name": "Generator"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								2212
							]
						},
						{
							"title": "Classes",
							"kind": 128,
							"children": [
								2200,
								2173,
								2182,
								2187
							],
							"categories": [
								{
									"title": "Errors",
									"children": [
										2173,
										2182,
										2187
									]
								},
								{
									"title": "Other",
									"children": [
										2200
									]
								}
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2285,
								2294,
								2288,
								2258,
								2254,
								2271,
								2291,
								2297,
								2263
							],
							"categories": [
								{
									"title": "Interfaces",
									"children": [
										2258,
										2254
									]
								},
								{
									"title": "Other",
									"children": [
										2285,
										2294,
										2288,
										2271,
										2291,
										2297,
										2263
									]
								}
							]
						},
						{
							"title": "Type Aliases",
							"kind": 4194304,
							"children": [
								2301,
								2302,
								2276,
								2305,
								2309,
								2304,
								2308,
								2303,
								2307,
								2306,
								2310,
								2311
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								2168,
								2207,
								2163,
								2158
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/wrap/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 877,
					"name": "NoProjectInfoError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the user attempted to instantiate a decoder\nwith no project information (by explicitly overriding the default)."
					},
					"children": [
						{
							"id": 878,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/errors.ts",
									"line": 74,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 879,
									"name": "new NoProjectInfoError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 877,
										"name": "NoProjectInfoError"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Error.constructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								878
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/errors.ts",
							"line": 73,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "Error",
							"package": "typescript",
							"name": "Error"
						}
					]
				},
				{
					"id": 880,
					"name": "RepeatCompilationIdError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates there was an attempt to add multiple compilations\nwith the same ID, or a compilation whose ID was already in use."
					},
					"children": [
						{
							"id": 881,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/errors.ts",
									"line": 86,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 882,
									"name": "new RepeatCompilationIdError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 883,
											"name": "ids",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 880,
										"name": "RepeatCompilationIdError"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Error.constructor"
							}
						},
						{
							"id": 884,
							"name": "ids",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "codec/lib/errors.ts",
									"line": 85,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								881
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								884
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/errors.ts",
							"line": 84,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "Error",
							"package": "typescript",
							"name": "Error"
						}
					]
				},
				{
					"id": 2318,
					"name": "UnknownUserDefinedTypeError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the decoder was unable to locate a user-defined\ntype (struct, enum, or contract type) via its ID.  Unfortunately, we can't\nalways avoid this at the moment; we're hoping to make this more robust in\nthe future with Truffle DB.  In the meantime, it is at least worth noting that\nyou should not encounter this error if your entire project was written in\nSolidity and all compiled at once.  Sorry."
					},
					"children": [
						{
							"id": 2319,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 49,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 2320,
									"name": "new UnknownUserDefinedTypeError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2321,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2322,
											"name": "typeString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2318,
										"name": "UnknownUserDefinedTypeError"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Error.constructor"
							}
						},
						{
							"id": 2324,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 48,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2323,
							"name": "typeString",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 47,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2319
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2324,
								2323
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 46,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "Error",
							"package": "typescript",
							"name": "Error"
						}
					]
				},
				{
					"id": 1003,
					"name": "AbiArgument",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoded argument passed to a transaction or event,\nor returned from a call."
					},
					"children": [
						{
							"id": 1005,
							"name": "indexed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether this is an indexed paramter.  Only included for event parameters."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 654,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1004,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The name of the parameter.  Excluded if the parameter is nameless."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 650,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1006,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoded value of the argument.  Note that this is a [[Format.Values.Result|Format.Values.Result]], so it\nmay contain errors (although event decodings should typically not contain errors;\nsee the [[DecodedLog]] documentation for why)."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 660,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 294,
								"name": "Result"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1005,
								1004,
								1006
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 646,
							"character": 17
						}
					]
				},
				{
					"id": 2340,
					"name": "AccessListForAddress",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Type for an individual address's entry in an\naccess list"
					},
					"children": [
						{
							"id": 2341,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "This should be an address"
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 127,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2342,
							"name": "storageKeys",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "These should be 32-byte bytestrings"
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 131,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2341,
								2342
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 123,
							"character": 17
						}
					]
				},
				{
					"id": 1031,
					"name": "AddressWrapRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A request to resolve a contract name to an address."
					},
					"children": [
						{
							"id": 1032,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this is an AddressWrapRequest."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 808,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "address"
							}
						},
						{
							"id": 1033,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The name that needs to be resolved to an address."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 812,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1032,
								1033
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 804,
							"character": 17
						}
					]
				},
				{
					"id": 1045,
					"name": "AddressWrapResponse",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A response with an address for a contract name (or unusual address form)."
					},
					"children": [
						{
							"id": 1047,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The address for the contract name, or null, to indicate that no such\ncontract was found."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 890,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1046,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this is an AddressWrapResponse."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 885,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "address"
							}
						},
						{
							"id": 1049,
							"name": "partiallyRecognized",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If present, indicates that the input was recognized but not as a valid address."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 898,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 1048,
							"name": "reason",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If present, the reason the address wasn't found."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 894,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1047,
								1046,
								1049,
								1048
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 881,
							"character": 17
						}
					]
				},
				{
					"id": 942,
					"name": "AnonymousDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of a log as an anonymous event."
					},
					"children": [
						{
							"id": 947,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the event.  You can use this to extract the name, for\ninstance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 367,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "EventEntry"
							}
						},
						{
							"id": 946,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded arguments to the event."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 362,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1003,
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 944,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) emitted the event, as a Format.Types.ContractType.\nThis may be a library!  When a library emits an event, the EVM records it as the calling contract\nhaving emitted the event, but we decode it as if the library emitted the event, for clarity.\n(The address of the contract the EVM thinks emitted the event can of course be found in the original log.)"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 353,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 236,
								"name": "ContractType"
							}
						},
						{
							"id": 948,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 372,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 885,
								"name": "DecodingMode"
							}
						},
						{
							"id": 945,
							"name": "definedIn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) defined the event, as a Format.Types.ContractType.\nMay be omitted if we can't determine it, as may occur in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 358,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 236,
								"name": "ContractType"
							}
						},
						{
							"id": 949,
							"name": "interpretations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Further information about how the decoding may be interpreted.  Note that interpretations\nmay be added by things that use @truffle/codec, such as @truffle/decoder, rather than by",
								"tags": [
									{
										"tag": "truffle/codec",
										"text": "itself.  See individual interpretations for details.\n(Currently there are none for this type.)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 379,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 950,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						},
						{
							"id": 943,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an AnonymousDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 346,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "anonymous"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								947,
								946,
								944,
								948,
								945,
								949,
								943
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 342,
							"character": 17
						}
					]
				},
				{
					"id": 1061,
					"name": "BlockhashedMulticallInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Used by the `specifiedBlockhashMulticall` interpretation."
					},
					"children": [
						{
							"id": 1063,
							"name": "calls",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decodings of the individual calls; these may each be null in\ncase of an error."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 982,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 886,
									"name": "CalldataDecoding"
								}
							}
						},
						{
							"id": 1062,
							"name": "specifiedBlockhash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The specified parent blockhash."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 977,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1063,
								1062
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 973,
							"character": 17
						}
					]
				},
				{
					"id": 965,
					"name": "BytecodeDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of the return data as bytecode for a known\nclass returned from a constructor.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 972,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If the contract created was a library, and was compiled with Solidity\n0.4.20 or later, this field will be included, which gives the address of\nthe created contract (checksummed).  This field will not be included\notherwise!"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 593,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 971,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The bytecode of the contract that was created."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 586,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 969,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of contract being constructed, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 577,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 236,
								"name": "ContractType"
							}
						},
						{
							"id": 968,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 573,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 885,
								"name": "DecodingMode"
							}
						},
						{
							"id": 970,
							"name": "immutables",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Decodings for any immutable state variables the created contract contains.\nOmitted in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 582,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1007,
									"name": "StateVariable"
								}
							}
						},
						{
							"id": 973,
							"name": "interpretations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Further information about how the decoding may be interpreted.  Note that interpretations\nmay be added by things that use @truffle/codec, such as @truffle/decoder, rather than by",
								"tags": [
									{
										"tag": "truffle/codec",
										"text": "itself.  See individual interpretations for details.\n(Currently there are none for this type.)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 600,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 974,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						},
						{
							"id": 966,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a BytecodeDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 564,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "bytecode"
							}
						},
						{
							"id": 967,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 568,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								972,
								971,
								969,
								968,
								970,
								973,
								966,
								967
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 560,
							"character": 17
						}
					]
				},
				{
					"id": 1052,
					"name": "CallInterpretationInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Used by some multicall-like interpretations."
					},
					"children": [
						{
							"id": 1053,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The address the call was sent to; may be null in case of\nan error."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 931,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1054,
							"name": "decoding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding of the call; may be null in case of error."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 935,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 886,
								"name": "CalldataDecoding"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1053,
								1054
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 926,
							"character": 17
						}
					]
				},
				{
					"id": 1015,
					"name": "CodeRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A request for code"
					},
					"children": [
						{
							"id": 1017,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 688,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1016,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 687,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "code"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1017,
								1016
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 686,
							"character": 17
						}
					]
				},
				{
					"id": 903,
					"name": "ConstructorDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a transaction decoding for a constructor call.\nIt's even possible to decode a library constructor call with this.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 907,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the constructor that was called.  Note that although\ndefault constructors don't actually get an ABI entry, we still return an\nABI entry regardless in that case."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 172,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "ConstructorEntry"
							}
						},
						{
							"id": 906,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded arguments to the constructor.  This will be empty for a\ndefault constructor."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 166,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1003,
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 908,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The bytecode of the constructor that was called."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 176,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 905,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of contract being constructed, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 161,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 236,
								"name": "ContractType"
							}
						},
						{
							"id": 909,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 181,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 885,
								"name": "DecodingMode"
							}
						},
						{
							"id": 910,
							"name": "interpretations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Further information about how the decoding may be interpreted.  Note that interpretations\nmay be added by things that use @truffle/codec, such as @truffle/decoder, rather than by",
								"tags": [
									{
										"tag": "truffle/codec",
										"text": "itself.  See individual interpretations for details.\n(Currently there are none for this type.)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 188,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 911,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						},
						{
							"id": 904,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a ConstructorDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 157,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "constructor"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								907,
								906,
								908,
								905,
								909,
								910,
								904
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 153,
							"character": 17
						}
					]
				},
				{
					"id": 1058,
					"name": "DeadlinedMulticallInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Used by the `deadlinedMulticall` interpretation."
					},
					"children": [
						{
							"id": 1060,
							"name": "calls",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decodings of the individual calls; these may each be null in\ncase of an error."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 966,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 886,
									"name": "CalldataDecoding"
								}
							}
						},
						{
							"id": 1059,
							"name": "deadline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The deadline."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 961,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "BN",
								"package": "@types/bn.js",
								"name": "BN"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1060,
								1059
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 957,
							"character": 17
						}
					]
				},
				{
					"id": 1028,
					"name": "DecimalWrapRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A request to understand an decimal value."
					},
					"children": [
						{
							"id": 1030,
							"name": "input",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The input whose numeric value needs to be extracted."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 796,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "unknown"
							}
						},
						{
							"id": 1029,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this is a DecimalWrapRequest."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 792,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "decimal"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1030,
								1029
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 788,
							"character": 17
						}
					]
				},
				{
					"id": 1040,
					"name": "DecimalWrapResponse",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A response with an decimal numeric value, as Big."
					},
					"children": [
						{
							"id": 1041,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this is a DecimalWrapResponse."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 860,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "decimal"
							}
						},
						{
							"id": 1044,
							"name": "partiallyRecognized",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If present, indicates that the input was recognized but not as a decimal."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 873,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 1043,
							"name": "reason",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If present, the reason the number wasn't recognized as a decimal."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 869,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1042,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The numeric value that was extracted, as a Big, or null, to indicate\nthat the number format wasn't recognized."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 865,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "Big",
								"package": "@types/big.js",
								"name": "Big"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1041,
								1044,
								1043,
								1042
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 856,
							"character": 17
						}
					]
				},
				{
					"id": 997,
					"name": "EmptyFailureDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of empty return data from an unsuccessful\ncall, a reversion with no message."
					},
					"children": [
						{
							"id": 1000,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 492,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 885,
								"name": "DecodingMode"
							}
						},
						{
							"id": 1001,
							"name": "interpretations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Further information about how the decoding may be interpreted.  Note that interpretations\nmay be added by things that use @truffle/codec, such as @truffle/decoder, rather than by",
								"tags": [
									{
										"tag": "truffle/codec",
										"text": "itself.  See individual interpretations for details.\n(Currently there are none for this type.)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 499,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1002,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						},
						{
							"id": 998,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an EmptyFailureDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 483,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "failure"
							}
						},
						{
							"id": 999,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates an unsuccessful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 487,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": false
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1000,
								1001,
								998,
								999
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 479,
							"character": 17
						}
					]
				},
				{
					"id": 932,
					"name": "EventDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of a log as a non-anonymous event."
					},
					"children": [
						{
							"id": 937,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the event.  You can use this to extract the name, for\ninstance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 318,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "EventEntry"
							}
						},
						{
							"id": 936,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded arguments to the event."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 313,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1003,
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 934,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) emitted the event, as a Format.Types.ContractType.\nThis may be a library!  When a library emits an event, the EVM records it as the calling contract\nhaving emitted the event, but we decode it as if the library emitted the event, for clarity.\n(The address of the contract the EVM thinks emitted the event can of course be found in the original log.)"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 304,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 236,
								"name": "ContractType"
							}
						},
						{
							"id": 939,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 327,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 885,
								"name": "DecodingMode"
							}
						},
						{
							"id": 935,
							"name": "definedIn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) defined the event, as a Format.Types.ContractType.\nMay be omitted if we can't determine it, as may occur in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 309,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 236,
								"name": "ContractType"
							}
						},
						{
							"id": 940,
							"name": "interpretations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Further information about how the decoding may be interpreted.  Note that interpretations\nmay be added by things that use @truffle/codec, such as @truffle/decoder, rather than by",
								"tags": [
									{
										"tag": "truffle/codec",
										"text": "itself.  See individual interpretations for details.\n(Currently there are none for this type.)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 334,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 941,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						},
						{
							"id": 933,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an EventDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 297,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "event"
							}
						},
						{
							"id": 938,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The selector for the event, as a hexadecimal string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 322,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								937,
								936,
								934,
								939,
								935,
								940,
								933,
								938
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 293,
							"character": 17
						}
					]
				},
				{
					"id": 889,
					"name": "FunctionDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a transaction decoding for an ordinary function call to a known class;\nnot a constructor call, not a fallback call."
					},
					"children": [
						{
							"id": 893,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the function that was called.  You can use this\nto extract the name, for instance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 96,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "FunctionEntry"
							}
						},
						{
							"id": 892,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded arguments to the function."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 91,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1003,
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 891,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of contract that was called, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 87,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 236,
								"name": "ContractType"
							}
						},
						{
							"id": 895,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 105,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 885,
								"name": "DecodingMode"
							}
						},
						{
							"id": 896,
							"name": "interpretations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Further information about how the decoding may be interpreted.  Note that interpretations\nmay be added by things that use @truffle/codec, such as @truffle/decoder, rather than by",
								"tags": [
									{
										"tag": "truffle/codec",
										"text": "itself.  See individual interpretations for details.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 111,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 897,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 899,
											"name": "aggregate",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If this interpretation is present, indicates that the transaction can be\nunderstood as an `aggregate` (from multicallv2).  This also includes\n`blockAndAggregate`.  See [[CallInterpretationInfo]] for more\ninformation."
											},
											"sources": [
												{
													"fileName": "codec/lib/types.ts",
													"line": 126,
													"character": 4
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1052,
													"name": "CallInterpretationInfo"
												}
											}
										},
										{
											"id": 901,
											"name": "deadlinedMulticall",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Similar to `multicall`, but for Uniswap's deadlined multicall."
											},
											"sources": [
												{
													"fileName": "codec/lib/types.ts",
													"line": 135,
													"character": 4
												}
											],
											"type": {
												"type": "reference",
												"id": 1058,
												"name": "DeadlinedMulticallInfo"
											}
										},
										{
											"id": 898,
											"name": "multicall",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If this interpretation is present, indicates that the transaction can be\nunderstood as a multicall (v1).  The field contains decodings for the\nindividual calls that the multicall can be broken into.  Note that in\ncase of an error, individual decodings will be returned as null, so be\nsure to check for this."
											},
											"sources": [
												{
													"fileName": "codec/lib/types.ts",
													"line": 119,
													"character": 4
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 886,
													"name": "CalldataDecoding"
												}
											}
										},
										{
											"id": 902,
											"name": "specifiedBlockhashMulticall",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Similar to `multicall`, but for Uniswap's multicall with previous block hash."
											},
											"sources": [
												{
													"fileName": "codec/lib/types.ts",
													"line": 139,
													"character": 4
												}
											],
											"type": {
												"type": "reference",
												"id": 1061,
												"name": "BlockhashedMulticallInfo"
											}
										},
										{
											"id": 900,
											"name": "tryAggregate",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Similar to the `aggregate` interpretation, but for `tryAggregate`.  Also\nincludes `tryBlockAndAggregate`."
											},
											"sources": [
												{
													"fileName": "codec/lib/types.ts",
													"line": 131,
													"character": 4
												}
											],
											"type": {
												"type": "reference",
												"id": 1055,
												"name": "TryAggregateInfo"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												899,
												901,
												898,
												902,
												900
											]
										}
									]
								}
							}
						},
						{
							"id": 890,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a FunctionDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 83,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "function"
							}
						},
						{
							"id": 894,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The selector for the function that was called, as a hexadecimal string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 100,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								893,
								892,
								891,
								895,
								896,
								890,
								894
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 79,
							"character": 17
						}
					]
				},
				{
					"id": 1025,
					"name": "IntegerWrapRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A request to understand an integer value."
					},
					"children": [
						{
							"id": 1027,
							"name": "input",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The input whose numeric value needs to be extracted."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 780,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "unknown"
							}
						},
						{
							"id": 1026,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this is a IntegerWrapRequest."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 776,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "integer"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1027,
								1026
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 772,
							"character": 17
						}
					]
				},
				{
					"id": 1035,
					"name": "IntegerWrapResponse",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A response with an integral numeric value, as BigInt."
					},
					"children": [
						{
							"id": 1036,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this is a IntegerWrapResponse."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 835,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "integer"
							}
						},
						{
							"id": 1039,
							"name": "partiallyRecognized",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If present, indicates that the input was recognized but not as an integer."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 848,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						},
						{
							"id": 1038,
							"name": "reason",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If present, the reason the number wasn't recognized as an integer."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 844,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1037,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The numeric value that was extracted, as a BigInt, or null, to indicate\nthat either the number format wasn't recognized or wasn't an integer."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 840,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1036,
								1039,
								1038,
								1037
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 831,
							"character": 17
						}
					]
				},
				{
					"id": 1018,
					"name": "LogOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "The type of the options parameter to [[decodeEvent]].  This type will be expanded in the future\nas more filtering options are added."
					},
					"children": [
						{
							"id": 1022,
							"name": "disableChecks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Allows decodings that don't pass the re-encoding test.  Don't turn\nthis on unless you know what you're doing!"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 752,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1020,
							"name": "extras",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.  Defaults to `\"off\"`."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 741,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 1023,
								"name": "ExtrasAllowed"
							}
						},
						{
							"id": 1021,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If passed, restricts to events with the given ID.  This is meant for\ninternal use by Truffle Debugger; you probably don't want to bother\nwith this option."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 747,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1019,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If passed, restricts to events with the given name."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 735,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1022,
								1020,
								1021,
								1019
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 731,
							"character": 17
						}
					]
				},
				{
					"id": 912,
					"name": "MessageDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding for a call to a known class that does not appear\nto be a function call, i.e., one that will result in the fallback function being invoked\nif there is one."
					},
					"children": [
						{
							"id": 915,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the contract's fallback or receive function that would\nhandle this message; will be null if there is none."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 211,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "FallbackEntry"
									},
									{
										"type": "reference",
										"name": "ReceiveEntry"
									}
								]
							}
						},
						{
							"id": 914,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of contract that was called, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 206,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 236,
								"name": "ContractType"
							}
						},
						{
							"id": 916,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The data that was sent to the contract."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 215,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 917,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 220,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 885,
								"name": "DecodingMode"
							}
						},
						{
							"id": 918,
							"name": "interpretations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Further information about how the decoding may be interpreted.  Note that interpretations\nmay be added by things that use @truffle/codec, such as @truffle/decoder, rather than by",
								"tags": [
									{
										"tag": "truffle/codec",
										"text": "itself.  See individual interpretations for details.\n(Currently there are none for this type.)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 227,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 919,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						},
						{
							"id": 913,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a MessageDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 202,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "message"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								915,
								914,
								916,
								917,
								918,
								913
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 198,
							"character": 17
						}
					]
				},
				{
					"id": 2325,
					"name": "Options",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Type for transaction options, including\nQuorum-specific ones (privateFor) and\nTruffle-specific ones (overwrite)"
					},
					"children": [
						{
							"id": 2336,
							"name": "accessList",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 98,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 2339,
								"name": "AccessList"
							}
						},
						{
							"id": 2333,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This should be a bytestring (even-length hex string, with \"0x\")"
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 90,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2326,
							"name": "from",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This should be an address"
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 77,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2328,
							"name": "gas",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 82,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "BN",
								"package": "@types/bn.js",
								"name": "BN"
							}
						},
						{
							"id": 2329,
							"name": "gasPrice",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 83,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "BN",
								"package": "@types/bn.js",
								"name": "BN"
							}
						},
						{
							"id": 2330,
							"name": "maxFeePerGas",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 84,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "BN",
								"package": "@types/bn.js",
								"name": "BN"
							}
						},
						{
							"id": 2331,
							"name": "maxPriorityFeePerGas",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 85,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "BN",
								"package": "@types/bn.js",
								"name": "BN"
							}
						},
						{
							"id": 2334,
							"name": "nonce",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 91,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "BN",
								"package": "@types/bn.js",
								"name": "BN"
							}
						},
						{
							"id": 2338,
							"name": "overwrite",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Truffle-specific"
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 107,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 2337,
							"name": "privateFor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Quorum-specific; this should be an array of base64-encoded strings,\neach of which encodes a 32-byte bytestring"
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 103,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 2327,
							"name": "to",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This should be an address"
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 81,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2335,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This represents a number, but for compatibility purposes\nit should be given as a hex string.  It should be in the\nrange of 0x00 to 0xbf."
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 97,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2332,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 86,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "BN",
								"package": "@types/bn.js",
								"name": "BN"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2336,
								2333,
								2326,
								2328,
								2329,
								2330,
								2331,
								2334,
								2338,
								2337,
								2327,
								2335,
								2332
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 65,
							"character": 17
						}
					]
				},
				{
					"id": 958,
					"name": "RawReturnDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of the return data as a raw bytestring\n(as might be returned from a fallback function)."
					},
					"children": [
						{
							"id": 961,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The returned bytestring, as a hex string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 431,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 962,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 436,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 885,
								"name": "DecodingMode"
							}
						},
						{
							"id": 963,
							"name": "interpretations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Further information about how the decoding may be interpreted.  Note that interpretations\nmay be added by things that use @truffle/codec, such as @truffle/decoder, rather than by",
								"tags": [
									{
										"tag": "truffle/codec",
										"text": "itself.  See individual interpretations for details.\n(Currently there are none for this type.)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 443,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 964,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						},
						{
							"id": 959,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a RawReturnDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 423,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "returnmessage"
							}
						},
						{
							"id": 960,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 427,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								961,
								962,
								963,
								959,
								960
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 419,
							"character": 17
						}
					]
				},
				{
					"id": 951,
					"name": "ReturnDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of the return data as a collection of\nreturn values from a successful call."
					},
					"children": [
						{
							"id": 954,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded return values from the function."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 399,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1003,
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 955,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 404,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 885,
								"name": "DecodingMode"
							}
						},
						{
							"id": 956,
							"name": "interpretations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Further information about how the decoding may be interpreted.  Note that interpretations\nmay be added by things that use @truffle/codec, such as @truffle/decoder, rather than by",
								"tags": [
									{
										"tag": "truffle/codec",
										"text": "itself.  See individual interpretations for details.\n(Currently there are none for this type.)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 411,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 957,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						},
						{
							"id": 952,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a ReturnDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 391,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "return"
							}
						},
						{
							"id": 953,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 395,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								954,
								955,
								956,
								952,
								953
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 387,
							"character": 17
						}
					]
				},
				{
					"id": 988,
					"name": "RevertMessageDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of the return data as a revert message.\nFor forward-compatibility, we do not assume that the revert message is\na string."
					},
					"children": [
						{
							"id": 990,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the error that was thrown.  You can use this\nto extract the name, for instance.  This may be spoofed for built-in\ntypes of errors."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 518,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorEntry"
							}
						},
						{
							"id": 993,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded arguments passed to revert(); currently, this will\nalways contain just a single string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 535,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1003,
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 994,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 540,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 885,
								"name": "DecodingMode"
							}
						},
						{
							"id": 991,
							"name": "definedIn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) defined the\nerror type, as a Format.Types.ContractType.  This will be `null` if the\nerror was defined outside of the contract or it's one of the builtin\n`Error(string)` or `Panic(uint)` types.\nMay be omitted if we can't determine it, as may occur in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 526,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 236,
								"name": "ContractType"
							}
						},
						{
							"id": 995,
							"name": "interpretations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Further information about how the decoding may be interpreted.  Note that interpretations\nmay be added by things that use @truffle/codec, such as @truffle/decoder, rather than by",
								"tags": [
									{
										"tag": "truffle/codec",
										"text": "itself.  See individual interpretations for details.\n(Currently there are none for this type.)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 547,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 996,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						},
						{
							"id": 989,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a RevertMessageDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 512,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "revert"
							}
						},
						{
							"id": 992,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates an unsuccessful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 530,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": false
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								990,
								993,
								994,
								991,
								995,
								989,
								992
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 508,
							"character": 17
						}
					]
				},
				{
					"id": 982,
					"name": "SelfDestructDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of unexpectedly empty return data from a\nsuccessful call, indicating that the contract self-destructed."
					},
					"children": [
						{
							"id": 985,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 464,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 885,
								"name": "DecodingMode"
							}
						},
						{
							"id": 986,
							"name": "interpretations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Further information about how the decoding may be interpreted.  Note that interpretations\nmay be added by things that use @truffle/codec, such as @truffle/decoder, rather than by",
								"tags": [
									{
										"tag": "truffle/codec",
										"text": "itself.  See individual interpretations for details.\n(Currently there are none for this type.)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 471,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 987,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						},
						{
							"id": 983,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an SelfDestructDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 455,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "selfdestruct"
							}
						},
						{
							"id": 984,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 459,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								985,
								986,
								983,
								984
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 451,
							"character": 17
						}
					]
				},
				{
					"id": 1007,
					"name": "StateVariable",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Used for representing decoded state variables."
					},
					"children": [
						{
							"id": 1009,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of the contract that defined the variable, as a Format.Types.ContractType.\nNote that this class may differ from that of the contract being decoded, due\nto inheritance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 67,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 236,
								"name": "ContractType"
							}
						},
						{
							"id": 1008,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The name of the variable.  Note that due to inheritance, this may not be unique\namong the contract's state variables."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 61,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1010,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoded value of the variable.  Note this is a Format.Values.Result, so it may be an error."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 71,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 294,
								"name": "Result"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1009,
								1008,
								1010
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 56,
							"character": 17
						}
					]
				},
				{
					"id": 1012,
					"name": "StorageRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A request for storage"
					},
					"children": [
						{
							"id": 1014,
							"name": "slot",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 678,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "BN",
								"package": "@types/bn.js",
								"name": "BN"
							}
						},
						{
							"id": 1013,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 677,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "storage"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1014,
								1013
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 676,
							"character": 17
						}
					]
				},
				{
					"id": 1055,
					"name": "TryAggregateInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Used by the `tryAggregate` interpretation."
					},
					"children": [
						{
							"id": 1057,
							"name": "calls",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decodings of the individual calls."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 950,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1052,
									"name": "CallInterpretationInfo"
								}
							}
						},
						{
							"id": 1056,
							"name": "requireSuccess",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Whether success was required."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 946,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1057,
								1056
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 942,
							"character": 17
						}
					]
				},
				{
					"id": 975,
					"name": "UnknownBytecodeDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of the return data as bytecode for an\nunknown class returned from a constructor.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 979,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The bytecode of the contract that was created."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 630,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 978,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 626,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 885,
								"name": "DecodingMode"
							}
						},
						{
							"id": 980,
							"name": "interpretations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Further information about how the decoding may be interpreted.  Note that interpretations\nmay be added by things that use @truffle/codec, such as @truffle/decoder, rather than by",
								"tags": [
									{
										"tag": "truffle/codec",
										"text": "itself.  See individual interpretations for details.\n(Currently there are none for this type.)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 637,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 981,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						},
						{
							"id": 976,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownBytecodeDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 617,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "unknownbytecode"
							}
						},
						{
							"id": 977,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 621,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								979,
								978,
								980,
								976,
								977
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 613,
							"character": 17
						}
					]
				},
				{
					"id": 920,
					"name": "UnknownCallDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a function call to an unknown class.  In this case,\nit's simply not possible to return much information."
					},
					"children": [
						{
							"id": 923,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The data that was sent to the contract."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 249,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 922,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 245,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 885,
								"name": "DecodingMode"
							}
						},
						{
							"id": 924,
							"name": "interpretations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Further information about how the decoding may be interpreted.  Note that interpretations\nmay be added by things that use @truffle/codec, such as @truffle/decoder, rather than by",
								"tags": [
									{
										"tag": "truffle/codec",
										"text": "itself.  See individual interpretations for details.\n(Currently there are none for this type.)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 256,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 925,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						},
						{
							"id": 921,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 240,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "unknown"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								923,
								922,
								924,
								921
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 236,
							"character": 17
						}
					]
				},
				{
					"id": 926,
					"name": "UnknownCreationDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a contract creation for an unknown class. In this case,\nit's simply not possible to return much information."
					},
					"children": [
						{
							"id": 929,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The bytecode of the contract creation."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 278,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 928,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 274,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 885,
								"name": "DecodingMode"
							}
						},
						{
							"id": 930,
							"name": "interpretations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Further information about how the decoding may be interpreted.  Note that interpretations\nmay be added by things that use @truffle/codec, such as @truffle/decoder, rather than by",
								"tags": [
									{
										"tag": "truffle/codec",
										"text": "itself.  See individual interpretations for details.\n(Currently there are none for this type.)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 285,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 931,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						},
						{
							"id": 927,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownCreationDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 269,
									"character": 2
								}
							],
							"type": {
								"type": "literal",
								"value": "create"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								929,
								928,
								930,
								927
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 265,
							"character": 17
						}
					]
				},
				{
					"id": 2339,
					"name": "AccessList",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Type for access lists"
					},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 115,
							"character": 12
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 2340,
							"name": "AccessListForAddress"
						}
					}
				},
				{
					"id": 1050,
					"name": "BlockSpecifier",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Specifies a block.  Can be given by number, or can be given via the\nspecial strings \"genesis\", \"latest\", or \"pending\".",
						"text": "Intended to work like Web3's\n[BlockType](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#id14).\n\n*Warning*: Using \"pending\", while allowed, is not advised, as it may lead\nto internally inconsistent results.  Use of \"latest\" is safe and will not\nlead to inconsistent results from a single decoder call due to the decoder's\ncaching system, but pending blocks cannot be cached under this system, which\nmay cause inconsistencies."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 915,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "literal",
								"value": "genesis"
							},
							{
								"type": "literal",
								"value": "latest"
							},
							{
								"type": "literal",
								"value": "pending"
							}
						]
					}
				},
				{
					"id": 886,
					"name": "CalldataDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "A type representing a transaction (calldata) decoding.  As you can see, these come in five types,\neach of which is documented separately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 14,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 889,
								"name": "FunctionDecoding"
							},
							{
								"type": "reference",
								"id": 903,
								"name": "ConstructorDecoding"
							},
							{
								"type": "reference",
								"id": 912,
								"name": "MessageDecoding"
							},
							{
								"type": "reference",
								"id": 920,
								"name": "UnknownCallDecoding"
							},
							{
								"type": "reference",
								"id": 926,
								"name": "UnknownCreationDecoding"
							}
						]
					}
				},
				{
					"id": 2315,
					"name": "ContractKind",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 18,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "contract"
							},
							{
								"type": "literal",
								"value": "library"
							},
							{
								"type": "literal",
								"value": "interface"
							}
						]
					}
				},
				{
					"id": 1011,
					"name": "DecoderRequest",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 666,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1012,
								"name": "StorageRequest"
							},
							{
								"type": "reference",
								"id": 1015,
								"name": "CodeRequest"
							},
							{
								"type": "reference",
								"name": "EnsPrimaryNameRequest"
							}
						]
					}
				},
				{
					"id": 885,
					"name": "DecodingMode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "This is a type for recording what decoding mode a given decoding was produced in.  There are two\ndecoding modes, full mode and ABI mode.  In ABI mode, decoding is done purely based on the ABI JSON.\nFull mode, by contrast, additionally uses AST information to produce a more informative decoding.\nFor more on full mode and ABI mode, see the notes on [Decoding modes](../#decoding-modes)."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 50,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "full"
							},
							{
								"type": "literal",
								"value": "abi"
							}
						]
					}
				},
				{
					"id": 1023,
					"name": "ExtrasAllowed",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.",
						"text": "* `\"off\"`: Exclude extra decodings (the default).\n* `\"on\"`: Include extra decodings.\n* `\"necessary\"`: Include extra decodings only if there are no others.\n\nExtra decodings will always be returned after other decodings.\n"
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 723,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "off"
							},
							{
								"type": "literal",
								"value": "on"
							},
							{
								"type": "literal",
								"value": "necessary"
							}
						]
					}
				},
				{
					"id": 2312,
					"name": "Location",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 6,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "storage"
							},
							{
								"type": "literal",
								"value": "memory"
							},
							{
								"type": "literal",
								"value": "calldata"
							}
						]
					}
				},
				{
					"id": 887,
					"name": "LogDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "A type representing a log (event) decoding.  As you can see, these come in two types, each of which\nis documented separately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 26,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 932,
								"name": "EventDecoding"
							},
							{
								"type": "reference",
								"id": 942,
								"name": "AnonymousDecoding"
							}
						]
					}
				},
				{
					"id": 2314,
					"name": "Mutability",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 14,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "pure"
							},
							{
								"type": "literal",
								"value": "view"
							},
							{
								"type": "literal",
								"value": "nonpayable"
							},
							{
								"type": "literal",
								"value": "payable"
							}
						]
					}
				},
				{
					"id": 2316,
					"name": "PaddingMode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 23,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "default"
							},
							{
								"type": "literal",
								"value": "permissive"
							},
							{
								"type": "literal",
								"value": "zero"
							},
							{
								"type": "literal",
								"value": "right"
							},
							{
								"type": "literal",
								"value": "defaultOrZero"
							}
						]
					}
				},
				{
					"id": 2317,
					"name": "PaddingType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 33,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "left"
							},
							{
								"type": "literal",
								"value": "right"
							},
							{
								"type": "literal",
								"value": "signed"
							},
							{
								"type": "literal",
								"value": "signedOrLeft"
							}
						]
					}
				},
				{
					"id": 888,
					"name": "ReturndataDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "A type representing a returndata (return value or revert message) decoding.\nAs you can see, these come in six types, each of which is documented\nseparately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 34,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 951,
								"name": "ReturnDecoding"
							},
							{
								"type": "reference",
								"id": 958,
								"name": "RawReturnDecoding"
							},
							{
								"type": "reference",
								"id": 965,
								"name": "BytecodeDecoding"
							},
							{
								"type": "reference",
								"id": 975,
								"name": "UnknownBytecodeDecoding"
							},
							{
								"type": "reference",
								"id": 982,
								"name": "SelfDestructDecoding"
							},
							{
								"type": "reference",
								"id": 988,
								"name": "RevertMessageDecoding"
							},
							{
								"type": "reference",
								"id": 997,
								"name": "EmptyFailureDecoding"
							}
						]
					}
				},
				{
					"id": 2313,
					"name": "Visibility",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 10,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "internal"
							},
							{
								"type": "literal",
								"value": "external"
							}
						]
					}
				},
				{
					"id": 1024,
					"name": "WrapRequest",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "An encoder request; can come in one of three types.  It can be either a\nrequest to understand a numeric input (integer or decimal), or a request to\nresolve a contract name.  The \"kind\" field distinguishes."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 762,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1025,
								"name": "IntegerWrapRequest"
							},
							{
								"type": "reference",
								"id": 1028,
								"name": "DecimalWrapRequest"
							},
							{
								"type": "reference",
								"id": 1031,
								"name": "AddressWrapRequest"
							}
						]
					}
				},
				{
					"id": 1034,
					"name": "WrapResponse",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "An encoder response; contains either a numeric value (as a BigInt or Big)\nor an address."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 821,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1035,
								"name": "IntegerWrapResponse"
							},
							{
								"type": "reference",
								"id": 1040,
								"name": "DecimalWrapResponse"
							},
							{
								"type": "reference",
								"id": 1045,
								"name": "AddressWrapResponse"
							}
						]
					}
				},
				{
					"id": 1064,
					"name": "abifyCalldataDecoding",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/abify.ts",
							"line": 346,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1065,
							"name": "abifyCalldataDecoding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 1066,
									"name": "decoding",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 886,
										"name": "CalldataDecoding"
									}
								},
								{
									"id": 1067,
									"name": "userDefinedTypes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 284,
										"name": "TypesById"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 886,
								"name": "CalldataDecoding"
							}
						}
					]
				},
				{
					"id": 1068,
					"name": "abifyLogDecoding",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/abify.ts",
							"line": 373,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1069,
							"name": "abifyLogDecoding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 1070,
									"name": "decoding",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 887,
										"name": "LogDecoding"
									}
								},
								{
									"id": 1071,
									"name": "userDefinedTypes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 284,
										"name": "TypesById"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 887,
								"name": "LogDecoding"
							}
						}
					]
				},
				{
					"id": 1072,
					"name": "abifyReturndataDecoding",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/abify.ts",
							"line": 391,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1073,
							"name": "abifyReturndataDecoding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 1074,
									"name": "decoding",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 888,
										"name": "ReturndataDecoding"
									}
								},
								{
									"id": 1075,
									"name": "userDefinedTypes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 284,
										"name": "TypesById"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 888,
								"name": "ReturndataDecoding"
							}
						}
					]
				},
				{
					"id": 852,
					"name": "decodeCalldata",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 52,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 853,
							"name": "decodeCalldata",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 854,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2045,
										"name": "EvmInfo"
									}
								},
								{
									"id": 855,
									"name": "isConstructor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1011,
										"name": "DecoderRequest"
									},
									{
										"type": "reference",
										"id": 886,
										"name": "CalldataDecoding"
									},
									{
										"type": "reference",
										"qualifiedName": "Uint8Array",
										"package": "typescript",
										"name": "Uint8Array"
									}
								],
								"qualifiedName": "Generator",
								"package": "typescript",
								"name": "Generator"
							}
						}
					]
				},
				{
					"id": 847,
					"name": "decodeEvent",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 205,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 848,
							"name": "decodeEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 849,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2045,
										"name": "EvmInfo"
									}
								},
								{
									"id": 850,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 851,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1018,
										"name": "LogOptions"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1011,
										"name": "DecoderRequest"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 887,
											"name": "LogDecoding"
										}
									},
									{
										"type": "reference",
										"qualifiedName": "Uint8Array",
										"package": "typescript",
										"name": "Uint8Array"
									}
								],
								"qualifiedName": "Generator",
								"package": "typescript",
								"name": "Generator"
							}
						}
					]
				},
				{
					"id": 856,
					"name": "decodeReturndata",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 605,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 857,
							"name": "decodeReturndata",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If there are multiple possibilities, they're always returned in\nthe order: return, revert, returnmessage, failure, empty, bytecode, unknownbytecode\nMoreover, within \"revert\", builtin ones are put above custom ones"
							},
							"parameters": [
								{
									"id": 858,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2045,
										"name": "EvmInfo"
									}
								},
								{
									"id": 859,
									"name": "successAllocation",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1190,
										"name": "ReturndataAllocation"
									}
								},
								{
									"id": 860,
									"name": "status",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 861,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1011,
										"name": "DecoderRequest"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 888,
											"name": "ReturndataDecoding"
										}
									},
									{
										"type": "reference",
										"qualifiedName": "Uint8Array",
										"package": "typescript",
										"name": "Uint8Array"
									}
								],
								"qualifiedName": "Generator",
								"package": "typescript",
								"name": "Generator"
							}
						}
					]
				},
				{
					"id": 862,
					"name": "decodeRevert",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 928,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 863,
							"name": "decodeRevert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Decodes the return data from a failed call.",
								"returns": "An array of possible decodings.  At the moment it's\n  impossible for there to be more than one.  (If the call didn't actually\n  fail, or failed in a nonstandard way, you may get no decodings at all, though!)\n\n  Decodings can either be decodings of revert messages, or decodings\n  indicating that there was no revert message.  If somehow both were to be\n  possible, they'd go in that order, although as mentioned, there (at least\n  currently) isn't any way for that to occur."
							},
							"parameters": [
								{
									"id": 864,
									"name": "returndata",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The returned data, as a Uint8Array."
									},
									"type": {
										"type": "reference",
										"qualifiedName": "Uint8Array",
										"package": "typescript",
										"name": "Uint8Array"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 888,
									"name": "ReturndataDecoding"
								}
							}
						}
					]
				},
				{
					"id": 841,
					"name": "decodeVariable",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 34,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 842,
							"name": "decodeVariable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 843,
									"name": "definition",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1674,
										"name": "AstNode"
									}
								},
								{
									"id": 844,
									"name": "pointer",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1953,
										"name": "DataPointer"
									}
								},
								{
									"id": 845,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2045,
										"name": "EvmInfo"
									}
								},
								{
									"id": 846,
									"name": "compilationId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 1011,
										"name": "DecoderRequest"
									},
									{
										"type": "reference",
										"id": 294,
										"name": "Format.Values.Result"
									},
									{
										"type": "reference",
										"qualifiedName": "Uint8Array",
										"package": "typescript",
										"name": "Uint8Array"
									}
								],
								"qualifiedName": "Generator",
								"package": "typescript",
								"name": "Generator"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Namespaces",
					"kind": 4,
					"children": [
						1133,
						1546,
						1535,
						1076,
						1109,
						1749,
						1738,
						1841,
						1910,
						2004,
						2079,
						79,
						1347,
						1355,
						1952,
						1385,
						1402,
						1422,
						1330,
						2157
					],
					"categories": [
						{
							"title": "Data",
							"children": [
								79
							]
						},
						{
							"title": "ABI data location",
							"children": [
								1133,
								1330
							]
						},
						{
							"title": "Solidity data location",
							"children": [
								1535,
								1347,
								1355,
								1385,
								1402,
								1422
							]
						},
						{
							"title": "Other",
							"children": [
								1546,
								1076,
								1109,
								1749,
								1738,
								1841,
								1910,
								2004,
								2079,
								1952,
								2157
							]
						}
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						877,
						880,
						2318
					],
					"categories": [
						{
							"title": "Errors",
							"children": [
								2318
							]
						},
						{
							"title": "Exception",
							"children": [
								877
							]
						},
						{
							"title": "Other",
							"children": [
								880
							]
						}
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1003,
						2340,
						1031,
						1045,
						942,
						1061,
						965,
						1052,
						1015,
						903,
						1058,
						1028,
						1040,
						997,
						932,
						889,
						1025,
						1035,
						1018,
						912,
						2325,
						958,
						951,
						988,
						982,
						1007,
						1012,
						1055,
						975,
						920,
						926
					],
					"categories": [
						{
							"title": "Output",
							"children": [
								1003,
								942,
								1061,
								965,
								1052,
								903,
								1058,
								997,
								932,
								889,
								912,
								958,
								951,
								988,
								982,
								1007,
								1055,
								975,
								920,
								926
							]
						},
						{
							"title": "Requests",
							"children": [
								1031,
								1045,
								1015,
								1028,
								1040,
								1025,
								1035,
								1012
							]
						},
						{
							"title": "Inputs",
							"children": [
								1018
							]
						},
						{
							"title": "Interfaces",
							"children": [
								2340,
								2325
							]
						}
					]
				},
				{
					"title": "Type Aliases",
					"kind": 4194304,
					"children": [
						2339,
						1050,
						886,
						2315,
						1011,
						885,
						1023,
						2312,
						887,
						2314,
						2316,
						2317,
						888,
						2313,
						1024,
						1034
					],
					"categories": [
						{
							"title": "Output",
							"children": [
								886,
								885,
								887,
								888
							]
						},
						{
							"title": "Enumerations",
							"children": [
								2315,
								2312,
								2314,
								2316,
								2317,
								2313
							]
						},
						{
							"title": "Requests",
							"children": [
								1011,
								1024,
								1034
							]
						},
						{
							"title": "Inputs",
							"children": [
								1050,
								1023
							]
						},
						{
							"title": "Interfaces",
							"children": [
								2339
							]
						}
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1064,
						1068,
						1072,
						852,
						847,
						856,
						862,
						841
					],
					"categories": [
						{
							"title": "Decoding",
							"children": [
								852,
								847,
								856,
								841
							]
						},
						{
							"title": "Decoding convenience",
							"children": [
								862
							]
						},
						{
							"title": "ABIfication",
							"children": [
								1064,
								1068,
								1072
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "codec/lib/index.ts",
					"line": 68,
					"character": 0
				}
			]
		},
		{
			"id": 2,
			"name": "@truffle/decoder",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "# Truffle Decoder",
				"text": "This module provides an interface for decoding contract state, transaction\ncalldata, events, and return values and revert strings.  It's an interface to\nthe same low-level decoding functionality that Truffle Debugger uses.  However,\nit has additional functionality that the debugger does not need, and the\ndebugger has additional functionality that this decoder does not need.\n\nThe interface is split into three classes: The project decoder, the contract\ndecoder, and the contract instance decoder.  The project decoder is associated\nto the project as a whole and decodes transaction calldata and events.  The\ncontract decoder is associated to a specific contract class.  It has all the\ncapabilities of the project decoder, but it can also decode return values from\ncalls made by the given contract class.  The contract instance decoder is\nassociated to a specific contract instance; it again has all the capabilities\nof the project decoder and contract decoder, but it can also decode the state\nvariables for the specific instance.  (In addition, in the case that the\ncontract does not include a `deployedBytecode` field in its artifact, which can\nhinder decoding certain things, the contract instance decoder can sometimes\nwork around this where the other decoders cannot.)\n\nThis documentation describes the current state of the decoder, but further\nimprovements are planned.\n\n## Usage\n\n### Initialization\n\nCreate a decoder with one of the various constructor functions.\n\nFor a project decoder, use the [[forProject|`forProject`]] function.\n\nFor a contract decoder, use the [[forArtifact|`forArtifact`]] or\n[[forContract|`forContract`]] function.\n\nFor a contract instance decoder, use one of the following:\n[[forDeployedArtifact|`forDeployedArtifact`]]\n[[forDeployedContract|`forDeployedContract`]]\n[[forArtifactAt|`forArtifactAt`]]\n[[forContractAt|`forContractAt`]]\n[[forContractInstance|`forContractInstance`]]\n[[forAddress|`forAddress`]]\n\nSee the documentation of these functions for details, or below for usage\nexamples.\n\nAll of these functions take a final argument in which information about the\nproject is specified; currently only a few methods for specifying project\ninformation are allowed, but more are planned.\n\nOne can also spawn decoders from other decoders by supplying additional\ninformation.  See the documentation for the individual decoder classes for a\nmethod listing.\n\n### Decoder methods\n\nSee the documentation for the individual decoder classes for a method listing.\n\n### Output format information\n\nThe decoder outputs lossless, machine-readable [[Format.Values.Result]] objects\ncontaining individual decoded values. See the [[Format|format documentation]]\nfor an overview and complete module listing.\n\n### Decoding modes, abification, and caveats\n\nThe decoder runs in either of two modes: full mode or ABI mode. Full mode\nrequires some additional constraints but returns substantially more detailed\ninformation. Please see the notes on [decoding modes](../#decoding-modes) for\nmore about this distinction.\n\nSee also the notes about [decoding state variables](../#additional-notes-on-decoding-state-variables) for additional\ncaveats about what may or may not be fully decodable.\n\n### Basic usage examples\n\n#### Decoding a log with the project decoder\n\nThis usage example is for a project with two contracts, `Contract1` and\n`Contract2`.\n\n```typescript\nimport { forProject } from \"@truffle/decoder\";\nconst contract1 = artifacts.require(\"Contract1\");\nconst contract2 = artifacts.require(\"Contract2\");\nconst provider = web3.currentProvider;\nconst decoder = await Decoder.forProject(provider, [contract1, contract2]);\nconst decodings = await decoder.decodeLog(log);\n```\n\nThe usage of [[ProjectDecoder.decodeTransaction|decodeTransaction]] is similar.\n\nFor getting already-decoded logs meeting appropriate conditions, see\n[[ProjectDecoder.events]].\n\n#### Decoding state variables with the contract instance decoder\n\nThis usage example is for decoding the state variables of a contract `Contract`\nin a project that also contains a contract `OtherContract`.\n\n```typescript\nimport { forContract } from \"@truffle/decoder\";\nconst contract = artifacts.require(\"Contract\");\nconst otherContract = artifacts.require(\"OtherContract\");\nconst decoder = await Decoder.forContract(contract, [otherContract]);\nconst instanceDecoder = await decoder.forInstance();\nconst variables = await instanceDecoder.variables();\n```\n\nIn this example, we use the deployed version of `Contract`.  If we wanted an\ninstance at a different address, we could pass the address to `forInstance`.\n\nIn addition, rather than using `forContract` and then `forInstance`, we could\nalso use [[forDeployedContract|`forContractInstance`]] to perform both of these\nin one step.  If we wanted to do this with a specified address, we could use\n[[forContractAt|`forContractAt`]].\n\nYet another way would be:\n```typescript\nimport { forContractInstance } from \"@truffle/decoder\";\nconst contract = artifacts.require(\"Contract\");\nconst otherContract = artifacts.require(\"OtherContract\");\nconst deployedContract = await contract.deployed();\nconst instanceDecoder = await Decoder.forContractInstance(deployedContract, [otherContract]);\nconst variables = await instanceDecoder.variables();\n```\n\nThese examples are not exhaustive.\n\nOne can find more advanced decoding examples with\n[[ContractInstanceDecoder.variable|`variable`]] and\n[[ContractInstanceDecoder.watchMappingKey|`watchMappingKey`]] at the\ndocumentation for these individual functions.\n"
			},
			"originalName": "decoder/lib",
			"children": [
				{
					"id": 2786,
					"name": "ExtrasAllowed",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 163,
							"character": 2
						}
					],
					"target": 1023
				},
				{
					"id": 2762,
					"name": "StateVariable",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 158,
							"character": 2
						}
					],
					"target": 1007
				},
				{
					"id": 2734,
					"name": "ContractAllocationFailedError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that something went wrong while attempting to determine the location\nof this contract's state variables.  This error will be thrown if you attempt to use\ndecoding functions after something went wrong during setup.  Unfortunately, we can't\nalways avoid this at the moment; we're hoping to make this more robust in the future\nwith Truffle DB.  In the meantime, it is at least worth noting that you should not encounter\nthis error if your entire project was written in Solidity and all compiled at once.  Sorry."
					},
					"children": [
						{
							"id": 2735,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 67,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 2736,
									"name": "new ContractAllocationFailedError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2737,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2738,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2739,
											"name": "compilationId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2734,
										"name": "ContractAllocationFailedError"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Error.constructor"
							}
						},
						{
							"id": 2742,
							"name": "compilationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 66,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2741,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 65,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2740,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 64,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2735
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2742,
								2741,
								2740
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 63,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "Error",
							"package": "typescript",
							"name": "Error"
						}
					]
				},
				{
					"id": 2716,
					"name": "ContractBeingDecodedHasNoNodeError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the contract you are attempting to decode does not have AST\ninformation associated with it, or that the decoder cannot find it.  This error will\nbe thrown if you attempt to use functions that require AST information with such a contract."
					},
					"children": [
						{
							"id": 2717,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 13,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 2718,
									"name": "new ContractBeingDecodedHasNoNodeError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2719,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2720,
											"name": "compilationId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2716,
										"name": "ContractBeingDecodedHasNoNodeError"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Error.constructor"
							}
						},
						{
							"id": 2722,
							"name": "compilationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 12,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2721,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 11,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2717
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2722,
								2721
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 10,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "Error",
							"package": "typescript",
							"name": "Error"
						}
					]
				},
				{
					"id": 2343,
					"name": "ContractDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The ContractDecoder class.  Decodes return values, and spawns the\n[[ContractInstanceDecoder]] class.  Also, decodes transactions logs.  See\nbelow for a method listing."
					},
					"children": [
						{
							"id": 2344,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1244,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 2345,
									"name": "new ContractDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2346,
											"name": "contract",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1811,
												"name": "Contract"
											}
										},
										{
											"id": 2347,
											"name": "compilation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1796,
												"name": "Compilation"
											}
										},
										{
											"id": 2348,
											"name": "projectDecoder",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2532,
												"name": "ProjectDecoder"
											}
										},
										{
											"id": 2349,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ContractObject"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2343,
										"name": "ContractDecoder"
									}
								}
							]
						},
						{
							"id": 2358,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1230,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 2053,
								"name": "AllocationInfo"
							}
						},
						{
							"id": 2354,
							"name": "artifact",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1225,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "ContractObject"
							}
						},
						{
							"id": 2352,
							"name": "compilation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1223,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1796,
								"name": "Compilation"
							}
						},
						{
							"id": 2357,
							"name": "contextHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1228,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2351,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1221,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1868,
								"name": "Contexts"
							}
						},
						{
							"id": 2353,
							"name": "contract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1224,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1811,
								"name": "Contract"
							}
						},
						{
							"id": 2356,
							"name": "contractNetwork",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1227,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2355,
							"name": "contractNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1226,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1674,
								"name": "AstNode"
							}
						},
						{
							"id": 2359,
							"name": "noBytecodeAllocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1231,
									"character": 10
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2360,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 2361,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 2362,
												"name": "selector",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1220,
											"name": "AbiData.Allocate.FunctionCalldataAndReturndataAllocation"
										}
									}
								}
							}
						},
						{
							"id": 2365,
							"name": "projectDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1239,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 2532,
								"name": "ProjectDecoder"
							}
						},
						{
							"id": 2350,
							"name": "providerAdapter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1219,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "ProviderAdapter"
							}
						},
						{
							"id": 2364,
							"name": "stateVariableReferences",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1237,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1477,
									"name": "StateVariableAllocation"
								}
							}
						},
						{
							"id": 2363,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1236,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 284,
								"name": "TypesById"
							}
						},
						{
							"id": 2368,
							"name": "context",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1341,
									"character": 14
								}
							],
							"getSignature": [
								{
									"id": 2369,
									"name": "context",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1871,
										"name": "Context"
									}
								}
							]
						},
						{
							"id": 2404,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1519,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2405,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectDecoder.abifyCalldataDecoding]]."
									},
									"parameters": [
										{
											"id": 2406,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 886,
												"name": "CalldataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 886,
										"name": "CalldataDecoding"
									}
								}
							]
						},
						{
							"id": 2407,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1526,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2408,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectDecoder.abifyLogDecoding]]."
									},
									"parameters": [
										{
											"id": 2409,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 887,
												"name": "LogDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 887,
										"name": "LogDecoding"
									}
								}
							]
						},
						{
							"id": 2410,
							"name": "abifyReturndataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1533,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2411,
									"name": "abifyReturndataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectDecoder.abifyReturndataDecoding]]."
									},
									"parameters": [
										{
											"id": 2412,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 888,
												"name": "ReturndataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 888,
										"name": "ReturndataDecoding"
									}
								}
							]
						},
						{
							"id": 2397,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1496,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2398,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[ProjectDecoder.decodeLog]]."
									},
									"parameters": [
										{
											"id": 2399,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The log to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"id": 2802,
												"name": "Log"
											}
										},
										{
											"id": 2400,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2783,
												"name": "DecodeLogOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 887,
													"name": "LogDecoding"
												}
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2370,
							"name": "decodeReturnValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1377,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2371,
									"name": "decodeReturnValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes the return value of a call.  Return values can be ambiguous, so\nthis function returns an array of [[ReturndataDecoding|ReturndataDecodings]].\n\nNote that return values are decoded in strict mode, so none of the decodings should\ncontain errors; if a decoding would contain an error, instead it is simply excluded from the\nlist of possible decodings.\n\nIf there are multiple possible decodings, they will always be listed in the following order:\n1. The decoded return value from a successful call.\n2. The decoded revert message from a call that reverted with a message.\n3. A decoding indicating that the call reverted with no message.\n4. A decoding indicating that the call self-destructed.\n\nYou can check the kind and field to distinguish between these.\n\nIf no possible decodings are found, the returned array of decodings will be empty.\n\nNote that different decodings may use different decoding modes.\n\nDecoding creation calls with this method is not supported.  If you simply\nwant to decode a revert message from an arbitrary call that you know\nfailed, you may also want to see the [[decodeRevert]] function in\n`@truffle/codec`.\n"
									},
									"parameters": [
										{
											"id": 2372,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The abi entry for the function call whose return value is being decoded."
											},
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										},
										{
											"id": 2373,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The data to be decoded, as a hex string (beginning with \"0x\")."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2374,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Additional options, such as the block the call occurred in.\n  See [[ReturnOptions]] for more information.\n"
											},
											"type": {
												"type": "reference",
												"id": 2780,
												"name": "ReturnOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 888,
													"name": "ReturndataDecoding"
												}
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2375,
							"name": "decodeReturnValueWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1392,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2376,
									"name": "decodeReturnValueWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2377,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										},
										{
											"id": 2378,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2379,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2780,
												"name": "ReturnOptions"
											},
											"defaultValue": "{}"
										},
										{
											"id": 2380,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1868,
												"name": "Contexts"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 888,
													"name": "ReturndataDecoding"
												}
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2394,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1484,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2395,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[ProjectDecoder.decodeTransaction]]."
									},
									"parameters": [
										{
											"id": 2396,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The transaction to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"id": 2787,
												"name": "Transaction"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 886,
												"name": "CalldataDecoding"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2401,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1510,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2402,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[ProjectDecoder.events]]."
									},
									"parameters": [
										{
											"id": 2403,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Used to determine what events to fetch and how to decode them;\n  see the documentation on the EventOptions type for more.\n"
											},
											"type": {
												"type": "reference",
												"id": 2773,
												"name": "EventOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 2763,
													"name": "DecodedLog"
												}
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2381,
							"name": "forInstance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1455,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2382,
									"name": "forInstance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of this contract."
									},
									"parameters": [
										{
											"id": 2383,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The address of the contract instance decode.  If left out, it will be autodetected.\n  If an invalid address is provided, this method will throw an exception.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2426,
												"name": "ContractInstanceDecoder"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2413,
							"name": "getAllocations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1544,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2414,
									"name": "getAllocations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 2053,
										"name": "AllocationInfo"
									}
								}
							]
						},
						{
							"id": 2384,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1461,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2385,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2386,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2387,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2424,
							"name": "getContractInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1572,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2425,
									"name": "getContractInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "ContractInfo"
									}
								}
							]
						},
						{
							"id": 2419,
							"name": "getNoBytecodeAllocations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1565,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2420,
									"name": "getNoBytecodeAllocations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2421,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 2422,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 2423,
														"name": "selector",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "reference",
													"id": 1220,
													"name": "AbiData.Allocate.FunctionCalldataAndReturndataAllocation"
												}
											}
										}
									}
								}
							]
						},
						{
							"id": 2417,
							"name": "getProjectDecoder",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1558,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2418,
									"name": "getProjectDecoder",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 2532,
										"name": "ProjectDecoder"
									}
								}
							]
						},
						{
							"id": 2415,
							"name": "getStateVariableReferences",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1551,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2416,
									"name": "getStateVariableReferences",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1477,
											"name": "StateVariableAllocation"
										}
									}
								}
							]
						},
						{
							"id": 2366,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1337,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2367,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2391,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1472,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2392,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2393,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1050,
												"name": "BlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2388,
							"name": "reverseEnsResolve",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1468,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2389,
									"name": "reverseEnsResolve",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2390,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2344
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2358,
								2354,
								2352,
								2357,
								2351,
								2353,
								2356,
								2355,
								2359,
								2365,
								2350,
								2364,
								2363
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2368
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2404,
								2407,
								2410,
								2397,
								2370,
								2375,
								2394,
								2401,
								2381,
								2413,
								2384,
								2424,
								2419,
								2417,
								2415,
								2366,
								2391,
								2388
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 1218,
							"character": 13
						}
					]
				},
				{
					"id": 2426,
					"name": "ContractInstanceDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The ContractInstanceDecoder class.  Decodes storage for a specified\ninstance.  Also, decodes transactions, logs, and return values.  See below\nfor a method listing.",
						"text": "Note that when using this class to decode transactions, logs, and return\nvalues, it does have one advantage over using the ProjectDecoder or\nContractDecoder.  If the artifact for the class does not have a\ndeployedBytecode field, the ProjectDecoder (and therefore also the\nContractDecoder) will not be able to tell that this instance is of that\nclass, and so will fail to decode transactions sent to it or logs\noriginating from it, and will fall back to ABI mode when decoding return\nvalues received from it.  However, the ContractInstanceDecoder has that\ninformation and will make use of it, making it possible for it to decode\ntransactions sent to this instance, or logs originating from it, or decode\nreturn values received from it in full mode, even if the deployedBytecode\nfield is missing."
					},
					"children": [
						{
							"id": 2427,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1636,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 2428,
									"name": "new ContractInstanceDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2429,
											"name": "contractDecoder",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2343,
												"name": "ContractDecoder"
											}
										},
										{
											"id": 2430,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2426,
										"name": "ContractInstanceDecoder"
									}
								}
							]
						},
						{
							"id": 2441,
							"name": "additionalContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1616,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1868,
								"name": "Contexts"
							},
							"defaultValue": "{}"
						},
						{
							"id": 2447,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1620,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 2053,
								"name": "AllocationInfo"
							}
						},
						{
							"id": 2432,
							"name": "compilation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1606,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1796,
								"name": "Compilation"
							}
						},
						{
							"id": 2439,
							"name": "compiler",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1613,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1743,
								"name": "CompilerVersion"
							}
						},
						{
							"id": 2438,
							"name": "contextHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1612,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2440,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1615,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1868,
								"name": "Contexts"
							},
							"defaultValue": "{}"
						},
						{
							"id": 2433,
							"name": "contract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1607,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1811,
								"name": "Contract"
							}
						},
						{
							"id": 2436,
							"name": "contractAddress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1610,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2437,
							"name": "contractCode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1611,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2452,
							"name": "contractDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1629,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 2343,
								"name": "ContractDecoder"
							}
						},
						{
							"id": 2435,
							"name": "contractNetwork",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1609,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2434,
							"name": "contractNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1608,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1674,
								"name": "AstNode"
							}
						},
						{
							"id": 2454,
							"name": "encoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1631,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "ProjectEncoder"
							}
						},
						{
							"id": 2449,
							"name": "internalFunctionsTable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1623,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 2061,
								"name": "InternalFunctions"
							}
						},
						{
							"id": 2450,
							"name": "mappingKeys",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1625,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1530,
									"name": "Slot"
								}
							},
							"defaultValue": "[]"
						},
						{
							"id": 2453,
							"name": "projectDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1630,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 2532,
								"name": "ProjectDecoder"
							}
						},
						{
							"id": 2431,
							"name": "providerAdapter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1604,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "ProviderAdapter"
							}
						},
						{
							"id": 2442,
							"name": "referenceDeclarations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1618,
									"character": 10
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2443,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 2444,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 2445,
												"name": "compilationId",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1722,
											"name": "Ast.AstNodes"
										}
									}
								}
							}
						},
						{
							"id": 2448,
							"name": "stateVariableReferences",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1622,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1477,
									"name": "StateVariableAllocation"
								}
							}
						},
						{
							"id": 2451,
							"name": "storageCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1627,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "StorageCache"
							},
							"defaultValue": "{}"
						},
						{
							"id": 2446,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1619,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 284,
								"name": "TypesById"
							}
						},
						{
							"id": 2457,
							"name": "context",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1778,
									"character": 14
								}
							],
							"getSignature": [
								{
									"id": 2458,
									"name": "context",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1871,
										"name": "Context"
									}
								}
							]
						},
						{
							"id": 2513,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 2217,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2514,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectDecoder.abifyCalldataDecoding]]."
									},
									"parameters": [
										{
											"id": 2515,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 886,
												"name": "CalldataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 886,
										"name": "CalldataDecoding"
									}
								}
							]
						},
						{
							"id": 2516,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 2224,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2517,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectDecoder.abifyLogDecoding]]."
									},
									"parameters": [
										{
											"id": 2518,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 887,
												"name": "LogDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 887,
										"name": "LogDecoding"
									}
								}
							]
						},
						{
							"id": 2519,
							"name": "abifyReturndataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 2231,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2520,
									"name": "abifyReturndataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectDecoder.abifyReturndataDecoding]]."
									},
									"parameters": [
										{
											"id": 2521,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 888,
												"name": "ReturndataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 888,
										"name": "ReturndataDecoding"
									}
								}
							]
						},
						{
							"id": 2459,
							"name": "checkAllocationSuccess",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1782,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2460,
									"name": "checkAllocationSuccess",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2525,
							"name": "constructSlot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 2265,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2526,
									"name": "constructSlot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2527,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2528,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 2529,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 2530,
															"name": "slot",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "decoder/lib/decoders.ts",
																	"line": 2268,
																	"character": 15
																}
															],
															"type": {
																"type": "reference",
																"id": 1530,
																"name": "Slot"
															}
														},
														{
															"id": 2531,
															"name": "type",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "decoder/lib/decoders.ts",
																	"line": 2268,
																	"character": 36
																}
															],
															"type": {
																"type": "reference",
																"id": 104,
																"name": "Type"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																2530,
																2531
															]
														}
													]
												}
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2504,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 2181,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2505,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[ProjectDecoder.decodeLog]].\n"
									},
									"parameters": [
										{
											"id": 2506,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2802,
												"name": "Log"
											}
										},
										{
											"id": 2507,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2783,
												"name": "DecodeLogOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 887,
													"name": "LogDecoding"
												}
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2508,
							"name": "decodeReturnValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 2201,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2509,
									"name": "decodeReturnValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[ContractDecoder.decodeReturnValue]].\n\nIf the contract artifact is missing its bytecode, using this method,\nrather than the one in [[ContractDecoder]], can sometimes provide\nadditional decoding information.\n"
									},
									"parameters": [
										{
											"id": 2510,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										},
										{
											"id": 2511,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2512,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2780,
												"name": "ReturnOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 888,
													"name": "ReturndataDecoding"
												}
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2501,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 2166,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2502,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Behaves mostly as [[ProjectDecoder.decodeTransaction]].  However, it is\ncapable of more robustly decoding transactions that were sent to this\nparticular instance.\n"
									},
									"parameters": [
										{
											"id": 2503,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2787,
												"name": "Transaction"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 886,
												"name": "CalldataDecoding"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2461,
							"name": "decodeVariable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1798,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2462,
									"name": "decodeVariable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2463,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1477,
												"name": "StateVariableAllocation"
											}
										},
										{
											"id": 2464,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1007,
												"name": "StateVariable"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2522,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 2246,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2523,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This mostly behaves as [[ProjectDecoder.events]].\nHowever, unlike other variants of this function, this one, by default, restricts to events originating from this instance's address.\nIf you don't want to restrict like that, you can explicitly use `address: undefined` in the options to disable this.\n(You can also of course set a different address to restrict to that.)"
									},
									"parameters": [
										{
											"id": 2524,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Used to determine what events to fetch; see the documentation on the [[EventOptions]] type for more.\n"
											},
											"type": {
												"type": "reference",
												"id": 2773,
												"name": "EventOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 2763,
													"name": "DecodedLog"
												}
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2475,
							"name": "findVariableByNameOrId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1969,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2476,
									"name": "findVariableByNameOrId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2477,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1477,
										"name": "StateVariableAllocation"
									}
								}
							]
						},
						{
							"id": 2483,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 2035,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2484,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2485,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2486,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2478,
							"name": "getStorage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 2002,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2479,
									"name": "getStorage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2480,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2481,
											"name": "slot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "BN",
												"package": "@types/bn.js",
												"name": "BN"
											}
										},
										{
											"id": 2482,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2455,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1676,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2456,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2490,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 2046,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2491,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2492,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1050,
												"name": "BlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2487,
							"name": "reverseEnsResolve",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 2042,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2488,
									"name": "reverseEnsResolve",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2489,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2465,
							"name": "state",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1871,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2466,
									"name": "state",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Returns information about the state of the contract, but does not include\ninformation about the storage or decoded variables.  See the documentation\nfor the [[ContractState]] type for more."
									},
									"parameters": [
										{
											"id": 2467,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values.\n"
											},
											"type": {
												"type": "reference",
												"id": 1050,
												"name": "BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2756,
												"name": "ContractState"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2497,
							"name": "unwatchMappingKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 2135,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2498,
									"name": "unwatchMappingKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Opposite of [[watchMappingKey]]; unwatches the specified mapping key.  See\nwatchMappingKey for more on how watching mapping keys works, and on how\nthe parameters work.\n\nNote that unwatching a mapping key will also unwatch all its descendants.\nE.g., if `m` is of type `mapping(uint => mapping(uint => uint))`, then\nunwatching `m[0]` will also unwatch `m[0][0]`, `m[0][1]`, etc, if these\nare currently watched.\n"
									},
									"parameters": [
										{
											"id": 2499,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2500,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2471,
							"name": "variable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1951,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2472,
									"name": "variable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes an individual contract variable; returns its value as a\n[[Format.Values.Result|Result]].  See the documentation for\n[[variables|variables()]] for various caveats that also apply here.\n\nIf the variable can't be located, throws an exception.",
										"tags": [
											{
												"tag": "example",
												"text": "Consider a contract `Derived` inheriting from a contract `Base`.\n  Suppose `Derived` has a variable `x` and `Base` has variables `x` and\n  `y`.  One can access `Derived.x` as `variable(\"x\")` or\n  `variable(\"Derived.x\")`, can access `Base.x` as `variable(\"Base.x\")`,\n  and can access `Base.y` as `variable(\"y\")` or `variable(\"Base.y\")`.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2473,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The name (or numeric ID, if you know that) of the\n  variable.  Can be given as a qualified name, allowing one to get at\n  shadowed variables from base contracts.  If given by ID, can be given as a\n  number or numeric string."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2474,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values."
											},
											"type": {
												"type": "reference",
												"id": 1050,
												"name": "BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 294,
												"name": "Result"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2468,
							"name": "variables",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1911,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2469,
									"name": "variables",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes the contract's variables; returns an array of these decoded variables.\nSee the documentation of the [[DecodedVariable]] type for more.\n\nNote that variable decoding can only operate in full mode; if the decoder wasn't able to\nstart up in full mode, this method will throw a [[ContractAllocationFailedError]].\n\nNote that decoding mappings requires first watching mapping keys in order to get any results;\nsee the documentation for [[watchMappingKey]].\nAdditional methods to make mapping decoding a less manual affair are planned for the future.\n\nAlso, due to a technical limitation, it is not currently possible to\nusefully decode internal function pointers.  See the\n[[Format.Values.FunctionInternalValue|FunctionInternalValue]]\ndocumentation and the README for more on how these are handled."
									},
									"parameters": [
										{
											"id": 2470,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values.\n"
											},
											"type": {
												"type": "reference",
												"id": 1050,
												"name": "BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1007,
													"name": "StateVariable"
												}
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2493,
							"name": "watchMappingKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 2098,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2494,
									"name": "watchMappingKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Watches a mapping key; adds it to the decoder's list of watched mapping\nkeys.  This affects the results of both [[variables|variables()]] and\n[[variable|variable()]].  When a mapping is decoded, only the values at\nits watched keys will be included in its value.\n\nNote that it is possible\nto watch mappings that are inside structs, arrays, other mappings, etc;\nsee below for more on how to do this.\n\nNote that watching mapping keys is\nonly possible in full mode; if the decoder wasn't able to start up in full\nmode, this method will throw an exception.\n\n(A bad variable name will cause an exception though; that input is checked.)",
										"tags": [
											{
												"tag": "example",
												"text": "First, a simple example.  Say we have a mapping `m` of type\n  `mapping(uint => uint)`.  You could call `watchMappingKey(\"m\", 0)` to\n  watch `m[0]`."
											},
											{
												"tag": "example",
												"text": "Now for a slightly more complicated example.  Say `m` is of type\n  `mapping(uint => mapping(uint => uint))`, then to watch `m[3][5]`, you\n  can call `watchMappingKey(\"m\", 3, 5)`.  This will also automatically\n  watch `m[3]`; otherwise, watching `m[3][5]` wouldn't do much of\n  anything."
											},
											{
												"tag": "example",
												"text": "Now for a well more complicated example.  Say we have a struct\n  type `MapStruct` with a member called `map` which is a `mapping(string => string)`,\n  and say we have a variable `arr` of type `MapStruct[]`, then one could\n  watch `arr[3].map[\"hello\"]` by calling `watchMappingKey(\"arr\", 3, \"map\", \"hello\")`.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2495,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The variable that the mapping lives under; this works like\n  the nameOrId argument to [[variable|variable()]].  If the mapping is a\n  top-level state variable, put the mapping itself here.  Otherwise, put the\n  top-level state variable it lives under."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2496,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"shortText": "Further arguments to watchMappingKey, if given, will be\n  interpreted as indices into or members of the variable identified by the\n  variable argument; see the example.  Array indices and mapping\n  keys are specified by value; struct members are specified by name.\n\n  Values (for array indices and mapping keys) may be given in any format\n  understood by Truffle Encoder; see the documentation for\n  [[Encoder.ProjectEncoder.wrap|ProjectEncoder.wrap]] for details.\n\n  Note that if the path to a given mapping key\n  includes mapping keys above it, any ancestors will also be watched\n  automatically."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2427
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2441,
								2447,
								2432,
								2439,
								2438,
								2440,
								2433,
								2436,
								2437,
								2452,
								2435,
								2434,
								2454,
								2449,
								2450,
								2453,
								2431,
								2442,
								2448,
								2451,
								2446
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2457
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2513,
								2516,
								2519,
								2459,
								2525,
								2504,
								2508,
								2501,
								2461,
								2522,
								2475,
								2483,
								2478,
								2455,
								2490,
								2487,
								2465,
								2497,
								2471,
								2468,
								2493
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 1603,
							"character": 13
						}
					]
				},
				{
					"id": 2723,
					"name": "ContractNotFoundError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the contract you are attempting to decode could not be found in\nthe project info.  This error will be thrown if you attempt to spawn a contract decoder or\ncontract instance decoder for a contract not appearing in the project info."
					},
					"children": [
						{
							"id": 2724,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 33,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 2725,
									"name": "new ContractNotFoundError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2726,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2727,
											"name": "bytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2728,
											"name": "deployedBytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2729,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2723,
										"name": "ContractNotFoundError"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Error.constructor"
							}
						},
						{
							"id": 2733,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 32,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2731,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 30,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2730,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 29,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2732,
							"name": "deployedBytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 31,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2724
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2733,
								2731,
								2730,
								2732
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 28,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "Error",
							"package": "typescript",
							"name": "Error"
						}
					]
				},
				{
					"id": 2743,
					"name": "InvalidAddressError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that an invalid address was passed to one of the\ncontract instance decoder spawners ([[forContractInstance]], etc).  Valid\naddresses are those that Web3 accepts; i.e., either those with correct\nchecksums, or those that are all-lowercase or all-uppercase to deliberately\ncircumvent the checksum."
					},
					"children": [
						{
							"id": 2744,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 88,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 2745,
									"name": "new InvalidAddressError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2746,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2743,
										"name": "InvalidAddressError"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Error.constructor"
							}
						},
						{
							"id": 2747,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 87,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2744
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2747
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 86,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "Error",
							"package": "typescript",
							"name": "Error"
						}
					]
				},
				{
					"id": 2753,
					"name": "NoProviderError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that no provider was passed to the decoder."
					},
					"children": [
						{
							"id": 2754,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 172,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 2755,
									"name": "new NoProviderError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2753,
										"name": "NoProviderError"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Error.constructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2754
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 171,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "Error",
							"package": "typescript",
							"name": "Error"
						}
					]
				},
				{
					"id": 2532,
					"name": "ProjectDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The ProjectDecoder class.  Decodes transactions and logs.  See below for a method listing."
					},
					"children": [
						{
							"id": 2533,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 79,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 2534,
									"name": "new ProjectDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2535,
											"name": "compilations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1796,
													"name": "Compilation"
												}
											}
										},
										{
											"id": 2536,
											"name": "provider",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Provider"
											}
										},
										{
											"id": 2537,
											"name": "ensSettings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 2811,
												"name": "EnsSettings"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2532,
										"name": "ProjectDecoder"
									}
								}
							]
						},
						{
							"id": 2557,
							"name": "addProjectInfoNonce",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 74,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 2549,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 66,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 2053,
								"name": "AllocationInfo"
							}
						},
						{
							"id": 2550,
							"name": "codeCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 68,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "CodeCache"
							},
							"defaultValue": "{}"
						},
						{
							"id": 2539,
							"name": "compilations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 58,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1796,
									"name": "Compilation"
								}
							}
						},
						{
							"id": 2540,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 59,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1868,
								"name": "Contexts"
							},
							"defaultValue": "{}"
						},
						{
							"id": 2542,
							"name": "contractsAndContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 61,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1231,
									"name": "ContractAndContexts"
								}
							},
							"defaultValue": "[]"
						},
						{
							"id": 2541,
							"name": "deployedContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 60,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1868,
								"name": "Contexts"
							},
							"defaultValue": "{}"
						},
						{
							"id": 2555,
							"name": "ens",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 71,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 2551,
							"name": "ensCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 69,
									"character": 10
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2552,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 2553,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 2554,
												"name": "address",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"qualifiedName": "Uint8Array",
													"package": "typescript",
													"name": "Uint8Array"
												},
												{
													"type": "literal",
													"value": null
												}
											]
										}
									}
								}
							},
							"defaultValue": "{}"
						},
						{
							"id": 2556,
							"name": "ensSettings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 72,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 2811,
								"name": "EnsSettings"
							}
						},
						{
							"id": 2538,
							"name": "providerAdapter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 56,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "ProviderAdapter"
							}
						},
						{
							"id": 2543,
							"name": "referenceDeclarations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 63,
									"character": 10
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2544,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 2545,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 2546,
												"name": "compilationId",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1722,
											"name": "Ast.AstNodes"
										}
									}
								}
							}
						},
						{
							"id": 2548,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 65,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 284,
								"name": "TypesById"
							}
						},
						{
							"id": 2547,
							"name": "userDefinedTypesByCompilation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 64,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 287,
								"name": "TypesByCompilationAndId"
							}
						},
						{
							"id": 2603,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 669,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2604,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a [[CalldataDecoding]], which may have been produced in full mode or ABI mode,\nand converts it to its ABI mode equivalent.  See the README for more information.",
										"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
									},
									"parameters": [
										{
											"id": 2605,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The decoding to abify\n"
											},
											"type": {
												"type": "reference",
												"id": 886,
												"name": "CalldataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 886,
										"name": "CalldataDecoding"
									}
								}
							]
						},
						{
							"id": 2606,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 681,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2607,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a [[LogDecoding]], which may have been produced in full mode or ABI mode,\nand converts it to its ABI mode equivalent.  See the README for more information.",
										"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
									},
									"parameters": [
										{
											"id": 2608,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The decoding to abify\n"
											},
											"type": {
												"type": "reference",
												"id": 887,
												"name": "LogDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 887,
										"name": "LogDecoding"
									}
								}
							]
						},
						{
							"id": 2609,
							"name": "abifyReturndataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 694,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2610,
									"name": "abifyReturndataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a [[ReturndataDecoding]], which may have been produced in full mode\nor ABI mode, and converts it to its ABI mode equivalent.  See the README\nfor more information.",
										"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
									},
									"parameters": [
										{
											"id": 2611,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The decoding to abify\n"
											},
											"type": {
												"type": "reference",
												"id": 888,
												"name": "ReturndataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 888,
										"name": "ReturndataDecoding"
									}
								}
							]
						},
						{
							"id": 2563,
							"name": "addAdditionalProjectInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 315,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2564,
									"name": "addAdditionalProjectInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This function is asynchronous.**",
										"text": "Adds additional compilations to the decoder like [[addCompilations]],\nbut allows it to be specified in more general forms.\n"
									},
									"parameters": [
										{
											"id": 2565,
											"name": "projectInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Information about the additional compilations or\ncontracts to be decoded.  This may come in several forms; see the type\ndocumentation for more information.  If passing in `{ compilations: ... }`,\ntake care that the compilations have different IDs from others passed in\nso far, otherwise this will error.  If passed in in another form, an ID\nwill be assigned automatically, which should generally avoid any\ncollisions.\n"
											},
											"type": {
												"type": "reference",
												"id": 1834,
												"name": "ProjectInfo"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2560,
							"name": "addCompilations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 199,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2561,
									"name": "addCompilations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This function is asynchronous.**",
										"text": "Adds compilations to the decoder after it has started.  Note it is\nonly presently possible to do this with a `ProjectDecoder` and not\nwith the other decoder classes.\n"
									},
									"parameters": [
										{
											"id": 2562,
											"name": "compilations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The compilations to be added.  Take care that these\nhave IDs distinct from those the decoder already has.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1796,
													"name": "Compilation"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2587,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 545,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2588,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Takes a [[Log]] object and decodes it.  Logs can be ambiguous, so\nthis function returns an array of [[LogDecoding|LogDecodings]].\n\nNote that logs are decoded in strict mode, so (with one exception) none of the decodings should\ncontain errors; if a decoding would contain an error, instead it is simply excluded from the\nlist of possible decodings.  The one exception to this is that indexed parameters of reference\ntype cannot meaningfully be decoded, so those will decode to an error.\n\nIf there are multiple possible decodings, they will always be listed in the following order:\n\n1. Non-anonymous events coming from the contract itself (these will moreover be ordered\n  from most derived to most base)\n2. Non-anonymous events coming from libraries\n3. Anonymous events coming from the contract itself (again, ordered from most derived\n  to most base)\n4. Anonymous events coming from libraries\n\nYou can check the kind and class.contractKind fields to distinguish between these.\n\nIf no possible decodings are found, the returned array of decodings will be empty.\n\nNote that different decodings may use different decoding modes.\n\nUsing `options.extras = \"on\"` or `options.extras = \"necessary\"` will change the\nabove behavior; see the documentation on [[ExtrasAllowed]] for more.\n\nIf absolutely necessary, you can also set `options.disableChecks = true` to allow\nlooser decoding.  Only use this option if you know what you are doing.\n"
									},
									"parameters": [
										{
											"id": 2589,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The log to be decoded."
											},
											"type": {
												"type": "reference",
												"id": 2802,
												"name": "Log"
											}
										},
										{
											"id": 2590,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Options for controlling decoding.\n"
											},
											"type": {
												"type": "reference",
												"id": 2783,
												"name": "DecodeLogOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 887,
													"name": "LogDecoding"
												}
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2591,
							"name": "decodeLogWithAdditionalOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 555,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2592,
									"name": "decodeLogWithAdditionalOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2593,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2802,
												"name": "Log"
											}
										},
										{
											"id": 2594,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2773,
												"name": "EventOptions"
											},
											"defaultValue": "{}"
										},
										{
											"id": 2595,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1868,
												"name": "Contexts"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 887,
													"name": "LogDecoding"
												}
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2573,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 383,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2574,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Takes a [[Transaction]] object and decodes it.  The result is a\n[[CalldataDecoding]]; see the documentation on that interface for more.\n\nNote that decoding of transactions sent to libraries is presently not\nsupported and may have unreliable results.  Limited support for this is\nplanned for future versions."
									},
									"parameters": [
										{
											"id": 2575,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The transaction to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"id": 2787,
												"name": "Transaction"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 886,
												"name": "CalldataDecoding"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2579,
							"name": "decodeTransactionWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 429,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2580,
									"name": "decodeTransactionWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2581,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2787,
												"name": "Transaction"
											}
										},
										{
											"id": 2582,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1868,
												"name": "Contexts"
											},
											"defaultValue": "{}"
										},
										{
											"id": 2583,
											"name": "additionalAllocations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2584,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 2585,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 2586,
																"name": "selector",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "reference",
															"id": 1220,
															"name": "AbiData.Allocate.FunctionCalldataAndReturndataAllocation"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 886,
												"name": "CalldataDecoding"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2596,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 610,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2597,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Gets all events meeting certain conditions and decodes them.\nThis function is fairly rudimentary at the moment but more functionality\nwill be added in the future.",
										"returns": "An array of [[DecodedLog|DecodedLogs]].\n  These consist of a log together with its possible decodings; see that\n  type for more info.  And see [[decodeLog]] for more info on how log\n  decoding works in general.",
										"tags": [
											{
												"tag": "example",
												"text": "`events({name: \"TestEvent\"})` -- get events named \"TestEvent\"\n  from the most recent block\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2598,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Used to determine what events to fetch and how to decode\n  them; see the documentation on the [[EventOptions]] type for more."
											},
											"type": {
												"type": "reference",
												"id": 2773,
												"name": "EventOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 2763,
													"name": "DecodedLog"
												}
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2599,
							"name": "eventsWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 619,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2600,
									"name": "eventsWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2601,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2773,
												"name": "EventOptions"
											},
											"defaultValue": "{}"
										},
										{
											"id": 2602,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1868,
												"name": "Contexts"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 2763,
													"name": "DecodedLog"
												}
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2625,
							"name": "forAddress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 795,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2626,
									"name": "forAddress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of a contract in this\nproject.  Unlike [[forInstance]], this method doesn't require an artifact; it\nwill automatically detect the class of the given contract.  If it's not in\nthe project, or the decoder can't identify it, you'll get an exception."
									},
									"parameters": [
										{
											"id": 2627,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The address of the contract instance to decode.\n  If an invalid address is provided, this method will throw an exception."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2628,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "You can include this argument to specify that this should be\n  based on the addresses content's at a specific block (if say the contract\n  has since self-destructed).\n"
											},
											"type": {
												"type": "reference",
												"id": 1050,
												"name": "BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2426,
												"name": "ContractInstanceDecoder"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2618,
							"name": "forArtifact",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 736,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2619,
									"name": "forArtifact",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract decoder for a given contract artifact."
									},
									"parameters": [
										{
											"id": 2620,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK.\n\n  Note: The artifact must be for a contract that the decoder knows about;\n  otherwise you will have problems.\n"
											},
											"type": {
												"type": "reference",
												"name": "ContractObject"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2343,
												"name": "ContractDecoder"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2621,
							"name": "forInstance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 774,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2622,
									"name": "forInstance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of a contract in this\nproject."
									},
									"parameters": [
										{
											"id": 2623,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK.\n\n  Note: The artifact must be for a contract that the decoder knows about;\n  otherwise you will have problems."
											},
											"type": {
												"type": "reference",
												"name": "ContractObject"
											}
										},
										{
											"id": 2624,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The address of the contract instance to decode.  If left out, it will be autodetected.\n  If an invalid address is provided, this method will throw an exception.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2426,
												"name": "ContractInstanceDecoder"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2636,
							"name": "getAllocations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 850,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2637,
									"name": "getAllocations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 2053,
										"name": "AllocationInfo"
									}
								}
							]
						},
						{
							"id": 2566,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 329,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2567,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2568,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2569,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2612,
							"name": "getContextByAddress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 704,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2613,
									"name": "getContextByAddress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2614,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2615,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										},
										{
											"id": 2616,
											"name": "constructorBinary",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2617,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1868,
												"name": "Contexts"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1871,
												"name": "Context"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2642,
							"name": "getDeployedContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 871,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2643,
									"name": "getDeployedContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 1868,
										"name": "Contexts"
									}
								}
							]
						},
						{
							"id": 2640,
							"name": "getEnsSettings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 864,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2641,
									"name": "getEnsSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 2811,
										"name": "EnsSettings"
									}
								}
							]
						},
						{
							"id": 2638,
							"name": "getProviderAdapter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 857,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2639,
									"name": "getProviderAdapter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "ProviderAdapter"
									}
								}
							]
						},
						{
							"id": 2629,
							"name": "getReferenceDeclarations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 836,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2630,
									"name": "getReferenceDeclarations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2631,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 2632,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 2633,
														"name": "compilationId",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "reference",
													"id": 1722,
													"name": "Ast.AstNodes"
												}
											}
										}
									}
								}
							]
						},
						{
							"id": 2634,
							"name": "getUserDefinedTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 843,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2635,
									"name": "getUserDefinedTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 284,
										"name": "TypesById"
									}
								}
							]
						},
						{
							"id": 2558,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 155,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2559,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2671,
							"name": "interpretAggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 991,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2672,
									"name": "interpretAggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2673,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 886,
												"name": "CalldataDecoding"
											}
										},
										{
											"id": 2674,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2787,
												"name": "Transaction"
											}
										},
										{
											"id": 2675,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1868,
												"name": "Contexts"
											},
											"defaultValue": "{}"
										},
										{
											"id": 2676,
											"name": "additionalAllocations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2677,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 2678,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 2679,
																"name": "selector",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "reference",
															"id": 1220,
															"name": "AbiData.Allocate.FunctionCalldataAndReturndataAllocation"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1052,
													"name": "CallInterpretationInfo"
												}
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2707,
							"name": "interpretBlockhashedMulticall",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1169,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2708,
									"name": "interpretBlockhashedMulticall",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2709,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 886,
												"name": "CalldataDecoding"
											}
										},
										{
											"id": 2710,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2787,
												"name": "Transaction"
											}
										},
										{
											"id": 2711,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1868,
												"name": "Contexts"
											},
											"defaultValue": "{}"
										},
										{
											"id": 2712,
											"name": "additionalAllocations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2713,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 2714,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 2715,
																"name": "selector",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "reference",
															"id": 1220,
															"name": "AbiData.Allocate.FunctionCalldataAndReturndataAllocation"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1061,
												"name": "BlockhashedMulticallInfo"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2680,
							"name": "interpretCallInAggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1033,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2681,
									"name": "interpretCallInAggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2682,
											"name": "callResult",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 330,
														"name": "StructResult"
													},
													{
														"type": "reference",
														"id": 341,
														"name": "TupleResult"
													}
												]
											}
										},
										{
											"id": 2683,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2787,
												"name": "Transaction"
											}
										},
										{
											"id": 2684,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1868,
												"name": "Contexts"
											},
											"defaultValue": "{}"
										},
										{
											"id": 2685,
											"name": "additionalAllocations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2686,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 2687,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 2688,
																"name": "selector",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "reference",
															"id": 1220,
															"name": "AbiData.Allocate.FunctionCalldataAndReturndataAllocation"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1052,
												"name": "CallInterpretationInfo"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2662,
							"name": "interpretCallInMulti",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 969,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2663,
									"name": "interpretCallInMulti",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2664,
											"name": "callResult",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 299,
												"name": "BytesResult"
											}
										},
										{
											"id": 2665,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2787,
												"name": "Transaction"
											}
										},
										{
											"id": 2666,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1868,
												"name": "Contexts"
											},
											"defaultValue": "{}"
										},
										{
											"id": 2667,
											"name": "additionalAllocations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2668,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 2669,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 2670,
																"name": "selector",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "reference",
															"id": 1220,
															"name": "AbiData.Allocate.FunctionCalldataAndReturndataAllocation"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 886,
												"name": "CalldataDecoding"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2698,
							"name": "interpretDeadlinedMulticall",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1127,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2699,
									"name": "interpretDeadlinedMulticall",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2700,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 886,
												"name": "CalldataDecoding"
											}
										},
										{
											"id": 2701,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2787,
												"name": "Transaction"
											}
										},
										{
											"id": 2702,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1868,
												"name": "Contexts"
											},
											"defaultValue": "{}"
										},
										{
											"id": 2703,
											"name": "additionalAllocations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2704,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 2705,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 2706,
																"name": "selector",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "reference",
															"id": 1220,
															"name": "AbiData.Allocate.FunctionCalldataAndReturndataAllocation"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1058,
												"name": "DeadlinedMulticallInfo"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2653,
							"name": "interpretMulticall",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 933,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2654,
									"name": "interpretMulticall",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2655,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 886,
												"name": "CalldataDecoding"
											}
										},
										{
											"id": 2656,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2787,
												"name": "Transaction"
											}
										},
										{
											"id": 2657,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1868,
												"name": "Contexts"
											},
											"defaultValue": "{}"
										},
										{
											"id": 2658,
											"name": "additionalAllocations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2659,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 2660,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 2661,
																"name": "selector",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "reference",
															"id": 1220,
															"name": "AbiData.Allocate.FunctionCalldataAndReturndataAllocation"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 886,
													"name": "CalldataDecoding"
												}
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2689,
							"name": "interpretTryAggregate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1079,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2690,
									"name": "interpretTryAggregate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2691,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 886,
												"name": "CalldataDecoding"
											}
										},
										{
											"id": 2692,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2787,
												"name": "Transaction"
											}
										},
										{
											"id": 2693,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1868,
												"name": "Contexts"
											},
											"defaultValue": "{}"
										},
										{
											"id": 2694,
											"name": "additionalAllocations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2695,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 2696,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 2697,
																"name": "selector",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "reference",
															"id": 1220,
															"name": "AbiData.Allocate.FunctionCalldataAndReturndataAllocation"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1055,
												"name": "TryAggregateInfo"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2570,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 359,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2571,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2572,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1050,
												"name": "BlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2576,
							"name": "reverseEnsResolve",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 392,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2577,
									"name": "reverseEnsResolve",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2578,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"qualifiedName": "Uint8Array",
												"package": "typescript",
												"name": "Uint8Array"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2644,
							"name": "withMulticallInterpretations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 877,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2645,
									"name": "withMulticallInterpretations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2646,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 889,
												"name": "FunctionDecoding"
											}
										},
										{
											"id": 2647,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2787,
												"name": "Transaction"
											}
										},
										{
											"id": 2648,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1868,
												"name": "Contexts"
											},
											"defaultValue": "{}"
										},
										{
											"id": 2649,
											"name": "additionalAllocations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2650,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 2651,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 2652,
																"name": "selector",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "reference",
															"id": 1220,
															"name": "AbiData.Allocate.FunctionCalldataAndReturndataAllocation"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 886,
												"name": "CalldataDecoding"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2533
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2557,
								2549,
								2550,
								2539,
								2540,
								2542,
								2541,
								2555,
								2551,
								2556,
								2538,
								2543,
								2548,
								2547
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2603,
								2606,
								2609,
								2563,
								2560,
								2587,
								2591,
								2573,
								2579,
								2596,
								2599,
								2625,
								2618,
								2621,
								2636,
								2566,
								2612,
								2642,
								2640,
								2638,
								2629,
								2634,
								2558,
								2671,
								2707,
								2680,
								2662,
								2698,
								2653,
								2689,
								2570,
								2576,
								2644
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 55,
							"character": 13
						}
					]
				},
				{
					"id": 2748,
					"name": "VariableNotFoundError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the user requested a variable that does not exist."
					},
					"children": [
						{
							"id": 2749,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 101,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 2750,
									"name": "new VariableNotFoundError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2751,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2748,
										"name": "VariableNotFoundError"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Error.constructor"
							}
						},
						{
							"id": 2752,
							"name": "nameOrId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 100,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2749
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2752
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 99,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "Error",
							"package": "typescript",
							"name": "Error"
						}
					]
				},
				{
					"id": 2756,
					"name": "ContractState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents the state of a contract aside from its storage."
					},
					"children": [
						{
							"id": 2758,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The contract's address, as a checksummed hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 87,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2759,
							"name": "balanceAsBN",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The contract's balance, in Wei, as a BN."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 91,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "BN",
								"package": "@types/bn.js",
								"name": "BN"
							}
						},
						{
							"id": 2757,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The contract's class, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 83,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 236,
								"name": "ContractType"
							}
						},
						{
							"id": 2761,
							"name": "code",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The contract's code, as a hexidecimal string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 99,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2760,
							"name": "nonceAsBN",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The contract's nonce, as a BN."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 95,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "BN",
								"package": "@types/bn.js",
								"name": "BN"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2758,
								2759,
								2757,
								2761,
								2760
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 79,
							"character": 17
						}
					]
				},
				{
					"id": 2783,
					"name": "DecodeLogOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "The type of the options parameter to [[WireDecoder.decodeLog|decodeLog()]].\nThis type may be expanded in the future."
					},
					"children": [
						{
							"id": 2785,
							"name": "disableChecks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Allows decodings that don't pass the re-encoding test.  Don't turn\nthis on unless you know what you're doing!"
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 197,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 2784,
							"name": "extras",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.  Defaults to `\"off\"`."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 192,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 1023,
								"name": "ExtrasAllowed"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2785,
								2784
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 186,
							"character": 17
						}
					]
				},
				{
					"id": 2763,
					"name": "DecodedLog",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a web3 Log object that has been decoded.\nNote that it extends the Log type and just adds an additional field\nwith the decoding."
					},
					"children": [
						{
							"id": 2765,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Address of the emitter (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 303,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2803,
								"name": "Log.address"
							}
						},
						{
							"id": 2771,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The block hash (as hex string).  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 328,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2809,
								"name": "Log.blockHash"
							}
						},
						{
							"id": 2772,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The block number.  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 332,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2810,
								"name": "Log.blockNumber"
							}
						},
						{
							"id": 2766,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The log's data section (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 307,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2804,
								"name": "Log.data"
							}
						},
						{
							"id": 2764,
							"name": "decodings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "An array of possible decodings of the given log -- it's an array because logs can be ambiguous.",
								"text": "This field works just like the output of [[WireDecoder.decodeLog]], so see that for more\ninformation.\n"
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 115,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 887,
									"name": "LogDecoding"
								}
							}
						},
						{
							"id": 2768,
							"name": "logIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of the log within the block."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 315,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2806,
								"name": "Log.logIndex"
							}
						},
						{
							"id": 2767,
							"name": "topics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The log's topics; each is a hex string representing 32 bytes."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 311,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2805,
								"name": "Log.topics"
							}
						},
						{
							"id": 2770,
							"name": "transactionHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The emitting transaction's hash (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 324,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2808,
								"name": "Log.transactionHash"
							}
						},
						{
							"id": 2769,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Index within the block of the emitting transaction; null if\nblock is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 320,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2807,
								"name": "Log.transactionIndex"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2765,
								2771,
								2772,
								2766,
								2764,
								2768,
								2767,
								2770,
								2769
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 108,
							"character": 17
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 2802,
							"name": "Log"
						}
					]
				},
				{
					"id": 2814,
					"name": "DecoderSettings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type contains information needed to initialize the decoder."
					},
					"children": [
						{
							"id": 2817,
							"name": "ens",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This field can be included to enable or disable ENS resolution (and, in\nthe future, reverse resolution) and specify how it should be performed.\nIf absent, ENS resolution will be performed using the decoder's usual\nprovider."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 51,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 2811,
								"name": "EnsSettings"
							}
						},
						{
							"id": 2815,
							"name": "projectInfo",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Information about the project or contracts being decoded.\nThis may come in several forms; see the type documentation for\nmore information.  The simplest way to use this to set it to\n`{ artifacts: <array of artifacts in project> }`.",
								"text": "This may be left out if an artifact or contract has been passed\nin by some other means, in which case the decoder will be made\nbased purely on that single contract, but it's recommended to pass in\nproject info for all your contracts to get the decoder's full power.\n"
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 36,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 1834,
								"name": "ProjectInfo"
							}
						},
						{
							"id": 2816,
							"name": "provider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The provider for the decoder to use.  This is required when using a\nprovider-based constructor; otherwise an exception will be thrown.\nIf the decoder is initialized with a Truffle Contract-based constructor,\nthis is not expected to be passed.  If it is passed, it will override\nthe use of the given contract's provider."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 44,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "Provider"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2817,
								2815,
								2816
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 24,
							"character": 17
						}
					]
				},
				{
					"id": 2811,
					"name": "EnsSettings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type indicates settings to be used for ENS resolution (and, in the\nfuture, reverse resolution)."
					},
					"children": [
						{
							"id": 2812,
							"name": "provider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The provider to use for ENS resolution; set this to `null` to disable\nENS resolution.  If absent, will default to the decoder's provider,\nand ENS resolution will be enabled."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 66,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "Provider"
							}
						},
						{
							"id": 2813,
							"name": "registryAddress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The ENS registry address to use; if absent, will use the default one\nfor the current network.  If there is no default registry for the\ncurrent network, ENS resolution will be disabled."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 72,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2812,
								2813
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 60,
							"character": 17
						}
					]
				},
				{
					"id": 2773,
					"name": "EventOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "The type of the options parameter to [[WireDecoder.events|events()]].  This type will be expanded in the future\nas more filtering options are added."
					},
					"children": [
						{
							"id": 2777,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, will restrict to events emitted by the given address.",
								"text": "NOTE: In the contract instance decoder, if omitted, defaults to the\naddress of the contract instance being decoded, rather than not filtering\nby address.  However, this behavior can be turned off by explicitly specifying\naddress as undefined.\n"
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 167,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2779,
							"name": "disableChecks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Allows decodings that don't pass the re-encoding test.  Don't turn\nthis on unless you know what you're doing!"
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 178,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 2778,
							"name": "extras",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.  Defaults to `\"off\"`."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 173,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 1023,
								"name": "ExtrasAllowed"
							}
						},
						{
							"id": 2775,
							"name": "fromBlock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The earliest block to include events from.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 154,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 1050,
								"name": "BlockSpecifier"
							}
						},
						{
							"id": 2774,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, the name parameter will restrict to events with the given name."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 150,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2776,
							"name": "toBlock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The latest block to include events from.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 158,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 1050,
								"name": "BlockSpecifier"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2777,
								2779,
								2778,
								2775,
								2774,
								2776
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 146,
							"character": 17
						}
					]
				},
				{
					"id": 2802,
					"name": "Log",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Contains information about a transaction.  Most of the fields have\nbeen made optional; only those needed by the decoder have been made\nmandatory.",
						"text": "Intended to work like Web3's\n[Log](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#eth-getpastlogs-return)\ntype."
					},
					"children": [
						{
							"id": 2803,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Address of the emitter (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 303,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2809,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The block hash (as hex string).  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 328,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2810,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The block number.  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 332,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2804,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The log's data section (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 307,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2806,
							"name": "logIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of the log within the block."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 315,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2805,
							"name": "topics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The log's topics; each is a hex string representing 32 bytes."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 311,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 2808,
							"name": "transactionHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The emitting transaction's hash (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 324,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2807,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Index within the block of the emitting transaction; null if\nblock is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 320,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2803,
								2809,
								2810,
								2804,
								2806,
								2805,
								2808,
								2807
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 299,
							"character": 17
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 2763,
							"name": "DecodedLog"
						}
					]
				},
				{
					"id": 2780,
					"name": "ReturnOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "The type of the options parameter to [[ContractDecoder.decodeReturnValue|decodeReturnValue()]]."
					},
					"children": [
						{
							"id": 2781,
							"name": "block",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The block in which the call was made.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 208,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 1050,
								"name": "BlockSpecifier"
							}
						},
						{
							"id": 2782,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, tells the decoder to interpret the return data as\nthe return data from a successful call (if `true` is passed) or\nas the return data from a failed call (if `false` is passed). If\nomitted or set to `undefined`, the decoder will account for both\npossibilities."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 216,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2781,
								2782
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 204,
							"character": 17
						}
					]
				},
				{
					"id": 2787,
					"name": "Transaction",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Contains information about a transaction.  Most of the fields have\nbeen made optional; only those needed by the decoder have been made\nmandatory.",
						"text": "Intended to work like Web3's\n[Transaction](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#eth-gettransaction-return)\ntype."
					},
					"children": [
						{
							"id": 2790,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Hash of this transaction's block as hex string; null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 241,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2791,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "This transaction's block number; null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 245,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2793,
							"name": "from",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Address of the sender (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 253,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2797,
							"name": "gas",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Gas provided by the sender, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 270,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2796,
							"name": "gasPrice",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Gas price for this transaction, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 266,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2788,
							"name": "hash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The transaction hash as hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 233,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2798,
							"name": "input",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Data sent with the transaction, as hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 274,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2800,
							"name": "maxFeePerGas",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The maximum fee per gas that the transaction is willing to pay in total."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 282,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2801,
							"name": "maxPriorityFeePerGas",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The maximum fee per gas to give miners to incentivize them to include the transaction (Priority fee)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 286,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2789,
							"name": "nonce",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The nonce of the sender before this transaction was sent."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 237,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2794,
							"name": "to",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Address of the recipient (as checksummed hex string), or null for a\ncontract creation."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 258,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2792,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of transaction in block; null if block is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 249,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2799,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "A positive unsigned 8-bit number between 0 and 0x7f that represents the type of the transaction."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 278,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2795,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Wei sent with this transaction, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 262,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2790,
								2791,
								2793,
								2797,
								2796,
								2788,
								2798,
								2800,
								2801,
								2789,
								2794,
								2792,
								2799,
								2795
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 229,
							"character": 17
						}
					]
				},
				{
					"id": 40,
					"name": "ProjectInfo",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 178,
							"character": 5
						}
					],
					"type": {
						"type": "reference",
						"id": 1834,
						"name": "Compilations.ProjectInfo"
					}
				},
				{
					"id": 36,
					"name": "forAddress",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 375,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 37,
							"name": "forAddress",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a given instance of a contract in this\nproject.  Unlike the other functions, this method doesn't require giving an\nartifact for the address itself; however, the address had better correspond to\na contract of a type given in the project info, or you'll get an exception."
							},
							"parameters": [
								{
									"id": 38,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The address of the contract instance to decode.\n  If an invalid address is provided, this method will throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 39,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The [[DecoderSettings]] to use, including the provider;\n  see the documentation for that type for more information."
									},
									"type": {
										"type": "reference",
										"id": 2814,
										"name": "DecoderSettings"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2426,
										"name": "ContractInstanceDecoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 6,
					"name": "forArtifact",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 216,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 7,
							"name": "forArtifact",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract decoder for a given contract artifact."
							},
							"parameters": [
								{
									"id": 8,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "ContractObject"
									}
								},
								{
									"id": 9,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The [[DecoderSettings]] to use, including the provider;\n  see the documentation for that type for more information."
									},
									"type": {
										"type": "reference",
										"id": 2814,
										"name": "DecoderSettings"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2343,
										"name": "ContractDecoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 22,
					"name": "forArtifactAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 309,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 23,
							"name": "forArtifactAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a contract instance at a given address."
							},
							"parameters": [
								{
									"id": 24,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The artifact corresponding to the type of the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "ContractObject"
									}
								},
								{
									"id": 25,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The address of the contract instance to decode.\n\n  Address must either be checksummed, or in all one case to circumvent the checksum.\n  Mixed-case with bad checksum will cause this function to throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 26,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The [[DecoderSettings]] to use, including the provider;\n  see the documentation for that type for more information."
									},
									"type": {
										"type": "reference",
										"id": 2814,
										"name": "DecoderSettings"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2426,
										"name": "ContractInstanceDecoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 10,
					"name": "forContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 242,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 11,
							"name": "forContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract decoder for a given contract."
							},
							"parameters": [
								{
									"id": 12,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The contract constructor object corresponding to the type of\n  the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 13,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The [[DecoderSettings]] to use; see the documentation for\n  that type for more information.  If absent, the decoder will be based on\n  just the single contract provided; it is recommended to pass more\n  information to get the decoder's full power."
									},
									"type": {
										"type": "reference",
										"id": 2814,
										"name": "DecoderSettings"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2343,
										"name": "ContractDecoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 27,
					"name": "forContractAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 334,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 28,
							"name": "forContractAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a contract instance at a given address."
							},
							"parameters": [
								{
									"id": 29,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 30,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The address of the contract instance to decode.\n\n  Address must either be checksummed, or in all one case to circumvent the checksum.\n  Mixed-case with bad checksum will cause this function to throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 31,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The [[DecoderSettings]] to use; see the documentation for\n  that type for more information.  If absent, the decoder will be based on just the\n  single contract provided; it is recommended to pass more information to get the\n  decoder's full power."
									},
									"type": {
										"type": "reference",
										"id": 2814,
										"name": "DecoderSettings"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2426,
										"name": "ContractInstanceDecoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 32,
					"name": "forContractInstance",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 355,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 33,
							"name": "forContractInstance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a given contract instance."
							},
							"parameters": [
								{
									"id": 34,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The contract abstraction object corresponding to the contract instance."
									},
									"type": {
										"type": "reference",
										"name": "ContractInstanceObject"
									}
								},
								{
									"id": 35,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The [[DecoderSettings]] to use; see the documentation for\n  that type for more information.  If absent, the decoder will be based on just the\n  single contract provided; it is recommended to pass more information to get the\n  decoder's full power."
									},
									"type": {
										"type": "reference",
										"id": 2814,
										"name": "DecoderSettings"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2426,
										"name": "ContractInstanceDecoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 14,
					"name": "forDeployedArtifact",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 264,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 15,
							"name": "forDeployedArtifact",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a deployed contract instance."
							},
							"parameters": [
								{
									"id": 16,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The artifact corresponding to the type of the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "ContractObject"
									}
								},
								{
									"id": 17,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The [[DecoderSettings]] to use, including the provider;\n  see the documentation for that type for more information."
									},
									"type": {
										"type": "reference",
										"id": 2814,
										"name": "DecoderSettings"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2426,
										"name": "ContractInstanceDecoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 18,
					"name": "forDeployedContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 284,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 19,
							"name": "forDeployedContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a deployed contract instance."
							},
							"parameters": [
								{
									"id": 20,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 21,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The [[DecoderSettings]] to use; see the documentation for\n  that type for more information.  If absent, the decoder will be based on just the\n  single contract provided; it is recommended to pass more information to get the\n  decoder's full power."
									},
									"type": {
										"type": "reference",
										"id": 2814,
										"name": "DecoderSettings"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2426,
										"name": "ContractInstanceDecoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 3,
					"name": "forProject",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 188,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 4,
							"name": "forProject",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a project decoder for the project.\nSee the [[DecoderSettings]] documentation for further information."
							},
							"parameters": [
								{
									"id": 5,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2814,
										"name": "DecoderSettings"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2532,
										"name": "ProjectDecoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "References",
					"kind": 16777216,
					"children": [
						2786,
						2762
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2734,
						2716,
						2343,
						2426,
						2723,
						2743,
						2753,
						2532,
						2748
					],
					"categories": [
						{
							"title": "Decoder",
							"children": [
								2343,
								2426,
								2532
							]
						},
						{
							"title": "Exception",
							"children": [
								2734,
								2716,
								2723,
								2743,
								2748
							]
						},
						{
							"title": "Other",
							"children": [
								2753
							]
						}
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2756,
						2783,
						2763,
						2814,
						2811,
						2773,
						2802,
						2780,
						2787
					],
					"categories": [
						{
							"title": "Inputs",
							"children": [
								2783,
								2814,
								2811,
								2773,
								2802,
								2780,
								2787
							]
						},
						{
							"title": "Results",
							"children": [
								2756,
								2763
							]
						}
					]
				},
				{
					"title": "Type Aliases",
					"kind": 4194304,
					"children": [
						40
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						36,
						6,
						22,
						10,
						27,
						32,
						14,
						18,
						3
					],
					"categories": [
						{
							"title": "Provider-based Constructor",
							"children": [
								36,
								6,
								22,
								14,
								3
							]
						},
						{
							"title": "Truffle Contract-based Constructor",
							"children": [
								10,
								27,
								32,
								18
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "decoder/lib/index.ts",
					"line": 140,
					"character": 0
				}
			]
		},
		{
			"id": 41,
			"name": "@truffle/encoder",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "# Truffle Encoder",
				"text": "This module provides an interface for recognizing JavaScript user input of\nSolidity values, encoding those values for use in a transaction, and performing\noverload resolution based on those values to determine which Solidity method to\nencode for.\n\nThe interface is split into three classes: The project encoder, the contract\nencoder, and the contract instance encoder.  The project encoder is associated\nto the project as a whole; it can recognize user input, encode transactions,\nand resolve overloads, although the interface for the latter two is somewhat\ninconvenient.  The contract encoder is associated to a specific contract class.\nIt is similar to the project encoder, but presents an easier-to-use interface\nfor transaction encoding and overload resolution, so long as one is dealing\nwith methods of the specified class.  The contract instance encoder is\nassociated to a specific contract instance; it is like the contract encoder,\nbut is associated to a specific address, allowing the `to` option in\ntransactions to be populated automatically.\n\n## Usage\n\n### Initialization\n\nCreate a encoder with one of the various constructor functions.\n\nFor a project encoder, use the [[forProject|`forProject`]] function.\n\nFor a contract encoder, use the [[forArtifact|`forArtifact`]] or\n[[forContract|`forContract`]] function.\n\nFor a contract instance encoder, use one of the following:\n* [[forDeployedArtifact|`forDeployedArtifact`]]\n* [[forDeployedContract|`forDeployedContract`]]\n* [[forArtifactAt|`forArtifactAt`]]\n* [[forContractAt|`forContractAt`]]\n* [[forContractInstance|`forContractInstance`]]\n\nSee the documentation of these functions for details, or below for usage\nexamples.\n\nAll of these functions take a final argument in which information about the\nproject is specified; currently only a few methods for specifying project\ninformation are allowed, but more are planned.\n\nOne can also spawn encoders from other encoders by supplying additional\ninformation.  See the documentation for the individual encoder classes for a\nmethod listing.\n\n### Encoder methods\n\nSee the documentation for the individual encoder classes for a method listing.\n\n### Wrapped format information\n\nWhen using the various \"wrap\" functions, values will be wrapped in\nmachine-readable [[Format.Values.Value]] objects containing individual wrapped\nvalues.  (This is the same format that `@truffle/decoder` produces output in.)\nSee the [[Format|format documentation]] for an overview and complete module\nlisting.\n\n### Use of project information and encoding of enums\n\nThe encoder can do purely ABI-based encoding, like other encoders; however it\nhas the capability to use project information to do more.\n\nThe most significant use of this is that if further project information is\npresent, this allows for enums to be entered as strings with the name of\nthe option, rather than having to be entered via the underlying number.\nSee the documentation of [[ProjectEncoder.wrap]] for more.\n\nSimilarly, if project information is present, the encoder will also throw an\nerror if you attempt to put an out-of-range value into an enum type, and\nrefuse to consider overloads that would result in this during overload\nresolution.  If project information is absent, the encoder will be unable to\nrecognize any error in these situations.\n\n### ENS resolution\n\nThe encoder supports ENS resolution for address and contract types if\ninitialized to support such.  See the documentation of the [[EncoderSettings]]\nand [[EnsSettings]] types for more.\n\n### Basic usage examples\n\nThese usage examples are for a project with two contracts, `Contract1` and\n`Contract2`.  Let's suppose these look like the following:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Contract1 {\n function enumExample(Contract2.Ternary x) public payable {\n }\n\n function overloaded(uint x) public payable {\n }\n\n function overloaded(string x) public payable {\n }\n}\n\ncontract Contract2 {\n enum Ternary { No, Yes, Maybe }\n}\n```\n\n#### Encoding a transaction\n\n```typescript\nimport { forContract } from \"@truffle/encoder\";\nconst contract1 = artifacts.require(\"Contract1\");\nconst contract2 = artifacts.require(\"Contract2\");\nconst encoder = await Encoder.forContract(Contract1, [Contract1, Contract2]);\nconst abi = Contract1.abi.find(abiEntry => abiEntry.name === \"enumExample\");\nconst tx = await encoder.encodeTransaction(\n abi,\n [\"Maybe\", { value: 1 }],\n { allowOptions: true }\n);\n```\n\n### Performing overload resolution\n\n```typescript\nimport { forContract } from \"@truffle/encoder\";\nconst contract1 = artifacts.require(\"Contract1\");\nconst contract2 = artifacts.require(\"Contract2\");\nconst encoder = await Encoder.forContract(Contract1, [Contract1, Contract2]);\nconst abis = Contract1.abi.filter(abiEntry => abiEntry.name === \"overloaded\");\nconst { tx, abi } = await encoder.encodeTransaction(\n abis,\n [\"hello\", { value: 1 }],\n { allowOptions: true }\n);\n```\n"
			},
			"originalName": "encoder/lib",
			"children": [
				{
					"id": 2909,
					"name": "ContractEncoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The ContractEncoder class.\nCan encode transactions, resolve overloads, and wrap values.\nSee below for a method listing."
					},
					"children": [
						{
							"id": 2910,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 680,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 2911,
									"name": "new ContractEncoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2912,
											"name": "projectEncoder",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2818,
												"name": "ProjectEncoder"
											}
										},
										{
											"id": 2913,
											"name": "compilation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1796,
												"name": "Compilation"
											}
										},
										{
											"id": 2914,
											"name": "contract",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1811,
												"name": "Contract"
											}
										},
										{
											"id": 2915,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ContractObject"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2909,
										"name": "ContractEncoder"
									}
								}
							]
						},
						{
							"id": 2918,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 658,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Abi"
							}
						},
						{
							"id": 2919,
							"name": "artifact",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 659,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "ContractObject"
							}
						},
						{
							"id": 2928,
							"name": "compilation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 667,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1796,
								"name": "Compilation"
							}
						},
						{
							"id": 2920,
							"name": "constructorBinary",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 660,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2921,
							"name": "constructorContextHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 661,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2917,
							"name": "contract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 657,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1811,
								"name": "Contract"
							}
						},
						{
							"id": 2927,
							"name": "contractNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 666,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1674,
								"name": "AstNode"
							}
						},
						{
							"id": 2922,
							"name": "deployedContextHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 662,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2923,
							"name": "noBytecodeAllocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 663,
									"character": 10
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2924,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 2925,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 2926,
												"name": "selector",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1219,
											"name": "Codec.AbiData.Allocate.CalldataAndReturndataAllocation"
										}
									}
								}
							}
						},
						{
							"id": 2916,
							"name": "projectEncoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 656,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 2818,
								"name": "ProjectEncoder"
							}
						},
						{
							"id": 2959,
							"name": "encodeCreation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1320,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2960,
									"name": "encodeCreation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method is similar to [[encodeTransaction]], except that instead of\nencoding a function transaction, it encodes a creation transaction.\n\nBecause this method does not perform overload resolution, it only returns\nthe resulting transaction options (including the encoded `data`), and does\nnot bother returning the ABI used (as this was user-supplied.)\n\nIf the `allowOptions` flag is set in the `options` argument, the input may\ncontain an additional transaction options argument after the other\narguments.  Any non-`data` options not specified in such a transaction\noptions argument will be simply omitted; it you want some options to have\ndefaults, it is up to the you to set these options as appropriate\nafterwards.\n\nIf the transaction options parameter has a `data` or a `to` option,\nthese option will be recognized but ignored.\n\nSee [[encodeTransaction]] for documentation of the inputs.\n"
									},
									"parameters": [
										{
											"id": 2961,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 2962,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 3034,
												"name": "ResolveOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2325,
												"name": "Options"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2954,
							"name": "encodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1280,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2955,
									"name": "encodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method recognizes user input for a given set of contract methods,\nattempts to interpret it as valid input for one of them, and then\nencodes the result.  (That is to say, it performs overload resolution,\nthen encodes.)  Note that this method cannot be used to encode contract\ncreations; use [[encodeTxNoResolution]] for that.\n\nIf this method cannot match the user input to any of the possible\noverloads, it will throw a [[TypeMismatchError]] or a\n[[NoOverloadsMatchedError]].  If more than one overload matches but none\ncan be considered the unique best, you will get a\n[[NoUniqueBestOverloadError]].  If due to inputting a nonexistent function\nname there are no overloads to check, you will get a\n[[NoFunctionByThatNameError]].  See below for a full list of the accepted\nforms of input, and see [[resolveAndWrap]] for full documentation of the\noverload resolution system.\n\nBe aware that overload resolution may not always be fully reliable; if you\nwant to be absolutely certain that you get the right overload, you can use\n[[encodeTxNoResolution]], which does not perform overload resolution, but\nrequires you to specify exactly which overload you mean.  However, you can\nalso adjust your input to this function to get the overload you want; see\nbelow about `{ type: ..., value: ... }` input and enum string input for\ndetails.\n\nIf the `allowOptions` flag is set in the `options` argument, the input may\ncontain an additional transaction options argument after the other\narguments.  Any non-`data` options not specified in such a transaction\noptions argument will be simply omitted; it you want some options to have\ndefaults, it is up to the you to set these options as appropriate\nafterwards.  Also, if the transaction options parameter has a `data`\noption, this option will be recognized but ignored.\n\nUse of the encoder for transactions to be sent to libraries is\npresently not supported and may have unreliable results.  Limited support\nfor this is planned for future versions.\n\n**Accepted forms of input**\n\nThe `input` argument may come in a number of forms, depending on the\ntarget data type.  A list of the specific inputs accepted for each type is\nbelow.  However first we must note a few generic forms that inputs are\naccepted in.\n\nInputs may be given as an object of the form `{ type: ..., value: ... }`\n(additional fields not allowed), where `type` is a string describing the\ntype, and `value` is anything that would be accepted for that type (other\nthan another type/value object).  This form of input is not very useful\nwith *this* method, but it is useful when performing overload resolution\n(see [[resolveAndWrap]]) to restrict the overloads that will be selected\nfrom.  Note that for arrays, `type` should simply be `\"array\"`; for\nstructs and tuples, `\"struct\"` or `\"tuple\"`; for addresses and contracts,\n`\"address\"` or `\"contract\"`; for external functions, `\"function\"`; for\ntransaction options, `\"options\"`; and for enums, it can be either `\"enum\"`\n(or the underlying uint type).  For other Solidity types, it should be the\nname of the type; note that `\"uint\"`, `\"int\"`, `\"fixed\"`, `\"ufixed\"`, and\n`\"byte\"` are accepted.  Vyper's `\"decimal\"` type is also accepted.\nAlso, user-defined value types use exactly the same\n`type` field as the underlying type; this input format does not distinguish\nbetween them and the underlying type.\n\nNote that input in the form of a [[Format.Values.Value|Value]] is\naccepted, so long as the type is appropriate, but error results are\ntypically not accepted (exceptions are discussed below).\n\nNow then, the list of accepted inputs by type, excluding the above:\n\n**Strings**: The input may be given as string (or `String`); note that\nstrings with invalid UTF-16 will not be accepted.  It may also be given as a\n`Uint8Array` (or anything that mimics one; see below about bytestrings), which\nwill be treated as UTF-8; note that invalid UTF-8 is allowed in this format.\nStrings may also be given as a [[Format.Values.StringValue|StringValue]].\n\n**Integer types**: Input for integer types may take a variety of forms.\nThe input may be a `number` (or `Number`); note that if so it must be a\nsafe integer.  For larger integers, you must use other forms of input.\nFor instance, the input may be a `BigInt`.  The input may also be one\nof several recognized big number classes:\n  * [`BN`](https://github.com/indutny/bn.js)\n  * [`Big`](https://github.com/MikeMcl/Big.js)\n  * MikeMcl's [`BigNumber`](https://github.com/MikeMcl/bignumber.js)\n  * Ethers's [`BigNumber` or `FixedNumber`](https://www.npmjs.com/package/@ethersproject/bignumber)\nOf course, any numeric input, no matter the format, must be integral.\nInput may also take the form of a numeric string (or `String`).\nThe string may be decimal, but it may also be hexadecimal with `\"0x\"`\nprefix, octal with `\"0o\"` prefix, or binary with `\"0xb\"` prefix.\nYou can also use a negated hexadecimal, octal, or binary string to\nrepresent a negative number.  Whitespace before or after the number is OK,\nand you may use underscores to separate groups of digits (in any base).\nFor decimal strings, scientific notation (e.g. `1.1e4`) is also accepted.\nIt is also possible to affix one of the units `\"wei\"`, `\"gwei\"`,\n`\"shannon\"`, `\"finney\"`, `\"szabo\"`, or `\"ether\"` (these are case-insensitive)\nonto a decimal numeric string (you may include space inbetween the\nquantity and the unit) to act as a multiplier (where here the\nassumption is that 1 wei means the number 1).  You may also use a\nunit by itself, with no specified quantity, to mean 1 of that unit.\n(E.g., an input of `\"wei\"` will be interpreted as 1.)  Note that it's OK\nif the quantity before the unit is not itself an integer, so long as the\noverall resulting quantity is an integer; e.g., \"1.1 gwei\" is legal integer\ninput.  In addition to giving the input in any of these obviously numeric\nforms, the input may also be given a a `Uint8Array` or anything that\nmimics one (see above about bytestrings); in this case the input will\nbe interpreted as the big-endian byte representation of an unsigned\ninteger (or in other words, it will be interpreted as base 256).\nNegative numbers cannot be represented in this way.\nFinally, the input may be given as a\n[[Format.Values.UintValue|UintValue]],\n[[Format.Values.IntValue|IntValue]],\n[[Format.Values.UfixedValue|UfixedValue]],\n[[Format.Values.FixedValue|FixedValue]],\n[[Format.Values.UserDefinedTypeValue|UserDefinedTypeValue]] on top of one of these,\nor [[Format.Values.EnumValue|EnumValue]]; the type is not required to\nmatch unless strict checking is on (see [[resolveAndWrap]]), in which case\nthe type must match exactly.  In addition, the input may also be a\n[[Format.Errors.EnumErrorResult|EnumErrorResult]] so long as\nthe error is a\n[[Format.Errors.EnumOutOfRangeError|EnumOutOfRangeError]];\nother types of error results are not accepted.\n\n**Enums**: Enums accept all the same forms of input as integer types.\nHowever, if the encoder is aware that a particular argument or field is in\nfact an enum and not just an integer, it accepts one additional form of\ninput; the input may be a string (or `String`) containing the name of the\nenumerated option.  So, for instance, given the following Solidity code:\n```solidity\ncontract MyContract {\n  enum Ternary {\n    No, Yes, Maybe\n  }\n}\n```\nthen `\"Yes\"` would be a valid input for an enum of type\n`MyContract.Ternary`.  Moreover, `\"Ternary.Yes\"` and\n`\"MyContract.Ternary.Yes\"` would also work; these latter forms will only\nmatch enum types with the appropriate name and optionally defining\ncontract, so you can use these to restrict matching for overload\nresolution, much like type/value input.  Note these forms do not require\nthe enum to be defined inside of a contract; those defined outside of\ncontracts are supported too, so long as the encoder was initialized to\nknow about them.\n\n**Bytestrings**: Bytestrings can be given in several forms.  Note that for\nall forms of input, if the specified type is `bytesN`, it is OK if the\nlength of the input is shorter than N bytes; it will automatically be\nright-padded with zero bytes in this case.  (The exception is if the input\nis a [[Format.Values.BytesValue|BytesValue]] and strict checking is\non; see [[resolveAndWrap]].)  Bytestrings may be given as `\"0x\"`-prefixed\neven-length hex strings (a `String` may be used in place of a string);\nunderscores may be used to separate groups of hex digits.\nBytestrings may also be given as a `Uint8Array`, or anything resembling a\n`Uint8Array` -- any object with a `length` field which is a `number`, and\nwhich has fields from `0` to `length-1` all `number`s from 0 to 255, will\nbe accepted.  Input may also be given as a\n[[Format.Values.BytesValue|BytesValue]] or a\n[[Format.Values.UserDefinedTypeValue|UserDefinedTypeValue]]\non top of one; the specific type does not\nhave to match unless strict checking is on.  In addition, a bytestring may be\ngiven as an object with just the fields `text` and `encoding`; in this\ncase, `text` should be a string (it must not have invalid UTF-16) and\n`encoding` an encoding to encode it as.  The only supported encoding\ncurrently is `\"utf8\"`.  Finally, for compatibility with ethers, when\nstrict checking is off (see [[resolveAndWrap]]), a\nbytestring of dynamic length (`bytes`) may have its input given numerically.\nThe valid formats for this are the same as for integer types, except that\nwrapped numeric values are not accepted, numeric strings may not use\nscientific notation or units, and the number may not be negative.  For\ncompatibility reasons, if the number zero is given as input in this way,\nit will be treated as a bytestring consisting of a single zero byte, rather\nthan the empty bytestring.  Warning: an odd-length hex string will be\ntreated as numeric input!  (Effectively, it will be padded on the left\nwith a zero hex digit.)\n\n**Addresses and contracts**: Input may be given as a hex string\nrepresenting 20 bytes, with capitalization according to the Ethereum\naddress checksum.  The `\"0x\"` prefix is optional.  If the hex string\nis all lowercase or all uppercase, however, then the checksum check will\nbe skipped, and the input accepted regardless.  Input may also be given\nas an ICAP address; again, the checksum must be correct.  Finally, if ENS\nresolution has been configured, input may be given as an ENS name.\nAll of these may also be given as `String`s instead of strings.\nInput may also be given as an object with an `address` field, although the\ncontents of that address field must be a `\"0x\"`-prefixed hex string (not\n`String`), and not any other address format.  Input may also be given\nas a [[Format.Values.AddressValue|AddressValue]],\n[[Format.Values.UserDefinedTypeValue|UserDefinedTypeValue]] on top of such, or\n[[Format.Values.ContractValue|ContractValue]]; the specific type\ndoes not matter.\n\n**Booleans**: Unless the `strictBooleans` option is passed, almost any\ninput is accepted (as long as it's not type/value input for a different\ntype), but how it is interpreted depends on the input.  A boolean will be\ninterpreted in the obvious way, and a `Boolean` will be unwrapped.  A\nstring will be considered true unless it is falsy or is equal (ignoring\ncase) to the string `\"false\"`; however, if `strictBooleans` is passed, then\nonly strings that are (ignoring case) equal to `\"true\"` or `\"false\"` will\nbe accepted.  A `String` will be\nconsidered true if and only if the underlying string is.  A number will be\nconsidered true so long as it is truthy, and a `Number` will be considered\ntrue if and only if the underlying number is.  A\n[[Format.Values.BoolValue|BoolValue]], or\n[[Format.Values.UserDefinedTypeValue|UserDefinedTypeValue]] on top of such,\nwill be considered true so\nlong as it represents a true value.  Moreover, two types of\n[[Format.Errors.BoolErrorResult|BoolErrorResult]] also count as\ntrue: Those where the error is a\n[[Format.Errors.BoolOutOfRangeError|BoolOutOfRangeError]] and\nthose where the error is a\n[[Format.Errors.BoolPaddingError|BoolPaddingError]].  This also applies to\na [[Format.Errors.UserDefinedTypeValue|UserDefinedTypeErrors]] on top of one\nof these.  All other\nerror results, and all [[Format.Values.Value|Values]] that are not\n[[Format.Values.BoolValue|BoolValues]] or a\n[[Format.Values.UserDefinedTypeValue|UserDefinedTypeValue]] on top of one,\nwill be rejected.  All other inputs will be considered true so long as\nthey are truthy, unless `strictBooleans` is passed, in which case they will\nbe rejected.\n\n**Decimal fixed-point types**: Input for fixed-point decimal types is\nsimilar to input for integer types.  The differences are as follows:\n  * Units are not accepted in numeric strings (or `String`s).\n  * Hexadecimal, octal, and binary strings (or `String`s) are not\n    accepted.\n  * `Uint8Array`s, or objects that mimic them, are not accepted.\n  * Numeric values do not have to be integral.\nNote that if the input is a `number` (or `Number`) or MikeMcl\n[BigNumber](https://github.com/MikeMcl/bignumber.js), it must be a finite\nvalue.  Also, the number of decimal places in the input may not exceed the\nnumber of decimal places allowed in the type.  Finally, just as integer\ntypes do not allow `number`s (or `Number`s) that are unsafe integers as\ninput, decimal types will not accept a `number` (or `Number`) as input if\nthat `number` is outside the safe range for that type, i.e., it is large\nenough that there may be loss of precision.  (This means that `1` is not\nvalid input for a `fixed128x18`!)  Using other, safer, forms of input is\nencouraged.\n\n**User-defined value types**: These take exactly the same input as the\nunderlying type.\n\n**Arrays**: The input may be an array, or it may be a\n[[Format.Values.ArrayValue|ArrayValue]].  In the latter case,\nwhether it is static-length or dynamic-length does not need to match\n(unless strict checking is on, see [[resolveAndWrap]]).  If the `allowJson`\noption is passed, the array may also be a JSON string.  Note that any allowed\nformat is allowed for the individual elements.\n\n**Structs and tuples**: The input can be given either as an array or as an\nobject; if the `allowJson` option is passed, it may also be given as a\nJSON string for one of these (any format is allowed for the individual\nelements).  If given as an array, the elements should be the members of\nthe struct/tuple, in order.  If given as an object, it should be keyed by\nthe struct or tuple's field names; if any of the elements of the tuple are\nunnamed, then input cannot be given as an object.  Additional keys are\nalso allowed unless strict checking is on.  Input may also be given as a\n[[Format.Values.StructValue|StructValue]] or\n[[Format.Values.TupleValue|TupleValue]]; the specific type does not\nmatter.\n\n**External function pointers**: These may be given as an object with fields\n`address` and `selector` (additional fields are allowed); the `address`\nfield may be anything that would be recognized as an address (see above),\nand the `selector` field may be anything that would be recgonized as a\n`bytes4` (see above).  Alternatively, this may be given as a bytestring\n(even length `\"0x\"`-prefixed hex string or `String`) of 24 bytes,\nspecifying the address followed by the selector; in this case, the address\ndoes not need to be checksummed.  Finally, input may of course also be\ngiven as a\n[[Format.Values.FunctionExternalValue|FunctionExternalValue]];\nits more specific type does not matter.\n\n* Transaction options: These are given as an object with fields for the\ndesired options (you can leave options out or have them be `undefined` and\nthey'll be ignored).  Note that, in order to maintain compatibility with\nolder versions of Truffle, additional keys are accepted, but there must be\nat least one key that belongs in a transaction options object.  Note that\nif any field exists, and is not `undefined`, but the value of that field\ncannot be interpreted as input of the appropriate type, the input will be\nrejected.  Otherwise, inputs for each field can be anything that the\nencoder will understand for this field.  Accepted fields are:\n  * `gas`, `gasPrice`, `value`, `nonce`: These take integer input\n    (see above).\n  * `from`, `to`: These take address input (see above).\n  * `data`: This takes `bytes` input (see above).\n  * `overwrite`: This takes boolean input (see above).\n  * `type`: This takes integer input, which must be in the range from\n    0 to `0xbf`.\n  * `accessList`: This takes input as if for an array of type `AccessListForAddress[]`,\n     if `AccessListForAddress` were a struct with two fields, `address` and `storageKeys`,\n     with `address` being an `address` and `storageKeys` being of type `uint256[]`.\n     Yes, this means storage keys may be given numerically; it also means that if a\n     storage key is given as a hex string representing less than 32 bytes, it will be\n     padded on the left, rather than on the right.\n  * `privateFor`: This one is a special case, and requires a specific\n    form of input.  Input must be an array of base64-encoded\n    bytestrings (as strings or `String`s), each with a decoded length of\n    32 bytes.\nIn addition, input may also be given as a\n[[Format.Values.OptionsValue|OptionsValue]].\n",
										"returns": "An object with a `tx` field, holding the transaction options,\n  including the encoded `data`, and an `abi` field, indicating which\n  ABI entry was used for encoding.\n"
									},
									"parameters": [
										{
											"id": 2956,
											"name": "abisOrNameOrSig",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The ABI entries for the overloads, or the name\n  or full signature of the function.  Note that if you are inputting ABI\n  entries, they must be for functions, not constructors.  The entries must\n  be ones associated with this contract."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "FunctionEntry"
														}
													}
												]
											}
										},
										{
											"id": 2957,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 2958,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 3034,
												"name": "ResolveOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 3024,
												"name": "TxAndAbi"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2949,
							"name": "encodeTxNoResolution",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 957,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2950,
									"name": "encodeTxNoResolution",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method is similar to [[encodeTransaction]], except that it does not\nperform overload resolution; it takes a single ABI entry, rather than a\nlist of them or a function name.  Note that unlike [[encodeTransaction]],\nit can also encode contract creation transactions.\n\nBecause this method does not perform overload resolution, it only returns\nthe resulting transaction options (including the encoded `data`), and does\nnot bother returning the ABI used (as this was user-supplied.)\n\nIf the `allowOptions` flag is set in the `options` argument, the input may\ncontain an additional transaction options argument after the other\narguments.  Any non-`data` options not specified in such a transaction\noptions argument will be simply omitted; it you want some options to have\ndefaults, it is up to the you to set these options as appropriate\nafterwards.\n\nIf the transaction options parameter has a `data` option, this option will\nbe recognized but ignored.  Similarly, when encoding a contract creation,\nthe `to` option will also be ignored.\n\nSee [[encodeTransaction]] for documentation of most of the inputs.\n",
										"returns": "The resulting transaction options, including the encoded `data`.\n"
									},
									"parameters": [
										{
											"id": 2951,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The ABI entry for the transaction to encode for.  Note it must\n  be one for this contract.  May be for either a function or a constructor."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionEntry"
													},
													{
														"type": "reference",
														"name": "ConstructorEntry"
													}
												]
											}
										},
										{
											"id": 2952,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 2953,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 3034,
												"name": "ResolveOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2325,
												"name": "Options"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2963,
							"name": "forInstance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1341,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2964,
									"name": "forInstance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance encoder for a given instance of the\ncontract this encoder is for."
									},
									"parameters": [
										{
											"id": 2965,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The address of the contract instance.\n  If omitted, it will be autodetected.\n  If an invalid address is provided, this method will throw an exception.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2977,
												"name": "ContractInstanceEncoder"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2966,
							"name": "getAbis",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1359,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2967,
									"name": "getAbis",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2968,
											"name": "abisOrNameOrSig",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "FunctionEntry"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "FunctionEntry"
										}
									}
								}
							]
						},
						{
							"id": 2975,
							"name": "getConstructorAbi",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1446,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2976,
									"name": "getConstructorAbi",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ConstructorEntry"
									}
								}
							]
						},
						{
							"id": 2972,
							"name": "getConstructorMethod",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1415,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2973,
									"name": "getConstructorMethod",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2974,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ConstructorEntry"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2258,
										"name": "Method"
									}
								}
							]
						},
						{
							"id": 2969,
							"name": "getMethod",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1383,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2970,
									"name": "getMethod",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2971,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionEntry"
													},
													{
														"type": "reference",
														"name": "ConstructorEntry"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2258,
										"name": "Method"
									}
								}
							]
						},
						{
							"id": 2929,
							"name": "getProjectEncoder",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 673,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2930,
									"name": "getProjectEncoder",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {
										"shortText": "Just used for testing, currently"
									},
									"type": {
										"type": "reference",
										"id": 2818,
										"name": "ProjectEncoder"
									}
								}
							]
						},
						{
							"id": 2944,
							"name": "resolveAndWrap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 914,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2945,
									"name": "resolveAndWrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method attempts to perform overload resolution given user input\nto one of several possible methods.  If the given input matches more than\none of these methods, it will attempt to select the best match.  See\n[[encodeTransaction]] for documentation of the acccepted input forms.\n\nIf it is not possible for the given input to match any of the given methods,\neither a [[TypeMismatchError]] or a\n[[NoOverloadsMatchedError]] will be\nthrown.  If more than one overload matches but none can be considered the\nunique best, you will get a\n[[NoUniqueBestOverloadError]].\nIf due to inputting a nonexistent function name there are no overloads to\ncheck, you will get a [[NoFunctionByThatNameError]].\n\nIf the `allowOptions` flag is set in the `options` argument, the input may\ncontain an additional transaction options argument after the other\narguments.\n\nNote that use of the encoder for transactions to be sent to libraries is\npresently not supported and may have unreliable results.  Limited support\nfor this is planned for future versions.\n\n**Overload resolution system**\n\nIf it is necessary to perform overload resolution by type rather than\nsimply by length, the encoder will select among the overloads that\ncould work the one it considers to be the best match.  To be the best\nmatch, it must be a best match for each argument.  An overload is\na best match for a given argument if the type it would assign that\nargument is highest-priority among all types it could assign that\nargument (selected from overloads that match overall).\n\nNote that when doing this the match checker will be somewhat stricter than\nusual; inputs for structs/tuples will not be allowed to contain extra\nkeys, numeric input (including odd-length hex strings)\nwill not be accepted for dynamic-length bytestrings,\nand if a value is given as a [[Format.Values.Value|Value]], it\nwill only match its specific type, rather than being allowed to match\nother types as usual (unless it is itself wrapped in a type/value pair).\n\nThe overall order of priority of types is as follows:\n1. transaction options\n2. arrays\n3. structs and tuples\n4. addresses and contracts\n5. bytestrings (`bytesN` and `bytes`)\n6. external function pointers\n7. numeric types\n8. `enum`s\n9. `string`\n10. `bool`\n\n(Note that if the encoder does not know that a certain argument is\nsupposed to be an enum, it will of course just be treated as the\nunderlying numeric type.)\n\nMoreover, within each category there is a priority ordering (which is\nnot always total).  Specifically:\n* For arrays, if `S` has priority over `T`, then `S[]` has priority\n  over `T[]`, and `S[n]` has priority over `T[n]`.  Moreover, `S[n]`\n  has priority over `S[]` and so also over `T[]`.\n* Structs and tuples mostly act the same as the overall arguments list; for\n  one such type `S` to have priority over another type `T`, each\n  member type of `S` must have priority over the corresponding member type\n  of `T` (correspondence being determined by the order of the members).\n  However, if the two types `S` and `T` also have exactly the same\n  component names (and each has all of its components named), then\n  this will also be checked with correspondence by name instead of\n  position, and `S` will only be considered more specific than `T` if\n  both checks pass.\n* `bytesN` has priority over `bytesM` if `N<=M`, and has priority over\n  `bytes`\n* A numeric type `S` has priority over a numeric type `T` if the values\n  representable by `S` are a subset of those representable by `T`.\n\nIf you are not getting the overload you want, you can use explicit\ntype-value input as discussed in the documentation for\n[[encodeTransaction]], or you can skip overload resolution and explicitly\nselect an overload by other means.  For enums you may also specify the\nenum type as documented in [[encodeTransaction]].\n",
										"returns": "The interpretation of the input and the resolved method, as a\n  [[Resolution]] object.\n"
									},
									"parameters": [
										{
											"id": 2946,
											"name": "abisOrNameOrSig",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The ABI entries for the overloads, or the name or\n  full signature of the function.  Note that if you are inputting ABI\n  entries, they must be for functions, not constructors.  The entries must\n  be ones associated with this contract."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "FunctionEntry"
														}
													}
												]
											}
										},
										{
											"id": 2947,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "An array of the inputs to the transaction.  May include a\n  transaction options argument on the end if the `allowOptions` flag is\n  set."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 2948,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Contains options to control the operation of this method."
											},
											"type": {
												"type": "reference",
												"id": 3034,
												"name": "ResolveOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2254,
												"name": "Resolution"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2935,
							"name": "wrap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 772,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2936,
									"name": "wrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectEncoder.wrap]]."
									},
									"parameters": [
										{
											"id": 2937,
											"name": "dataType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 104,
												"name": "Type"
											}
										},
										{
											"id": 2938,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 295,
												"name": "Value"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2931,
							"name": "wrapElementaryValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 762,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2932,
									"name": "wrapElementaryValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectEncoder.wrapElementaryValue]]."
									},
									"parameters": [
										{
											"id": 2933,
											"name": "dataType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 164,
												"name": "ElementaryType"
											}
										},
										{
											"id": 2934,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 431,
												"name": "ElementaryValue"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2939,
							"name": "wrapForTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 806,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2940,
									"name": "wrapForTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method recognizes user input for a transaction.  It will throw\na [[TypeMismatchError]] if it cannot do this.  This method requires\nthat the precise function be specified; it does not perofrm overload\nresolution.  See [[encodeTransaction]] for documentation of the accepted\nforms of input.\n\nIf the `allowOptions` flag is set in the `options` argument, the input may\ncontain an additional transaction options argument after the other\narguments.\n\nNote that use of the encoder for transactions to be sent to libraries is\npresently not supported and may have unreliable results.  Limited support\nfor this is planned for future versions.\n",
										"returns": "The interpretation of the input, as a\n  [[Resolution]] object.\n"
									},
									"parameters": [
										{
											"id": 2941,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionEntry"
													},
													{
														"type": "reference",
														"name": "ConstructorEntry"
													}
												]
											}
										},
										{
											"id": 2942,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "An array of the inputs to the transaction.  May include a\n  transaction options argument on the end if the `allowOptions` flag is\n  set."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 2943,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Contains options to control the operation of this method."
											},
											"type": {
												"type": "reference",
												"id": 3034,
												"name": "ResolveOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2254,
												"name": "Resolution"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2910
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2918,
								2919,
								2928,
								2920,
								2921,
								2917,
								2927,
								2922,
								2923,
								2916
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2959,
								2954,
								2949,
								2963,
								2966,
								2975,
								2972,
								2969,
								2929,
								2944,
								2935,
								2931,
								2939
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/encoders.ts",
							"line": 655,
							"character": 13
						}
					]
				},
				{
					"id": 2977,
					"name": "ContractInstanceEncoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The ContractInstanceEncoder class.\nCan encode transactions, resolve overloads, and wrap values.\nDiffers from the [[ContractEncoder]] only in that it carries\na `to` address for non-constructor transactions.\nSee below for a method listing."
					},
					"children": [
						{
							"id": 2978,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1471,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 2979,
									"name": "new ContractInstanceEncoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2980,
											"name": "contractEncoder",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2909,
												"name": "ContractEncoder"
											}
										},
										{
											"id": 2981,
											"name": "toAddress",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2977,
										"name": "ContractInstanceEncoder"
									}
								}
							]
						},
						{
							"id": 2982,
							"name": "contractEncoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1465,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 2909,
								"name": "ContractEncoder"
							}
						},
						{
							"id": 2983,
							"name": "toAddress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1466,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3012,
							"name": "encodeCreation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1607,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 3013,
									"name": "encodeCreation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method functions identically to [[ContractEncoder.encodeCreation]].\nThe particular contract instance is ignored, only its class is used.\n"
									},
									"parameters": [
										{
											"id": 3014,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 3015,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 3034,
												"name": "ResolveOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2325,
												"name": "Options"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 3007,
							"name": "encodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1584,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 3008,
									"name": "encodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method functions identically to [[ContractEncoder.encodeTransaction]],\nexcept that the `to` option is automatically set to this contract\ninstance's address.  If an explicit `to` address is passed as a\ntransaction option, it will be recognized but ignored.\n"
									},
									"parameters": [
										{
											"id": 3009,
											"name": "abisOrNameOrSig",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "FunctionEntry"
														}
													}
												]
											}
										},
										{
											"id": 3010,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 3011,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 3034,
												"name": "ResolveOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 3024,
												"name": "TxAndAbi"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 3002,
							"name": "encodeTxNoResolution",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1555,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 3003,
									"name": "encodeTxNoResolution",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method functions identically to [[ContractEncoder.encodeTxNoResolution]],\nexcept that, when preparing a function transaction, the `to` option is\nautomatically set to this contract instance's address.  If an explicit\n`to` address is passed as a transaction option, it will be recognized\nbut ignored.\n"
									},
									"parameters": [
										{
											"id": 3004,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionEntry"
													},
													{
														"type": "reference",
														"name": "ConstructorEntry"
													}
												]
											}
										},
										{
											"id": 3005,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 3006,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 3034,
												"name": "ResolveOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2325,
												"name": "Options"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2997,
							"name": "resolveAndWrap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1532,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2998,
									"name": "resolveAndWrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method functions identically to [[ContractEncoder.resolveAndWrap]],\nexcept that the `to` option is automatically set to this contract\ninstance's address.  If an explicit `to` address is passed as a\ntransaction option, it will be recognized but ignored.\n"
									},
									"parameters": [
										{
											"id": 2999,
											"name": "abis",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "FunctionEntry"
														}
													}
												]
											}
										},
										{
											"id": 3000,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 3001,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 3034,
												"name": "ResolveOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2254,
												"name": "Resolution"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2988,
							"name": "wrap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1492,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2989,
									"name": "wrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectEncoder.wrap]]."
									},
									"parameters": [
										{
											"id": 2990,
											"name": "dataType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 104,
												"name": "Type"
											}
										},
										{
											"id": 2991,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 295,
												"name": "Value"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2984,
							"name": "wrapElementaryValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1482,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2985,
									"name": "wrapElementaryValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectEncoder.wrapElementaryValue]]."
									},
									"parameters": [
										{
											"id": 2986,
											"name": "dataType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 164,
												"name": "ElementaryType"
											}
										},
										{
											"id": 2987,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 431,
												"name": "ElementaryValue"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2992,
							"name": "wrapForTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1508,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2993,
									"name": "wrapForTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method functions identically to [[ContractEncoder.wrapForTransaction]],\nexcept that, when preparing a function transaction, the `to` option is\nautomatically set to this contract instance's address.  If an explicit\n`to` address is passed as a transaction option, it will be recognized\nbut ignored.\n"
									},
									"parameters": [
										{
											"id": 2994,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionEntry"
													},
													{
														"type": "reference",
														"name": "ConstructorEntry"
													}
												]
											}
										},
										{
											"id": 2995,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 2996,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 3034,
												"name": "ResolveOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2254,
												"name": "Resolution"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2978
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2982,
								2983
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3012,
								3007,
								3002,
								2997,
								2988,
								2984,
								2992
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/encoders.ts",
							"line": 1464,
							"character": 13
						}
					]
				},
				{
					"id": 3064,
					"name": "ContractNotDeployedError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that you attempted to use address autodetection\nfor a contract that isn't deployed to the current network."
					},
					"children": [
						{
							"id": 3065,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 86,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 3066,
									"name": "new ContractNotDeployedError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3067,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3068,
											"name": "networkId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 3064,
										"name": "ContractNotDeployedError"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Error.constructor"
							}
						},
						{
							"id": 3069,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 84,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3070,
							"name": "networkId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 85,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3065
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3069,
								3070
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/errors.ts",
							"line": 83,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "Error",
							"package": "typescript",
							"name": "Error"
						}
					]
				},
				{
					"id": 3053,
					"name": "ContractNotFoundError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the contract you are attempting to create an\nencoder for does not appear in the project info."
					},
					"children": [
						{
							"id": 3054,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 134,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 3055,
									"name": "new ContractNotFoundError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3056,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3057,
											"name": "bytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3058,
											"name": "deployedBytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3059,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 3053,
										"name": "ContractNotFoundError"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Error.constructor"
							}
						},
						{
							"id": 3063,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 133,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3061,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 131,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3060,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 130,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3062,
							"name": "deployedBytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 132,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3054
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3063,
								3061,
								3060,
								3062
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/errors.ts",
							"line": 129,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "Error",
							"package": "typescript",
							"name": "Error"
						}
					]
				},
				{
					"id": 3038,
					"name": "InvalidAddressError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that an invalid address was passed to one of the\ncontract instance encoder spawners ([[forContractInstance]], etc).  Valid\naddresses are those that Web3 accepts; i.e., either those with correct\nchecksums, or those that are all-lowercase or all-uppercase to deliberately\ncircumvent the checksum."
					},
					"children": [
						{
							"id": 3039,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 54,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 3040,
									"name": "new InvalidAddressError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3041,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 3038,
										"name": "InvalidAddressError"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Error.constructor"
							}
						},
						{
							"id": 3042,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 53,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3039
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3042
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/errors.ts",
							"line": 52,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "Error",
							"package": "typescript",
							"name": "Error"
						}
					]
				},
				{
					"id": 3071,
					"name": "NoFunctionByThatNameError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isProtected": true
					},
					"comment": {},
					"children": [
						{
							"id": 3072,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 32,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 3073,
									"name": "new NoFunctionByThatNameError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3074,
											"name": "functionNameOrSig",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3075,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 3071,
										"name": "NoFunctionByThatNameError"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Error.constructor"
							}
						},
						{
							"id": 3077,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 31,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3076,
							"name": "functionNameOrSig",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 30,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3072
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3077,
								3076
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/errors.ts",
							"line": 29,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "Error",
							"package": "typescript",
							"name": "Error"
						}
					]
				},
				{
					"id": 3043,
					"name": "NoInternalInfoError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isProtected": true
					},
					"comment": {},
					"children": [
						{
							"id": 3044,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 6,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 3045,
									"name": "new NoInternalInfoError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3043,
										"name": "NoInternalInfoError"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Error.constructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3044
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/errors.ts",
							"line": 5,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "Error",
							"package": "typescript",
							"name": "Error"
						}
					]
				},
				{
					"id": 2818,
					"name": "ProjectEncoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The ProjectEncoder class.  Can wrap values; can also encode transactions and\nresolve overloads if sufficient information is provided.  See below for a\nmethod listing."
					},
					"children": [
						{
							"id": 2819,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 89,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 2820,
									"name": "new ProjectEncoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2821,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EncoderInfoInternal"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2818,
										"name": "ProjectEncoder"
									}
								}
							]
						},
						{
							"id": 2826,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 46,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 2053,
								"name": "AllocationInfo"
							}
						},
						{
							"id": 2833,
							"name": "compilations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 52,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1796,
									"name": "Compilation"
								}
							}
						},
						{
							"id": 2834,
							"name": "contractsAndContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 53,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1231,
									"name": "ContractAndContexts"
								}
							},
							"defaultValue": "[]"
						},
						{
							"id": 2823,
							"name": "ens",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 43,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 2825,
							"name": "ensCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 45,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "ENSCache"
							},
							"defaultValue": "{}"
						},
						{
							"id": 2828,
							"name": "networkId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 48,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2822,
							"name": "provider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 42,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Provider"
							}
						},
						{
							"id": 2829,
							"name": "referenceDeclarations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 49,
									"character": 10
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2830,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 2831,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 2832,
												"name": "compilationId",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1722,
											"name": "Codec.Ast.AstNodes"
										}
									}
								}
							}
						},
						{
							"id": 2824,
							"name": "registryAddress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 44,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "undefined"
						},
						{
							"id": 2827,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 47,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 284,
								"name": "TypesById"
							}
						},
						{
							"id": 2866,
							"name": "driveGenerator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 259,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2867,
									"name": "driveGenerator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 2868,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2869,
											"name": "generator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 1024,
														"name": "WrapRequest"
													},
													{
														"type": "reference",
														"id": 2868,
														"name": "T"
													},
													{
														"type": "reference",
														"id": 1034,
														"name": "WrapResponse"
													}
												],
												"qualifiedName": "Generator",
												"package": "typescript",
												"name": "Generator"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2868,
												"name": "T"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2878,
							"name": "encodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 326,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2879,
									"name": "encodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2880,
											"name": "methods",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 2258,
													"name": "Method"
												}
											}
										},
										{
											"id": 2881,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 2882,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 3034,
												"name": "ResolveOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 3024,
												"name": "TxAndAbi"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2873,
							"name": "encodeTxNoResolution",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 296,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2874,
									"name": "encodeTxNoResolution",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2875,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2258,
												"name": "Method"
											}
										},
										{
											"id": 2876,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 2877,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 3034,
												"name": "ResolveOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2325,
												"name": "Options"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2905,
							"name": "forAddress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 598,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2906,
									"name": "forAddress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance encoder for a given instance of a contract in this\nproject.  Unlike [[forInstance]], this method doesn't require an artifact; it\nwill automatically detect the class of the given contract.  If it's not in\nthe project, or the encoder can't identify it, you'll get an exception."
									},
									"parameters": [
										{
											"id": 2907,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The address of the contract instance to encoder for.\n  If an invalid address is provided, this method will throw an exception."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2908,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "You can include this argument to specify that this should be\n  based on the addresses content's at a specific block (if say the contract\n  has since self-destructed).\n"
											},
											"type": {
												"type": "reference",
												"id": 1050,
												"name": "BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2977,
												"name": "ContractInstanceEncoder"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2895,
							"name": "forArtifact",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 525,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2896,
									"name": "forArtifact",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract encoder for a given contract in this project."
									},
									"parameters": [
										{
											"id": 2897,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The contract the encoder is for.  If you want to\n  encode contract creation transactions, it must have all of\n  its libraries linked.\n\n  Note: The contract must be one that the encoder knows about;\n  otherwise you will have problems.\n"
											},
											"type": {
												"type": "reference",
												"name": "ContractObject"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2909,
												"name": "ContractEncoder"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2898,
							"name": "forContract",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 554,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2899,
									"name": "forContract",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract encoder for a given contract in this project."
									},
									"parameters": [
										{
											"id": 2900,
											"name": "contract",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The contract the encoder is for.  If you want to\n  encode contract creation transactions, it must have all of\n  its libraries linked.\n\n  Note: The contract must be one that the encoder knows about;\n  otherwise you will have problems.\n"
											},
											"type": {
												"type": "reference",
												"name": "ContractConstructorObject"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2909,
												"name": "ContractEncoder"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2901,
							"name": "forInstance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 577,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2902,
									"name": "forInstance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance encoder for a given contract instance."
									},
									"parameters": [
										{
											"id": 2903,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The artifact for the contract the encoder is for.  If you\n  want to encode contract creation transactions, it must have all of its\n  libraries linked.\n\n  Note: The contract must be one that the encoder knows about;\n  otherwise you will have problems."
											},
											"type": {
												"type": "reference",
												"name": "ContractObject"
											}
										},
										{
											"id": 2904,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The address of the contract instance.\n  If omitted, but the project encoder has a provider or network ID,\n  it will be autodetected.  If there is no provider or network ID,\n  it must be included.\n\n  If an invalid address is provided, this method will throw an exception.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2977,
												"name": "ContractInstanceEncoder"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2835,
							"name": "getAllocations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 59,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2836,
									"name": "getAllocations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 2053,
										"name": "AllocationInfo"
									}
								}
							]
						},
						{
							"id": 2839,
							"name": "getNetworkId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 73,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2840,
									"name": "getNetworkId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						},
						{
							"id": 2841,
							"name": "getReferenceDeclarations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 80,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2842,
									"name": "getReferenceDeclarations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2843,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 2844,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 2845,
														"name": "compilationId",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "reference",
													"id": 1722,
													"name": "Codec.Ast.AstNodes"
												}
											}
										}
									}
								}
							]
						},
						{
							"id": 2837,
							"name": "getUserDefinedTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 66,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 2838,
									"name": "getUserDefinedTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 284,
										"name": "TypesById"
									}
								}
							]
						},
						{
							"id": 2846,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 144,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2847,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2889,
							"name": "recognizeAddress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 438,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2890,
									"name": "recognizeAddress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2891,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1045,
												"name": "AddressWrapResponse"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2886,
							"name": "recognizeDecimal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 404,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2887,
									"name": "recognizeDecimal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2888,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1040,
										"name": "DecimalWrapResponse"
									}
								}
							]
						},
						{
							"id": 2883,
							"name": "recognizeInteger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 352,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2884,
									"name": "recognizeInteger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2885,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1035,
										"name": "IntegerWrapResponse"
									}
								}
							]
						},
						{
							"id": 2861,
							"name": "resolveAndWrap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 246,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2862,
									"name": "resolveAndWrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2863,
											"name": "methods",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 2258,
													"name": "Method"
												}
											}
										},
										{
											"id": 2864,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 2865,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 3034,
												"name": "ResolveOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2254,
												"name": "Resolution"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2892,
							"name": "resolveEnsName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 491,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2893,
									"name": "resolveEnsName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2894,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2870,
							"name": "respond",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 280,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2871,
									"name": "respond",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2872,
											"name": "request",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1024,
												"name": "WrapRequest"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1034,
												"name": "WrapResponse"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2852,
							"name": "wrap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 214,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2853,
									"name": "wrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method recognizes user input for a given data type and attempts\nto interpret it as a value of that type.  It will throw a\n[[TypeMismatchError]] if it cannot do this.\n\nFor documentation of the accepted forms of input, see\n[[ContractEncoder.encodeTransaction]].\n",
										"returns": "The interpreted value wrapped as a [[Format.Values.Value|Value]]\n  object.\n"
									},
									"parameters": [
										{
											"id": 2854,
											"name": "dataType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The data type that the given value is to be interpreted\n  as."
											},
											"type": {
												"type": "reference",
												"id": 104,
												"name": "Type"
											}
										},
										{
											"id": 2855,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The value to be interpreted.  This can take a number of\n  forms depending on the data type, as documented above."
											},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 295,
												"name": "Value"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2848,
							"name": "wrapElementaryValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 188,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2849,
									"name": "wrapElementaryValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This is a restricted version of [[wrap]], which only handles elementary\ntypes and values (those that can be used as mapping keys in Solidity);\nit's present here for type convenience.  See the [[wrap]] and\n[[ContractEncoder.encodeTransaction]] documentation\nfor further information.\n"
									},
									"parameters": [
										{
											"id": 2850,
											"name": "dataType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 164,
												"name": "ElementaryType"
											}
										},
										{
											"id": 2851,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 431,
												"name": "ElementaryValue"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2856,
							"name": "wrapForTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 229,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2857,
									"name": "wrapForTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2858,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2258,
												"name": "Method"
											}
										},
										{
											"id": 2859,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											}
										},
										{
											"id": 2860,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 3034,
												"name": "ResolveOptions"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2254,
												"name": "Resolution"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2819
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2826,
								2833,
								2834,
								2823,
								2825,
								2828,
								2822,
								2829,
								2824,
								2827
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2866,
								2878,
								2873,
								2905,
								2895,
								2898,
								2901,
								2835,
								2839,
								2841,
								2837,
								2846,
								2889,
								2886,
								2883,
								2861,
								2892,
								2870,
								2852,
								2848,
								2856
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/encoders.ts",
							"line": 41,
							"character": 13
						}
					]
				},
				{
					"id": 3046,
					"name": "UnlinkedContractError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that you attempted to encode a contract creation\ntransaction for a contract that has not had all of its libraries linked."
					},
					"children": [
						{
							"id": 3047,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 69,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 3048,
									"name": "new UnlinkedContractError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3049,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3050,
											"name": "bytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 3046,
										"name": "UnlinkedContractError"
									},
									"overwrites": {
										"type": "reference",
										"name": "Error.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Error.constructor"
							}
						},
						{
							"id": 3052,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 68,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3051,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 67,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3047
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3052,
								3051
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/errors.ts",
							"line": 66,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "Error",
							"package": "typescript",
							"name": "Error"
						}
					]
				},
				{
					"id": 3016,
					"name": "EncoderSettings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type contains information needed to initialize the encoder."
					},
					"children": [
						{
							"id": 3020,
							"name": "ens",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This field can be included to enable or disable ENS resolution and specify\nhow it should be performed.  If absent, but a provider was given above,\nENS resolution will be performed using that."
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 117,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 3021,
								"name": "EnsSettings"
							}
						},
						{
							"id": 3019,
							"name": "networkId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Optionally include a network ID; this is used for the same purposes as the\nprovider (see above), but won't turn on ENS resolution.",
								"text": "There is no need to include this when using a Truffle Contract based\nconstructor, as it will use the contract's network ID, but if you do include\nit, it will override that network ID.\n\nIf this is passed in addition to provider, this network ID will override the\none from provider.\n"
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 111,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 3017,
							"name": "projectInfo",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Information about the project or contracts being decoded.\nThis may come in several forms; see the type documentation for\nmore information.  The simplest way to use this to set it to\n`{ artifacts: <array of artifacts in project> }`.",
								"text": "This may be left out if an artifact or contract has been passed\nin by some other means, in which case the encoder will be made\nbased purely on that single contract, but it's recommended to pass in\nproject info for all your contracts to get the encoder's full power.\n"
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 83,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 1834,
								"name": "ProjectInfo"
							}
						},
						{
							"id": 3018,
							"name": "provider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Optionally include a provider; if given, this allows the encoder to know\nthe current network ID and thereby perform any necessary library linking\nwhen encoding a contract creation.  If you attempt to encode a contract\ncreation transaction for a contract that still has unlinked libraries,\nand do not provide the information needed to link them, an exception will\nbe thrown.",
								"text": "There is no need to include this when using a Truffle Contract based\nconstructor, as it will use the contract's provider, but if you do include\nit, it will override that provider.\n\nIncluding this will also turn on ENS resolution unless it is turned off in\nthe ENS settings (see below).\n"
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 99,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "Provider"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3020,
								3019,
								3017,
								3018
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/types.ts",
							"line": 71,
							"character": 17
						}
					]
				},
				{
					"id": 3021,
					"name": "EnsSettings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type indicates settings to be used for ENS resolution."
					},
					"children": [
						{
							"id": 3022,
							"name": "provider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The provider to use for ENS resolution; set this to `null` to disable\nENS resolution.  If absent, will default to the encoders's usual provider,\nif there is one, or to `null`, if not."
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 130,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "Provider"
							}
						},
						{
							"id": 3023,
							"name": "registryAddress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The ENS registry address to use; if absent, will use the default one\nfor the current network.  If there is no default registry for the\ncurrent network, ENS resolution will be disabled."
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 136,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3022,
								3023
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/types.ts",
							"line": 124,
							"character": 17
						}
					]
				},
				{
					"id": 3034,
					"name": "ResolveOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type contains options to be used when preparing transactions\nor resolving overloads.  Currently the only allowed option is one for\nwhether to allow a transaction options argument on the end."
					},
					"children": [
						{
							"id": 3036,
							"name": "allowJson",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This field, if set to true, allows JSON strings to be used for structs,\ntuples, and arrays.  Note that this does *not* allow JSON to be used for\nelementary types like strings!"
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 25,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 3035,
							"name": "allowOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This field, if set to true, allows an optional transaction options\nargument after the other arguments."
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 19,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 3037,
							"name": "strictBooleans",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This field, if set to true, disallows accepting arbitrary input as\nbooleans."
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 30,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3036,
								3035,
								3037
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/types.ts",
							"line": 14,
							"character": 17
						}
					]
				},
				{
					"id": 3024,
					"name": "TxAndAbi",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type is a pair containing both a set of transaction options (as might\nbe sent to web3), including `data`, and an ABI for that transaction.  Only\nfunction transactions are covered here at the moment, because this is meant\nto be used with overload resolution as the return type."
					},
					"children": [
						{
							"id": 3026,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "This field holds the ABI for the transaction.  Because this is intended\nas a return type for overload resolution, only function ABI entries can go\nhere."
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 50,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "FunctionEntry"
							}
						},
						{
							"id": 3025,
							"name": "tx",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "This field holds the transaction options."
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 44,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 2325,
								"name": "Options"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3026,
								3025
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/types.ts",
							"line": 40,
							"character": 17
						}
					]
				},
				{
					"id": 48,
					"name": "forArtifact",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 233,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 49,
							"name": "forArtifact",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract encoder for a given contract artifact."
							},
							"parameters": [
								{
									"id": 50,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "ContractObject"
									}
								},
								{
									"id": 51,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The [[EncoderSettings]] to use;\n  see the documentation for that type for more information.  If absent, the\n  encoder will be based on just the single contract provided; it is\n  recommended to pass more information to get the encoder's full power.\n\n  Note that if the artifact contains unlinked libraries, you will have to\n  pass either the `provider` or `networkId` setting in order to encode\n  contract creation transactions."
									},
									"type": {
										"type": "reference",
										"id": 3016,
										"name": "EncoderSettings"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2909,
										"name": "ContractEncoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 64,
					"name": "forArtifactAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 333,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 65,
							"name": "forArtifactAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a contract instance at a given address."
							},
							"parameters": [
								{
									"id": 66,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The artifact corresponding to the type of the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "ContractObject"
									}
								},
								{
									"id": 67,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The address of the contract instance to decode.\n\n  Address must either be checksummed, or in all one case to circumvent the checksum.\n  Mixed-case with bad checksum will cause this function to throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 68,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The [[EncoderSettings]] to use;\n  see the documentation for that type for more information.  If absent, the\n  encoder will be based on just the single contract provided; it is\n  recommended to pass more information to get the encoder's full power.\n\n  Note that if the artifact contains unlinked libraries, you will have to\n  pass either the `provider` or `networkId` setting in order to encode\n  contract creation transactions."
									},
									"type": {
										"type": "reference",
										"id": 3016,
										"name": "EncoderSettings"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2977,
										"name": "ContractInstanceEncoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 52,
					"name": "forContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 259,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 53,
							"name": "forContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract encoder for a given contract."
							},
							"parameters": [
								{
									"id": 54,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The contract the encoder is for.  It should have all of\n  its libraries linked."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 55,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The [[EncoderSettings]] to use; see the documentation for\n  that type for more information.  If absent, the encoder will be based on\n  just the single contract provided; it is recommended to pass more\n  information to get the encoder's full power."
									},
									"type": {
										"type": "reference",
										"id": 3016,
										"name": "EncoderSettings"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2909,
										"name": "ContractEncoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 69,
					"name": "forContractAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 358,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 70,
							"name": "forContractAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance encoder for a contract instance at a given address."
							},
							"parameters": [
								{
									"id": 71,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 72,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The address of the contract instance to decode.\n\n  Address must either be checksummed, or in all one case to circumvent the checksum.\n  Mixed-case with bad checksum will cause this function to throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 73,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The [[EncoderSettings]] to use; see the documentation for\n  that type for more information.  If absent, the encoder will be based on\n  just the single contract provided; it is recommended to pass more\n  information to get the encoder's full power."
									},
									"type": {
										"type": "reference",
										"id": 3016,
										"name": "EncoderSettings"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2977,
										"name": "ContractInstanceEncoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 74,
					"name": "forContractInstance",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 378,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 75,
							"name": "forContractInstance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance encoder for a deployed contract instance."
							},
							"parameters": [
								{
									"id": 76,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The contract abstraction object corresponding to the contract instance."
									},
									"type": {
										"type": "reference",
										"name": "ContractInstanceObject"
									}
								},
								{
									"id": 77,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The [[EncoderSettings]] to use; see the documentation for\n  that type for more information.  If absent, the encoder will be based on\n  just the single contract provided; it is recommended to pass more\n  information to get the encoder's full power."
									},
									"type": {
										"type": "reference",
										"id": 3016,
										"name": "EncoderSettings"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2977,
										"name": "ContractInstanceEncoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 56,
					"name": "forDeployedArtifact",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 283,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 57,
							"name": "forDeployedArtifact",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance encoder for a deployed contract instance.\nYou must pass in a provider or network ID to use this function."
							},
							"parameters": [
								{
									"id": 58,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The artifact corresponding to the type of the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "ContractObject"
									}
								},
								{
									"id": 59,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The [[EncoderSettings]] to use, including the provider or\n  network id; see the documentation for that type for more information."
									},
									"type": {
										"type": "reference",
										"id": 3016,
										"name": "EncoderSettings"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2977,
										"name": "ContractInstanceEncoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 60,
					"name": "forDeployedContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 303,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 61,
							"name": "forDeployedContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance encoder for a deployed contract instance."
							},
							"parameters": [
								{
									"id": 62,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 63,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The [[EncoderSettings]] to use; see the documentation for\n  that type for more information.  If absent, the encoder will be based on\n  just the single contract provided; it is recommended to pass more\n  information to get the encoder's full power."
									},
									"type": {
										"type": "reference",
										"id": 3016,
										"name": "EncoderSettings"
									},
									"defaultValue": "{}"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2977,
										"name": "ContractInstanceEncoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 42,
					"name": "forProject",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 190,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 43,
							"name": "forProject",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a project encoder for the project."
							},
							"parameters": [
								{
									"id": 44,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 3016,
										"name": "EncoderSettings"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2818,
										"name": "ProjectEncoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 45,
					"name": "forProjectInternal",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 207,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 46,
							"name": "forProjectInternal",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"parameters": [
								{
									"id": 47,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EncoderInfoInternal"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2818,
										"name": "ProjectEncoder"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2909,
						2977,
						3064,
						3053,
						3038,
						3071,
						3043,
						2818,
						3046
					],
					"categories": [
						{
							"title": "Encoder",
							"children": [
								2909,
								2977,
								2818
							]
						},
						{
							"title": "Exception",
							"children": [
								3064,
								3053,
								3038,
								3071,
								3043,
								3046
							]
						}
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						3016,
						3021,
						3034,
						3024
					],
					"categories": [
						{
							"title": "Inputs",
							"children": [
								3016,
								3021,
								3034,
								3024
							]
						}
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						48,
						64,
						52,
						69,
						74,
						56,
						60,
						42,
						45
					],
					"categories": [
						{
							"title": "Constructors",
							"children": [
								48,
								56,
								42,
								45
							]
						},
						{
							"title": "Provider-based Constructor",
							"children": [
								64
							]
						},
						{
							"title": "Truffle Contract-based Constructors",
							"children": [
								52,
								69,
								74,
								60
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "encoder/lib/index.ts",
					"line": 142,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 2,
			"children": [
				1,
				2,
				41
			]
		}
	]
}