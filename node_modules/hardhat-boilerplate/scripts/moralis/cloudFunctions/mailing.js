/* 
  Sendgrid 
*/

class SendgridMintTemplateIdException {
  message = 'Sendgrid mint template ID is not configured.';
}

class SendgridSenderEmailException {
  message = 'Sendgrid sender email is not configured.';
}

class SendgridSenderNameException {
  message = 'Sendgrid sender name is not configured.';
}

const sendgridRequest = async (method, endpoint, body, params) => {
  const config = await Moralis.Config.get({ useMasterKey: true });
  const sendGridApiUrl = config.get('SENDGRID_API_URL');
  const sendGridApiKey = config.get('SENDGRID_API_KEY');
  if (!sendGridApiUrl) throw new SendgridApiUrlException();
  if (!sendGridApiKey) throw new SendgridApiKeyException();

  const url = `${sendGridApiUrl}/${endpoint}`;
  const req = {
    method: method,
    url: url,
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${sendGridApiKey}`,
    },
    body,
    params,
  };

  try {
    return await Moralis.Cloud.httpRequest(req);
  } catch (errorResponse) {
    throw `Request to '${url}' failed with response code: ${errorResponse?.status}.`;
  }
};

const getNewsletterListIdOrFail = async () => {
  const config = await Moralis.Config.get({ useMasterKey: true });
  const newsletterListId = config.get('SENDGRID_NEWSLETTER_LIST_ID');
  if (!newsletterListId) throw new SendgridListIdException();
  return newsletterListId;
};

const getMintTemplateIdOrFail = async () => {
  const config = await Moralis.Config.get({ useMasterKey: true });
  const mintTemplateId = config.get('SENDGRID_MINT_TEMPLATE_ID');
  if (!mintTemplateId) throw new SendgridMintTemplateIdException();
  return mintTemplateId;
};

const getSendgridSenderOrFail = async () => {
  const config = await Moralis.Config.get({ useMasterKey: true });
  const sendgridSenderEmail = config.get('SENDGRID_SENDER_EMAIL');
  if (!sendgridSenderEmail) throw new SendgridSenderException();
  const sendgridSenderName = config.get('SENDGRID_SENDER_NAME');
  return {
    email: sendgridSenderEmail,
    name: sendgridSenderName,
  };
};

const addSendgridContact = async (email) => {
  try {
    const newsletterListId = await getNewsletterListIdOrFail();

    const endpoint = 'marketing/contacts';
    const body = {
      list_ids: [newsletterListId],
      contacts: [{ email }],
    };

    await sendgridRequest('PUT', endpoint, body);
  } catch (error) {
    logger.error(`Error adding contact to Sendgrid list.`);
    logger.error(error);
  }
};

const removeSendgridContact = async (email) => {
  try {
    const newsletterListId = await getNewsletterListIdOrFail();

    const contactId = await getSendgridContact(email);
    if (!contactId) return;

    const endpoint = `marketing/lists/${newsletterListId}/contacts`;
    const params = {
      contact_ids: contactId,
    };

    await sendgridRequest('DELETE', endpoint, undefined, params);
  } catch (error) {
    logger.error(`Error removing contact from Sendgrid list (${contactId}).`);
    logger.error(error);
  }
};

const getSendgridContact = async (email) => {
  try {
    const newsletterListId = await getNewsletterListIdOrFail();

    const endpoint = 'marketing/contacts/search/emails';
    const body = {
      emails: [email],
    };

    const response = await sendgridRequest('POST', endpoint, body);
    if (response.status === 200) {
      const contact = response.data.result[email]?.contact;
      if (contact.list_ids.includes(newsletterListId)) return contact?.id;
    }
  } catch (error) {
    logger.error(`Error retrieving contact from Sendgrid.`);
    logger.error(error);
  }
  return null;
};

const sendSendgridEmail = async (emailTo, templateId, templateData) => {
  try {
    const sender = await getSendgridSenderOrFail();
    const endpoint = 'mail/send';
    const body = {
      personalizations: [
        {
          to: [{ email: emailTo }],
          dynamic_template_data: templateData,
        },
      ],
      from: sender,
      template_id: templateId,
    };

    const response = await sendgridRequest('POST', endpoint, body);
    if (response.status !== 202) {
      logger.error(`Unexpected response from Sendgrid sending email.`);
    }
  } catch (error) {
    logger.error(`Error retrieving contact from Sendgrid.`);
    logger.error(error);
  }
};

const sendMintNotificationEmail = async (userAddress, totalMinted) => {
  const user = await getMoralisUserOrFail(userAddress);
  const userEmail = user.attributes.email;
  if (!userEmail) return;

  const templateId = await getMintTemplateIdOrFail();
  const templateData = {
    totalMinted,
    userAddress,
  };
  await sendSendgridEmail(userEmail, templateId, templateData);
};

/* 
  Newletter cloud functions
*/

Moralis.Cloud.define(
  'postNewsletterSubscription',
  async (request) => {
    const userAddress = request.user.get('ethAddress');
    const requestEmail = request.params.email;

    const user = await getMoralisUserOrFail(userAddress);
    const userEmail = user.attributes.email;

    if (!requestEmail && !userEmail) {
      throw new EmailRequiredException();
    }

    if (requestEmail && requestEmail != userEmail) {
      const requestEmailUser = await getMoralisUserByEmail(requestEmail);
      if (requestEmailUser && requestEmailUser.attributes.ethAddress !== userAddress) {
        // The email is already assigned to another user
        throw new EmailAlreadyExistsException();
      }
      // Updating user email ifs don't have one yet or if it changed it.
      user.set('email', requestEmail);
      user.save(null, useMasterKey);
      if (userEmail) {
        // If the user was subscribed before, i have to remove the old email from Sendgrid
        await removeSendgridContact(userEmail);
      }
    }

    await addSendgridContact(requestEmail);

    return {
      success: true,
    };
  },
  {
    requireUser: true,
    fields: {
      email: {
        required: true,
        type: String,
      },
    },
  },
);

Moralis.Cloud.define(
  'deleteNewsletterSubscription',
  async (request) => {
    const userAddress = request.user.get('ethAddress');
    const user = await getMoralisUserOrFail(userAddress);
    const userEmail = user.attributes.email;

    await removeSendgridContact(userEmail);

    return {
      success: true,
    };
  },
  {
    requireUser: true,
  },
);
