const hre = require('hardhat');
const path = require('path');
const keccak256 = require('keccak256');
const dotenv = require('dotenv');

const moralisUtils = require('./utils/moralisUtils');
const utils = require('./utils/utils');
const csvParser = require('./utils/csvParser');

dotenv.config();

async function main() {
  console.log('Starting Metadata Builder Script');
  console.group();
  const moralisOptions = { useMasterKey: true };
  await moralisUtils.initialize(moralisOptions);

  const metadataPath = path.resolve(hre.config.moralisSettings.inputMetadataFolder);
  console.log('Metadata folder :', metadataPath);
  const imagesPath = path.resolve(metadataPath, 'images');
  const nfts = csvParser.parse(path.resolve(hre.config.moralisSettings.inputMetadataFolder, 'tokens-data.csv'));

  const ipfsImageData = await utils.readImagesFolderAndBuildIpfsData(
    imagesPath,
    '.jpg',
    hre.config.moralisSettings.ipfsImagesFolder,
  );
  const uploadedData = await moralisUtils.bulkUploadToIpfs(ipfsImageData);
  const ipfsMetadata = utils.readDataAndBuildMetadata(
    nfts,
    hre.config.royaltySettings,
    uploadedData,
    hre.config.moralisSettings.ipfsMetadataFolder,
  );
  await utils.sleep(1500); // just in case

  const result = await moralisUtils.bulkUploadToIpfs(ipfsMetadata);
  const bulkData = result.map((x, index) => ({
    update: {
      tokenName: `#${x.id}`,
      tokenId: x.id,
      tokenUri: x.path,
      hash: keccak256(JSON.stringify(ipfsMetadata[index].content)).toString('hex'),
      IPFSHash: utils.standardizeIPFSMoralisUri(x.path),
    },
  }));
  await moralisUtils.bulkUpload('Villains', bulkData, moralisOptions);

  console.groupEnd();
  console.log('Finished Signer and Metadata Builder Script');
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
