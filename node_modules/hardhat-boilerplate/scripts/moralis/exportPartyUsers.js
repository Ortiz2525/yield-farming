const moralisUtils = require('./utils/moralisUtils');
const fs = require('fs');
const path = require('path');
const ObjectsToCsv = require('objects-to-csv');
const utils = require('./utils/utils');

const STAGE_PARTY = 'party';

/**
 * It gets all tickets from the database with their owner info
 * and then exports the data to an excel file (CSV)
 * @param fileName - The name of the file to be generated.
 */
async function main(fileName) {
  console.log(`Exporting to excel file "${fileName}"...`);
  console.time('Process');

  fileName = path.resolve(fileName);

  if (fs.existsSync(fileName)) throw `Already exist file with name ${fileName}`;

  console.group();

  await moralisUtils.initialize({ useMasterKey: true });
  let userTickets = await moralisUtils.getPartyUsers();

  userTickets.sort((a, b) => +a.ticketNumber - +b.ticketNumber);

  const mappedUserTickets = userTickets.map((userTicket) => {
    // This should not happen, every ticket has a user
    if (userTicket.user.length == 0) throw `Ticket ${userTicket.ticketNumber} has not associated user.`;
    const [user] = userTicket.user;

    let tokenAmount = 0;
    if (userTicket.whitelist.length > 0) {
      const partyWhitelist = userTicket.whitelist.filter((whitelist) => whitelist.stage == STAGE_PARTY);
      if (partyWhitelist.length > 0) tokenAmount = partyWhitelist[0].amount;
    }

    return {
      ticketNumber: userTicket.ticketNumber,
      firstName: user.firstName,
      lastName: user.lastName,
      email: user.email,
      city: user.city,
      state: user.state,
      country: user.country,
      tokenAmount,
      //ethAddress: user.ethAddress,
    };
  });

  const csv = new ObjectsToCsv(mappedUserTickets);
  await csv.toDisk(fileName, { allColumns: false });

  console.groupEnd();
  utils.printElapsedTime('Process');
  console.log(`Excel file "${fileName}" generated successfully!`);
}

if (process.argv.length !== 3) {
  console.error('Invalid parameters amount!');
  process.exit(1);
}

main(process.argv[2])
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
