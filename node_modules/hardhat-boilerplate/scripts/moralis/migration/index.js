const moralisUtils = require('../utils/moralisUtils');
const Moralis = require('moralis/node');
const utils = require('../utils/utils');
const { Classes } = require('./classes');

const useMasterKey = { useMasterKey: true };

// node scripts/moralis/migration/index.js

const IGNORE_FIELDS = ['createdAt', 'updatedAt'];

const getCurrentDbColumns = async (className) => {
  const query = new Moralis.Query(className);
  const row = await query.first(useMasterKey);
  if (!row) return [];
  return Object.keys(row.attributes).filter((field) => !IGNORE_FIELDS.includes(field));
};

const createDummyRow = (columns) => {
  let row = {};
  for (let column of columns) {
    if (column.type === Date) {
      row[column.name] = new Date();
    } else {
      row[column.name] = column.type();
    }
  }
  return row;
};

async function main() {
  const dbClass = Classes.NewsletterSubscription;

  console.log(`Starting ${dbClass.name} migration...`);
  console.time('Process');

  await moralisUtils.initialize(useMasterKey);

  const dbColumnNames = await getCurrentDbColumns(dbClass.name);
  console.log('Current database columns:');
  console.log(dbColumnNames);

  const schemaColumnNames = dbClass.columns.map((column) => column.name);
  console.log('Current local columns schema:');
  console.log(schemaColumnNames);

  const diffColumns = schemaColumnNames.filter((columnName) => !dbColumnNames.includes(columnName));
  if (diffColumns.length === 0) {
    console.log('Database class columns up to date.');
    return;
  }

  console.log('Columns of the schema not created in database yet:');
  console.log(diffColumns);

  const dummyRow = createDummyRow(dbClass.columns);
  console.log({ dummyRow });

  const dummyObject = new Moralis.Object(dbClass.name);
  await dummyObject.save(dummyRow, useMasterKey);
  await dummyObject.destroy();

  console.group();

  console.groupEnd();
  utils.printElapsedTime('Process');
  console.log('Migration finished.');
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
