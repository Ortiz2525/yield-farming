const moralisUtils = require('./utils/moralisUtils');
const utils = require('./utils/utils');

const options = { useMasterKey: true };

async function appendExtraRecordsToWhitelist(stage, extraRecords) {
  console.group();
  console.log(`Appending ${extraRecords.length} extra records to whitelist for stage:${stage}...`);
  await moralisUtils.bulkUpload('Whitelist', extraRecords, options);
  console.log('Extra records appended successfully!');
  console.groupEnd();
}

exports.addRecordsToWhitelist = async (stage, extraRecords) => {
  await moralisUtils.initialize(options);
  return appendExtraRecordsToWhitelist(stage, extraRecords);
};

exports.main = async (stage) => {
  console.log(`Generating whitelist for stage:${stage}...`);
  console.time('Process');
  console.group();

  await moralisUtils.initialize(options);
  const holders = await moralisUtils.downloadHolders();

  //get all holder addresses only
  const addresses = Object.keys(holders);
  let whitelist = [];
  for (let index = 0; index < addresses.length; index++) {
    const currentAddress = addresses[index];
    whitelist.push({
      update: {
        address: currentAddress,
        amount: holders[currentAddress].amount,
        tier: holders[currentAddress].tier,
        stage: stage,
      },
    });
  }

  await moralisUtils.bulkUpload('Whitelist', whitelist, options);

  // if (extraRecords && extraRecords.length > 0) await appendExtraRecordsToWhitelist(stage, extraRecords);

  console.groupEnd();
  utils.printElapsedTime('Process');
  console.log(`Whitelist for stage:${stage} generated successfully!`);
};
