const { LazyMinter } = require('./LazyMinter');

const Logger = {
  log: process.env.NODE_ENV !== 'test' ? console.log : () => {},
};

/* A function that takes in a whitelist, contract address, chain id, domain name, domain version, and
signer. It then logs the signing of data, creates a new LazyMinter, logs the signer, contract
address, chain id, domain name, and domain version. It then logs the generation of the signatures.
It then creates a new updated whitelist that is a map of the whitelist. It then logs the generated
signatures and logs the data signed successfully. It then returns the updated whitelist. */
exports.signData = async (whitelist, contractAddress, chainId, domainName, domainVersion, signer) => {
  Logger.log('Signing data...');

  const lazyMinter = new LazyMinter({ chainId, contractAddress, domainName, domainVersion, signer });

  console.group();
  Logger.log('Signer:', signer.address);
  Logger.log('Contract address:', contractAddress);
  Logger.log('Chain ID:', chainId);
  Logger.log('Domain name:', domainName);
  Logger.log('Domain version:', domainVersion);

  Logger.log(`Generating ${whitelist.length} signatures...`);

  let updatedWhitelist = whitelist.map(async (whitelistedAddress) => {
    const signedData = await lazyMinter.createVoucherAmount(whitelistedAddress.amount, whitelistedAddress.address);
    return {
      filter: { objectId: whitelistedAddress.objectId },
      update: {
        signature: signedData,
      },
    };
  });
  updatedWhitelist = await Promise.all(updatedWhitelist);
  Logger.log('Generated signatures:', updatedWhitelist.length);
  console.groupEnd();
  Logger.log('Data signed successfully!');
  return updatedWhitelist;
};
