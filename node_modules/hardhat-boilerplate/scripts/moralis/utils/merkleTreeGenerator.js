const { MerkleTree } = require('merkletreejs');
const keccak256 = require('keccak256');
const utils = require('./utils');

exports.buildMerkleTree = (whitelist) => {
  const leafNodes = whitelist.map((x) => keccak256(x.address));
  //merkle tree generation
  const merkleTree = new MerkleTree(leafNodes, keccak256, {
    sortPairs: true,
  });
  return { merkleTree, leafNodes };
};

/* Generating a Merkle Tree and updating the data in the server. */
exports.generateTree = async (whitelist) => {
  console.log('Generating Merkle Tree & updating data in server...');
  console.group();
  console.time('Merkle Tree generated');
  //merkle tree generation
  const tree = this.buildMerkleTree(whitelist);
  //we get root of merkle tree
  const rootHash = tree.merkleTree.getHexRoot();
  console.log('Root Hash: ', rootHash);

  const bulkUpdatedData = [];
  for (let index = 0; index < whitelist.length; index++) {
    const leafNode = tree.leafNodes[index];
    const hexProof = tree.merkleTree.getHexProof(leafNode);
    const currentItem = whitelist[index];

    //proof verifing, just in case
    if (tree.merkleTree.verify(hexProof, leafNode, rootHash)) {
      bulkUpdatedData.push({
        filter: { objectId: currentItem.objectId },
        update: {
          hexProof: hexProof,
        },
      });
    } else throw `ERROR: verification unsuccessfully for objectId ${currentItem.objectId}`;
  }
  utils.printElapsedTime('Merkle Tree generated');
  console.groupEnd();
  console.log('Merkle Tree generated successfully!');
  return {
    rootHash,
    bulkUpdatedData,
  };
};
