/**
 * LazyMinter is a helper class that creates NFTVoucher objects and signs them, to be redeemed later by the LazyNFT contract.
 */
class LazyMinter {
  /**
   * Create a new LazyMinter targeting a deployed instance of the LazyNFT contract.
   *
   * @param {string} chainId chain identifier where contract was deployed
   * @param {string} contractAddress a contract address with that we interact
   * @param {ethers.Signer} signer a Signer whose account is used to sign data
   */
  constructor({ chainId, contractAddress, domainName, domainVersion, signer }) {
    this.contractAddress = contractAddress;
    this.chainId = chainId;
    this.signer = signer;
    this.domainName = domainName;
    this.domainVersion = domainVersion;
  }

  /**
   * returns received parameters(amount and address) packed in a signature
   *
   * @param {number} amount available claimed amount
   * @param {address} address enabled address to claim
   *
   * @returns {ethers.BytesLike} data signed
   */
  async createVoucherAmount(amount, holder) {
    const voucher = { amount, holder };
    const domain = this._signingDomain();
    const types = {
      NFTClaimedAmount: [
        { name: 'amount', type: 'uint32' },
        { name: 'holder', type: 'address' },
      ],
    };
    const signature = await this.signer._signTypedData(domain, types, voucher);
    return signature;
  }

  /**
   * @private
   * @returns {object} the EIP-721 signing domain, tied to the chainId of the signer
   
  */
  _signingDomain() {
    if (this._domain != null) {
      return this._domain;
    }
    // EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)
    this._domain = {
      name: this.domainName,
      version: this.domainVersion,
      chainId: this.chainId,
      verifyingContract: this.contractAddress,
    };
    return this._domain;
  }
}

module.exports = {
  LazyMinter,
};
