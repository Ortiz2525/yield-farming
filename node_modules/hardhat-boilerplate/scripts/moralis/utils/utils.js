const fs = require('fs');
const path = require('path');

/* Sorting an array of objects by a property. */
exports.sortBy = (objs, prop) => objs.sort((a, b) => a[prop].localeCompare(b[prop]));

/* A function that prints the elapsed time of a timer. */
exports.printElapsedTime = (timerName) => {
  console.log('Elapsed Time:');
  console.group();
  console.timeEnd(timerName);
  console.groupEnd();
};

/* A function that returns a promise that resolves after a certain amount of time. */
exports.sleep = (ms) => {
  return new Promise((resolve) => {
    setTimeout(resolve, ms);
  });
};

/* Getting all the files in the folder and returning them. */
exports.getFiles = (folderPath, extension) => {
  const images = fs.readdirSync(folderPath).filter((x) => x.endsWith(extension));
  console.log(`Found items(*${extension}):`, images.length);
  return images;
};

/* Loading a JSON file and returning it. */
exports.loadJSONFile = (filePath) => {
  return JSON.parse(fs.readFileSync(filePath, 'utf8'));
};

exports.standardizeIPFSMoralisUri = (ipfsMoralisUri) =>
  `ipfs://${ipfsMoralisUri.substring(ipfsMoralisUri.indexOf('/ipfs/') + 6)}`;

exports.readDataAndBuildMetadata = (nfts, royaltySettings, ipfsImagesArray, ipfsTokensFolder) => {
  const nftsFile = nfts.map((nft, index) => ({
    ...nft,
    id: `${index + 1}`,
  }));
  const mappedNfts = nftsFile.map((nft) => {
    const imageUri = ipfsImagesArray.find((x) => x.id === nft.id).path;
    const standardizedUri = this.standardizeIPFSMoralisUri(imageUri);
    return {
      ...nft,
      image: standardizedUri,
      seller_fee_basis_points: royaltySettings.percentage,
      fee_recipient: royaltySettings.address,
    };
  });
  const tokensArray = mappedNfts.map((token) => ({
    path: `${ipfsTokensFolder}/${token.id}`,
    content: token,
  }));
  return tokensArray;
};

exports.readImagesFolderAndBuildIpfsData = (folderPath, extension, ipfsFolder) => {
  folderPath = path.resolve(folderPath);
  console.log('Reading folder:', path.resolve(folderPath));
  console.group();

  const images = this.getFiles(folderPath, extension);

  const ipfsArray = [];
  for (const image of images) {
    ipfsArray.push({
      path: `${ipfsFolder}/${image}`,
      content: fs.readFileSync(path.resolve(folderPath, image), { encoding: 'base64' }).toString(),
    });
  }
  console.groupEnd();
  return ipfsArray;
};

exports.createFolderIfNotExists = (folderPath) => {
  if (!fs.existsSync(folderPath)) {
    fs.mkdirSync(folderPath, { recursive: true });
  }
};
