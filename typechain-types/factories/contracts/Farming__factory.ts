/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Farming, FarmingInterface } from "../../contracts/Farming";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_stakingToken",
        type: "address",
      },
      {
        internalType: "contract ERC20Mock",
        name: "_rewardToken1",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_rewardToken2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_depositFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_treasuryFee",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_treasury",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_reward1PerBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_reward2PerBlock",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "accRewardPerShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "depositFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "lastBlockTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastRewardBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lockPeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "pendingReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "reward1PerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reward2PerBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken1",
    outputs: [
      {
        internalType: "contract ERC20Mock",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken2",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "treasury",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "treasuryFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "update",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardDebt",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405262278d006007553480156200001857600080fd5b5060405162001cf338038062001cf383398181016040528101906200003e919062000396565b6200005e620000526200019b60201b60201c565b620001a360201b60201c565b87600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846004819055508360058190555082600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816008819055508060098190555043600a819055506000600b8190555050505050505050506200045f565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000299826200026c565b9050919050565b6000620002ad826200028c565b9050919050565b620002bf81620002a0565b8114620002cb57600080fd5b50565b600081519050620002df81620002b4565b92915050565b6000620002f2826200028c565b9050919050565b6200030481620002e5565b81146200031057600080fd5b50565b6000815190506200032481620002f9565b92915050565b6000819050919050565b6200033f816200032a565b81146200034b57600080fd5b50565b6000815190506200035f8162000334565b92915050565b62000370816200028c565b81146200037c57600080fd5b50565b600081519050620003908162000365565b92915050565b600080600080600080600080610100898b031215620003ba57620003b962000267565b5b6000620003ca8b828c01620002ce565b9850506020620003dd8b828c0162000313565b9750506040620003f08b828c01620002ce565b9650506060620004038b828c016200034e565b9550506080620004168b828c016200034e565b94505060a0620004298b828c016200037f565b93505060c06200043c8b828c016200034e565b92505060e06200044f8b828c016200034e565b9150509295985092959890939650565b611884806200046f6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063939d6237116100b8578063bb9ce3f61161007c578063bb9ce3f6146102fa578063cc32d1761461032a578063d61a47f114610348578063ea02b0e514610366578063f2fde38b14610384578063f40f0f52146103a057610142565b8063939d62371461027a578063a2e6204514610298578063a36e8600146102a2578063a9f8d181146102c0578063b6b55f25146102de57610142565b806367a527931161010a57806367a52793146101da5780636f28d688146101f8578063715018a61461021657806372f702f314610220578063817b1cd21461023e5780638da5cb5b1461025c57610142565b80631959a002146101475780632e1a7d4d146101785780633fd8b02f146101945780634e71d92d146101b257806361d027b3146101bc575b600080fd5b610161600480360381019061015c9190611264565b6103d0565b60405161016f9291906112aa565b60405180910390f35b610192600480360381019061018d91906112ff565b6103f4565b005b61019c61070b565b6040516101a9919061132c565b60405180910390f35b6101ba610711565b005b6101c4610894565b6040516101d19190611356565b60405180910390f35b6101e26108ba565b6040516101ef919061132c565b60405180910390f35b6102006108c0565b60405161020d91906113d0565b60405180910390f35b61021e6108e6565b005b6102286108fa565b604051610235919061140c565b60405180910390f35b610246610920565b604051610253919061132c565b60405180910390f35b610264610926565b6040516102719190611356565b60405180910390f35b61028261094f565b60405161028f919061132c565b60405180910390f35b6102a0610955565b005b6102aa610b26565b6040516102b7919061132c565b60405180910390f35b6102c8610b2c565b6040516102d5919061132c565b60405180910390f35b6102f860048036038101906102f391906112ff565b610b32565b005b610314600480360381019061030f9190611264565b610f00565b604051610321919061132c565b60405180910390f35b610332610f18565b60405161033f919061132c565b60405180910390f35b610350610f1e565b60405161035d919061140c565b60405180910390f35b61036e610f44565b60405161037b919061132c565b60405180910390f35b61039e60048036038101906103999190611264565b610f4a565b005b6103ba60048036038101906103b59190611264565b610fcd565b6040516103c7919061132c565b60405180910390f35b600d6020528060005260406000206000915090508060000154908060010154905082565b60008111610437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042e90611484565b60405180910390fd5b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905062278d00600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054426104c991906114d3565b101561050a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050190611553565b60405180910390fd5b610512610955565b600061051d33610fcd565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161057c929190611573565b6020604051808303816000875af115801561059b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bf91906115d4565b506105d783836000015461105f90919063ffffffff16565b826000018190555061060f64e8d4a51000610601600b54856000015461107590919063ffffffff16565b61108b90919063ffffffff16565b8260010181905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401610674929190611573565b6020604051808303816000875af1158015610693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b791906115d4565b503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364846040516106fe919061132c565b60405180910390a2505050565b60075481565b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061075c610955565b600061076733610fcd565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016107c6929190611573565b6020604051808303816000875af11580156107e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080991906115d4565b5061083a64e8d4a5100061082c600b54856000015461107590919063ffffffff16565b61108b90919063ffffffff16565b82600101819055503373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d482604051610888919061132c565b60405180910390a25050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108ee6110a1565b6108f8600061111f565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600b5481565b600a54431115610b24576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109bc9190611356565b602060405180830381865afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190611616565b905060008103610a145743600a8190555050610b24565b6000610a2b600a544361105f90919063ffffffff16565b90506000610a446008548361107590919063ffffffff16565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401610aa3929190611573565b600060405180830381600087803b158015610abd57600080fd5b505af1158015610ad1573d6000803e3d6000fd5b50505050610b13610b0284610af464e8d4a510008561107590919063ffffffff16565b61108b90919063ffffffff16565b600b546111e390919063ffffffff16565b600b8190555043600a819055505050505b565b60085481565b600a5481565b60008111610b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6c90611484565b60405180910390fd5b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610bc0610955565b600081600001541115610c7d576000610bd833610fcd565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610c37929190611573565b6020604051808303816000875af1158015610c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7a91906115d4565b50505b6000606460045484610c8f9190611643565b610c9991906116b4565b905060008184610ca991906114d3565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610d0a939291906116e5565b6020604051808303816000875af1158015610d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4d91906115d4565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401610dcd929190611573565b6020604051808303816000875af1158015610dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1091906115d4565b50610e288184600001546111e390919063ffffffff16565b8360000181905550610e6064e8d4a51000610e52600b54866000015461107590919063ffffffff16565b61108b90919063ffffffff16565b836001018190555042600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c82604051610ef2919061132c565b60405180910390a250505050565b600e6020528060005260406000206000915090505481565b60055481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b610f526110a1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb89061178e565b60405180910390fd5b610fca8161111f565b50565b600080600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611057816001015461104964e8d4a5100061103b600b54866000015461107590919063ffffffff16565b61108b90919063ffffffff16565b61105f90919063ffffffff16565b915050919050565b6000818361106d91906114d3565b905092915050565b600081836110839190611643565b905092915050565b6000818361109991906116b4565b905092915050565b6110a96111f9565b73ffffffffffffffffffffffffffffffffffffffff166110c7610926565b73ffffffffffffffffffffffffffffffffffffffff161461111d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611114906117fa565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081836111f1919061181a565b905092915050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061123182611206565b9050919050565b61124181611226565b811461124c57600080fd5b50565b60008135905061125e81611238565b92915050565b60006020828403121561127a57611279611201565b5b60006112888482850161124f565b91505092915050565b6000819050919050565b6112a481611291565b82525050565b60006040820190506112bf600083018561129b565b6112cc602083018461129b565b9392505050565b6112dc81611291565b81146112e757600080fd5b50565b6000813590506112f9816112d3565b92915050565b60006020828403121561131557611314611201565b5b6000611323848285016112ea565b91505092915050565b6000602082019050611341600083018461129b565b92915050565b61135081611226565b82525050565b600060208201905061136b6000830184611347565b92915050565b6000819050919050565b600061139661139161138c84611206565b611371565b611206565b9050919050565b60006113a88261137b565b9050919050565b60006113ba8261139d565b9050919050565b6113ca816113af565b82525050565b60006020820190506113e560008301846113c1565b92915050565b60006113f68261139d565b9050919050565b611406816113eb565b82525050565b600060208201905061142160008301846113fd565b92915050565b600082825260208201905092915050565b7f416d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b600061146e601d83611427565b915061147982611438565b602082019050919050565b6000602082019050818103600083015261149d81611461565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114de82611291565b91506114e983611291565b9250828203905081811115611501576115006114a4565b5b92915050565b7f6c6f636b5f706572696f642074696d6500000000000000000000000000000000600082015250565b600061153d601083611427565b915061154882611507565b602082019050919050565b6000602082019050818103600083015261156c81611530565b9050919050565b60006040820190506115886000830185611347565b611595602083018461129b565b9392505050565b60008115159050919050565b6115b18161159c565b81146115bc57600080fd5b50565b6000815190506115ce816115a8565b92915050565b6000602082840312156115ea576115e9611201565b5b60006115f8848285016115bf565b91505092915050565b600081519050611610816112d3565b92915050565b60006020828403121561162c5761162b611201565b5b600061163a84828501611601565b91505092915050565b600061164e82611291565b915061165983611291565b925082820261166781611291565b9150828204841483151761167e5761167d6114a4565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006116bf82611291565b91506116ca83611291565b9250826116da576116d9611685565b5b828204905092915050565b60006060820190506116fa6000830186611347565b6117076020830185611347565b611714604083018461129b565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611778602683611427565b91506117838261171c565b604082019050919050565b600060208201905081810360008301526117a78161176b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006117e4602083611427565b91506117ef826117ae565b602082019050919050565b60006020820190508181036000830152611813816117d7565b9050919050565b600061182582611291565b915061183083611291565b9250828201905080821115611848576118476114a4565b5b9291505056fea2646970667358221220ade7c1e9da2f64fa2e4c59e0465619e34fd6aeac273aecd0748679026a41345464736f6c63430008120033";

type FarmingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FarmingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Farming__factory extends ContractFactory {
  constructor(...args: FarmingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _stakingToken: PromiseOrValue<string>,
    _rewardToken1: PromiseOrValue<string>,
    _rewardToken2: PromiseOrValue<string>,
    _depositFee: PromiseOrValue<BigNumberish>,
    _treasuryFee: PromiseOrValue<BigNumberish>,
    _treasury: PromiseOrValue<string>,
    _reward1PerBlock: PromiseOrValue<BigNumberish>,
    _reward2PerBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Farming> {
    return super.deploy(
      _stakingToken,
      _rewardToken1,
      _rewardToken2,
      _depositFee,
      _treasuryFee,
      _treasury,
      _reward1PerBlock,
      _reward2PerBlock,
      overrides || {}
    ) as Promise<Farming>;
  }
  override getDeployTransaction(
    _stakingToken: PromiseOrValue<string>,
    _rewardToken1: PromiseOrValue<string>,
    _rewardToken2: PromiseOrValue<string>,
    _depositFee: PromiseOrValue<BigNumberish>,
    _treasuryFee: PromiseOrValue<BigNumberish>,
    _treasury: PromiseOrValue<string>,
    _reward1PerBlock: PromiseOrValue<BigNumberish>,
    _reward2PerBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _stakingToken,
      _rewardToken1,
      _rewardToken2,
      _depositFee,
      _treasuryFee,
      _treasury,
      _reward1PerBlock,
      _reward2PerBlock,
      overrides || {}
    );
  }
  override attach(address: string): Farming {
    return super.attach(address) as Farming;
  }
  override connect(signer: Signer): Farming__factory {
    return super.connect(signer) as Farming__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FarmingInterface {
    return new utils.Interface(_abi) as FarmingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Farming {
    return new Contract(address, _abi, signerOrProvider) as Farming;
  }
}
